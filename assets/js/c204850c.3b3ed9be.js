"use strict";(self.webpackChunkawesome_notes=self.webpackChunkawesome_notes||[]).push([[7463],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return g}});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var u=a.createContext({}),s=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(t),g=l,k=m["".concat(u,".").concat(g)]||m[g]||p[g]||r;return t?a.createElement(k,o(o({ref:n},c),{},{components:t})):a.createElement(k,o({ref:n},c))}));function g(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,o=new Array(r);o[0]=m;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9668:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return p}});var a=t(7462),l=t(3366),r=(t(7294),t(3905)),o=["components"],i={author:"Sabertazimi",authorTitle:"Web Developer",authorURL:"https://github.com/sabertazimi",authorImageURL:"https://github.com/sabertazimi.png",tags:["Language","Go"]},u="Go Basic Notes",s={unversionedId:"language/go/goBasicNotes",id:"language/go/goBasicNotes",title:"Go Basic Notes",description:"CLI",source:"@site/notes/language/go/goBasicNotes.md",sourceDirName:"language/go",slug:"/language/go/goBasicNotes",permalink:"/awesome-notes/language/go/goBasicNotes",editUrl:"https://github.com/sabertazimi/awesome-notes/edit/main/notes/language/go/goBasicNotes.md",tags:[{label:"Language",permalink:"/awesome-notes/tags/language"},{label:"Go",permalink:"/awesome-notes/tags/go"}],version:"current",lastUpdatedBy:"sabertazimi",lastUpdatedAt:1649250539,formattedLastUpdatedAt:"4/6/2022",frontMatter:{author:"Sabertazimi",authorTitle:"Web Developer",authorURL:"https://github.com/sabertazimi",authorImageURL:"https://github.com/sabertazimi.png",tags:["Language","Go"]},sidebar:"sidebar",previous:{title:"C++ Basic Notes",permalink:"/awesome-notes/language/cpp/cppBasicNotes"},next:{title:"Haskell Basic Notes",permalink:"/awesome-notes/language/haskell/haskellBasicNotes"}},c={},p=[{value:"CLI",id:"cli",level:2},{value:"Installation",id:"installation",level:3},{value:"Basic Command",id:"basic-command",level:3},{value:"Build",id:"build",level:4},{value:"Test",id:"test",level:4},{value:"Clean",id:"clean",level:4},{value:"Modules",id:"modules",level:4},{value:"Packages",id:"packages",level:2},{value:"package and import",id:"package-and-import",level:3},{value:"Variable",id:"variable",level:2},{value:"Type Declaration",id:"type-declaration",level:3},{value:"Type conversions",id:"type-conversions",level:3},{value:"struct",id:"struct",level:3},{value:"array",id:"array",level:3},{value:"slice",id:"slice",level:3},{value:"map",id:"map",level:3},{value:"Flow Control",id:"flow-control",level:2},{value:"if",id:"if",level:3},{value:"for",id:"for",level:3},{value:"switch",id:"switch",level:3},{value:"defer",id:"defer",level:3},{value:"\u6267\u884c\u65f6\u673a",id:"\u6267\u884c\u65f6\u673a",level:4},{value:"\u5b9e\u8d28",id:"\u5b9e\u8d28",level:4},{value:"\u5e94\u7528\u573a\u666f",id:"\u5e94\u7528\u573a\u666f",level:4},{value:"Function",id:"function",level:2},{value:"Parameters and Return Value",id:"parameters-and-return-value",level:3},{value:"Methods",id:"methods",level:3},{value:"Receiver",id:"receiver",level:4},{value:"Interface",id:"interface",level:3},{value:"\u503c",id:"\u503c",level:4},{value:"Type Assertions",id:"type-assertions",level:4},{value:"Concurrent",id:"concurrent",level:2},{value:"goroutine",id:"goroutine",level:3},{value:"channels",id:"channels",level:3},{value:"select",id:"select",level:4},{value:"Worker Pools",id:"worker-pools",level:4}],m={toc:p};function g(e){var n=e.components,t=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"go-basic-notes"},"Go Basic Notes"),(0,r.kt)("h2",{id:"cli"},"CLI"),(0,r.kt)("h3",{id:"installation"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'sudo apt install golang\necho "export GOPATH=$HOME/gopath"\necho "export PATH=$PATH:$GOPATH/bin"\ngo env\n')),(0,r.kt)("h3",{id:"basic-command"},"Basic Command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go version\ngo run main.go\ngo fmt /path/to/test\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"go \u7684\u5927\u90e8\u5206\u5de5\u5177\u7684\u4f5c\u7528\u57fa\u672c\u5355\u4f4d\u4e3a package(directories)")),(0,r.kt)("h4",{id:"build"},"Build"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# generate library\ngo build path/to/libpack\ngo install path/to/libpack\n\n# generate binary\ngo install path/to/mainpack\n")),(0,r.kt)("h4",{id:"test"},"Test"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# path/to/pack/demo.go\n# path/to/pack/demo_test.go\ngo test path/to/pack\n")),(0,r.kt)("h4",{id:"clean"},"Clean"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go clean -i path/to/pack\n")),(0,r.kt)("h4",{id:"modules"},"Modules"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Remote packages."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$GOPATH/bin/hello"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go get github.com/golang/example/hello\n")),(0,r.kt)("h2",{id:"packages"},"Packages"),(0,r.kt)("h3",{id:"package-and-import"},"package and import"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"for path/to/pack:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"package pack\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "path/to/pack"\n)\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u53ea\u6709\u9996\u5b57\u6bcd\u5927\u5199\u7684\u51fd\u6570\u624d\u53ef\u88ab\u6210\u529f\u5bfc\u51fa, \u9996\u5b57\u6bcd\u5c0f\u5199\u7684\u51fd\u6570\u4e3a\u6587\u4ef6\u79c1\u6709\u51fd\u6570")),(0,r.kt)("h2",{id:"variable"},"Variable"),(0,r.kt)("h3",{id:"type-declaration"},"Type Declaration"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Go \u5c06\u7c7b\u578b\u7f6e\u4e8e\u53d8\u91cf\u540d\u540e\u7684\u7406\u7531: reads clearly, from left to right"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},":=")," \u4e0d\u53ef\u7528\u5728\u51fd\u6570\u5916")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// \u7b80\u5199\u7c7b\u578b/\u8d4b\u503c\nvar i,j int = 1, 2\n\n// \u7701\u7565\u7c7b\u578b\nvar c, python, java = true, false, "no!"\n\n// \u7701\u7565 var \u5173\u952e\u5b57\njavascript, ruby, cpp:= true, false, "no!"\n\n// \u58f0\u660e\u5757\nimport (\n    "math/cmplx"\n)\n\nvar (\n    ToBe   bool       = false\n    MaxInt uint64     = 1<<64 - 1\n    z      complex128 = cmplx.Sqrt(-5 + 12i)\n)\n')),(0,r.kt)("h3",{id:"type-conversions"},"Type conversions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"var x int = 3\nvar y uint = uint(x)\nz := uint(x)\n")),(0,r.kt)("h3",{id:"struct"},"struct"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type Vertex struct {\n    X int\n    Y int\n}\n\nvar (\n    v1 = Vertex{1, 2}\n    v2 = Vertex{X: 1}   // Y: 0\n    v3 = Vertex{}       // X: 0, Y: 0\n    vp = &Vertex{1, 2}  // *Vertex\n)\n")),(0,r.kt)("h3",{id:"array"},"array"),(0,r.kt)("p",null,"\u6570\u7ec4\u7684\u957f\u5ea6\u662f\u5176\u7c7b\u578b\u7684\u4e00\u90e8\u5206"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'var a [2]string\na[0] = "Hello"\na[1] = "Golang"\n\nfmt.Println(a[0], a[1])\nfmt.Println(a)\n')),(0,r.kt)("h3",{id:"slice"},"slice"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"s","[lo:lo]"," == nil")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'p := []int{2, 3, 5, 7, 11, 13}\n\nfmt.Println("p[1:4] ==", p[1:4])\nfmt.Println("p[:3] ==", p[:3])  // p[0:3]        => 0, 1, 2\nfmt.Println("p[4:]" ==, p[4:])  // p[4:len(p)-1] => 4, ..., len(p)-2\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"make \u51fd\u6570\u521b\u5efa slice")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"a := make([]int, 5)     // len(a) = 5\nb := make([]int, 0, 5)  // len(b) = 0, cap(b) = 5\nb = b[:cap(5)]          // len(b) = 5, cap(b) = 5\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"len && cap")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// just shorten/extend, not drop elements\n// change len(p), keep cap(p)\np = p [:0]\np = p[:4]\n\n// drop its elements\n// change len(p) and cap(p)\np = p[2:]\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"append")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"append(s, 2, 3, 4)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"range(iterator): \u8fd4\u56de 2 \u4e2a\u503c(index int, element copy(s","[index]",") T), \u5728\u6bcf\u4e00\u6b21\u8fed\u4ee3 index+=1")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'pow := []int{1, 2, 4, 8, 16, 32, 64, 128}\n\nfunc main() {\n    for i := range pow {\n        fmt.Printf("index == %d\\n", i)\n    }\n\n    for _, v := range pow {\n        fmt.Printf("value == %d\\n", v)\n    }\n\n    for i, v := range pow {\n        fmt.Printf("2**%d = %d\\n", i, v)\n    }\n}\n')),(0,r.kt)("h3",{id:"map"},"map"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'type Vertex struct {\n    Lat, Long float64\n}\n\nvar m map[string]Vertex = make(map[string]Vertex)\nm["Bell Labs"] = Vertex{\n    40.68433, -74.39967\n}\n\nml := map[string]Vertex{\n    "Bell Labs": Vertex{\n        40.68433, -74.39967,\n    },\n    "Google": {37.42202, -122.08408},\n}\n\ndelete(m, "Bell Labs")\n\nelement, ok_flag := m["Google"]\n')),(0,r.kt)("h2",{id:"flow-control"},"Flow Control"),(0,r.kt)("h3",{id:"if"},"if"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'if x < 0 {\n    return true\n}\n\n// scope of v: only in if/else statement\nif v := math.Pow(x, n); v < lim {\n    return v\n} else {\n    fmt.Printf("%g >= %g\\n", v, lim)\n}\n')),(0,r.kt)("h3",{id:"for"},"for"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"for sum < 1000 {\n    sum += sum\n}\n\n// scope of i: only in for statement\nfor i := 0; i < 10; i++ {\n    sum += i\n}\n")),(0,r.kt)("h3",{id:"switch"},"switch"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"switch \u4e2d\u7684 case \u81ea\u52a8 break(\u9664\u975e\u4f7f\u7528 fallthrough \u8bed\u53e5)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'switch time.Saturday {\n    case today+0:\n        fmt.Println("Today.")\n    case today+1:\n        fmt.Println("Tomorrow.")\n    case today+2:\n        fmt.Println("In two days.")\n    default:\n        fmt.Println("Too far away.")\n}\n\n// scope of os: only in switch statement\nswitch os := runtime.GOOS; os {\n    case "darwin":\n        fmt.Println("OS X.")\n    case "linux":\n        fmt.Println("Linux.")\n    default:\n        fmt.Printf("%s", os)\n}\n\n// alias for if-else long chain\nswitch {    // switch true\n    case t.Hour() < 12:\n        fmt.Println("Good morning!")\n    case t.Hour() < 17:\n        fmt.Println("Good afternoon!")\n    default:\n        fmt.Println("Good evening!")\n}\n')),(0,r.kt)("h3",{id:"defer"},"defer"),(0,r.kt)("p",null,"defer \u8bed\u53e5\u4f1a\u5c06\u51fd\u6570\u6267\u884c\u5ef6\u8fdf\u81f3\u4e0a\u5c42\u51fd\u6570\u8fd4\u56de\u5904(\u51fd\u6570\u53c2\u6570\u4f1a\u7acb\u523b\u751f\u6210):"),(0,r.kt)("h4",{id:"\u6267\u884c\u65f6\u673a"},"\u6267\u884c\u65f6\u673a"),(0,r.kt)("p",null,"\u51fd\u6570\u8bbe\u7f6e\u8fd4\u56de\u503c\u540e, \u5373\u5c06\u8fd4\u56de\u8c03\u7528\u51fd\u6570\u524d(\u82e5 defer \u51fd\u6570\u4fee\u6539\u8fd4\u56de\u53d8\u91cf, \u5219\u4f1a\u9020\u6210\u8fd4\u56de\u503c\u4e0e\u9884\u671f\u4e0d\u4e00\u81f4)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n    defer fmt.Println("!")\n    defer fmt.Println("world")\n    fmt.Println("hello")\n}\n\n=>\n\nfunc main() {\n    fmt.Println("hello")\n    fmt.Println("world")\n    fmt.Println("!")\n}\n')),(0,r.kt)("h4",{id:"\u5b9e\u8d28"},"\u5b9e\u8d28"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"return_value")," = xxx -> invoke defer functions(stack) -> return void"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func f() (result int) {\n    defer func() {\n        result++\n    }()\n\n    return 0\n}\n\n=>\n\nfunc f() (result int) {\n    result = 0\n\n    func() {\n        result++\n    }()\n\n    return\n}\n")),(0,r.kt)("h4",{id:"\u5e94\u7528\u573a\u666f"},"\u5e94\u7528\u573a\u666f"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u8d44\u6e90\u56de\u6536")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"mu.Lock()\ndefer mu.Unlock()\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"panic \u5f02\u5e38\u7684\u6355\u83b7")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func f() {\n    defer func() {\n        if r:= recover(); r!= nil {\n            fmt.Println("Recovered in f", r)\n        }\n    }()\n\n    fmt.Println("Calling g.")\n    g()\n    fmt.Println("Returned normally from g.")\n}\n\nfunc g() {\n    panic("ERROR")\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u4fdd\u8bc1\u8bed\u53e5(\u5728\u53d1\u751f\u5f02\u5e38\u7684\u60c5\u51b5\u4e0b)\u59cb\u7ec8\u4f1a\u88ab\u6267\u884c"),(0,r.kt)("li",{parentName:"ul"},"\u6709\u610f\u4fee\u6539\u8fd4\u56de\u503c")),(0,r.kt)("h2",{id:"function"},"Function"),(0,r.kt)("h3",{id:"parameters-and-return-value"},"Parameters and Return Value"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u7b80\u5199\u53c2\u6570\u7c7b\u578b"),(0,r.kt)("li",{parentName:"ul"},"\u591a\u503c\u8fd4\u56de\u51fd\u6570"),(0,r.kt)("li",{parentName:"ul"},"\u547d\u540d\u8fd4\u56de\u503c(\u6ce8\u91ca\u6587\u6863)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func swap(x, y string) (string, string) {\n    return y, x\n}\n\nfunc swap_(x, y string) (x_, y_ string) {\n    x_, y_ = y, x\n    return\n}\n\nfunc main() {\n    a, b := swap("hello", "golang")\n    a_, b_ := swap_("hello", "golang")\n    fmt.Println(a, b)\n    fmt.Println(a_, b_)\n}\n')),(0,r.kt)("h3",{id:"methods"},"Methods"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Go \u4e2d\u6ca1\u6709 class, \u4f46\u53ef\u4ee5\u5728 struct/\u540c\u4e00\u4e2a\u5305\u5185\u7684 type \u4e0a(receiver)\u5b9a\u4e49\u65b9\u6cd5")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type Vertex struct {\n    X, Y float64\n}\n\nfunc (v *Vertex) Abs() float64 {\n    return math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\n\nfunc main() {\n    v := &Vertex{3, 4}\n    fmt.Println(v.Abs())\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type MyFloat float64\n\nfunc (f MyFloat) Abs() float64 {\n    if f < 0 {\n        return float64(-f)\n    } else {\n        return float64(f)\n    }\n}\n\nfunc main() {\n    f := MyFloat(-math.Sqrt2)\n    fmt.Println(f.Abs())\n")),(0,r.kt)("h4",{id:"receiver"},"Receiver"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"pointer receiver: \u53ef\u4ee5\u6539\u53d8\u539f\u503c(call by reference)"),(0,r.kt)("li",{parentName:"ul"},"value receive: \u4e0d\u53ef\u4ee5\u6539\u53d8\u539f\u503c(call by value)"),(0,r.kt)("li",{parentName:"ul"},"\u8c03\u7528 methods \u65f6, \u53ef\u4ee5\u4e0d\u8003\u8651 v \u662f value/pointer, go \u4f1a\u81ea\u52a8\u5904\u7406")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func (v *Vertex) changeV() {\n    v.X += 1\n    v.Y += 1\n}\n\nv.changeV() => (&v).changeV()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func (v Vertex) Abs() {\n    return abs(v)\n}\n\n(&v).Abs() => v.Abs()\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Best Practice: \u5728\u540c\u4e00\u4e2a\u7c7b\u578b\u4e0a\u5b9a\u4e49\u7684\u6240\u6709\u65b9\u6cd5\u6700\u597d\u7edf\u4e00 receiver \u7c7b\u578b(\u5168\u90e8 value receivers \u6216 \u5168\u90e8 pointer receivers)")),(0,r.kt)("h3",{id:"interface"},"Interface"),(0,r.kt)("h4",{id:"\u503c"},"\u503c"),(0,r.kt)("p",null,"(value, type)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"var i I\nvar t *T\ni = t   // => (nil, *T)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"var i I     // => (nil, nil)\n")),(0,r.kt)("h4",{id:"type-assertions"},"Type Assertions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5355\u8fd4\u56de\u503c: \u65ad\u8a00\u5931\u8d25\u65f6\u4ea7\u751f panic"),(0,r.kt)("li",{parentName:"ul"},"\u53cc\u8fd4\u56de\u503c: \u65ad\u8a00\u5931\u8d25\u65f6\u4e0d\u4ea7\u751f panic")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// create empty interface, ("hello", string)\nvar i interface{} = "hello"\n\ns := i.(string)\ns, ok := i.(string) // => true\nf, ok := i.(float64)// => false(no panic)\nf := i.(float64)    // => false with panic\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type switches")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'switch v := i.(type) {\n    case int;\n        fmt.Println("Int.")\n    case string:\n        fmt.Println("String.")\n    default:\n        fmt.Printf("Other type.")\n}\n')),(0,r.kt)("h2",{id:"concurrent"},"Concurrent"),(0,r.kt)("h3",{id:"goroutine"},"goroutine"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"go f(x, y, z)   // => execute in a new goroutine with share memory\n")),(0,r.kt)("h3",{id:"channels"},"channels"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"typed conduit(\u7c7b\u578b\u7ba1\u9053)"),(0,r.kt)("li",{parentName:"ul"},"block execution")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"var c chan int = make(chan int)\n\nc <- sum    // send sum to channel c\nv := <-c    // receive from channel c, assign value to v\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func sum(s []int, c chan int) {\n    sum := 0\n\n    for _, v := range s {\n        sum += v\n    }\n\n    c <- sum\n}\n\nfunc main() {\n    s := []int{7, 2, 8, -9, 4, 0}\n\n    c := make(chan int)\n\n    go sum(s[:len(s)/2], c)\n    go sum(s[len(s/2):], c)\n\n    x, y = <-c, <-c\n\n    fmt.Println(x, y, x+y)\n}\n")),(0,r.kt)("h4",{id:"select"},"select"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"select(\u5f53\u6240\u6709\u60c5\u51b5\u90fd\u4e0d\u6ee1\u8db3\u65f6)\u53ef\u88ab\u963b\u585e")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'for {\n    select {\n        case c <- x:\n            x, y = y, x+y\n        case <- quit:\n            fmt.Println("quit")\n            return\n    }\n}\n')),(0,r.kt)("h4",{id:"worker-pools"},"Worker Pools"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "fmt"\nimport "time"\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n    for j := range jobs {\n        fmt.Println("worker", id, "processing job", j)\n        time.Sleep(time.Second)\n        results <- j * 2\n    }\n}\n\nfunc main() {\n    jobs := make(chan int, 100)\n    results := make(chan int, 100)\n\n    for w := 1; w <= 3; w++ {\n        go worker(w, jobs, results)\n    }\n\n    for j := 1; j <= 9; j++ {\n        jobs <- j\n    }\n\n    close(jobs)\n\n    for a := 1; a <= 9; a++ {\n        <-results\n    }\n}\n')))}g.isMDXComponent=!0}}]);