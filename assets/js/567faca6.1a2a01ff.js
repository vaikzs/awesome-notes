"use strict";(self.webpackChunkawesome_notes=self.webpackChunkawesome_notes||[]).push([[1715],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=r,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3576:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return u}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={author:"Sabertazimi",authorTitle:"Web Developer",authorURL:"https://github.com/sabertazimi",authorImageURL:"https://github.com/sabertazimi.png",tags:["Web","React","Redux","State Management"]},l="Redux Basic Notes",d={unversionedId:"web/react/reduxBasicNotes",id:"web/react/reduxBasicNotes",title:"Redux Basic Notes",description:"Redux Concepts",source:"@site/notes/web/react/reduxBasicNotes.md",sourceDirName:"web/react",slug:"/web/react/reduxBasicNotes",permalink:"/awesome-notes/web/react/reduxBasicNotes",editUrl:"https://github.com/sabertazimi/awesome-notes/edit/main/notes/web/react/reduxBasicNotes.md",tags:[{label:"Web",permalink:"/awesome-notes/tags/web"},{label:"React",permalink:"/awesome-notes/tags/react"},{label:"Redux",permalink:"/awesome-notes/tags/redux"},{label:"State Management",permalink:"/awesome-notes/tags/state-management"}],version:"current",lastUpdatedBy:"Sabertaz",lastUpdatedAt:1648988251,formattedLastUpdatedAt:"4/3/2022",frontMatter:{author:"Sabertazimi",authorTitle:"Web Developer",authorURL:"https://github.com/sabertazimi",authorImageURL:"https://github.com/sabertazimi.png",tags:["Web","React","Redux","State Management"]},sidebar:"sidebar",previous:{title:"React Router Basic Notes",permalink:"/awesome-notes/web/react/reactRouterBasicNotes"},next:{title:"Security Basic Notes",permalink:"/awesome-notes/web/security/securityBasicNotes"}},c={},u=[{value:"Redux Concepts",id:"redux-concepts",level:2},{value:"Store",id:"store",level:2},{value:"Create Store",id:"create-store",level:3},{value:"Configure Store",id:"configure-store",level:3},{value:"State",id:"state",level:2},{value:"Persisted State",id:"persisted-state",level:3},{value:"Normalized State",id:"normalized-state",level:3},{value:"Entity Adapter Tool",id:"entity-adapter-tool",level:4},{value:"Action",id:"action",level:2},{value:"Reducer",id:"reducer",level:2},{value:"Reducer Boilerplate",id:"reducer-boilerplate",level:3},{value:"Reducer Enhancer",id:"reducer-enhancer",level:3},{value:"RTK Reducer API",id:"rtk-reducer-api",level:3},{value:"Slice",id:"slice",level:2},{value:"Selector",id:"selector",level:2},{value:"UseSelector Hook",id:"useselector-hook",level:3},{value:"CreateSelector API",id:"createselector-api",level:3},{value:"Selector Best Practice and Pitfalls",id:"selector-best-practice-and-pitfalls",level:3},{value:"Thunk",id:"thunk",level:2},{value:"Thunk Middleware Implementation",id:"thunk-middleware-implementation",level:3},{value:"Create Async Thunk API",id:"create-async-thunk-api",level:3},{value:"Middleware",id:"middleware",level:2},{value:"Middleware Basic Concepts",id:"middleware-basic-concepts",level:3},{value:"Middleware Simple Implementation",id:"middleware-simple-implementation",level:3},{value:"Scheduler Middleware",id:"scheduler-middleware",level:3},{value:"Thunk Middleware",id:"thunk-middleware",level:3},{value:"Typed Middleware",id:"typed-middleware",level:3},{value:"RTK Query",id:"rtk-query",level:2},{value:"Server State Management",id:"server-state-management",level:3},{value:"Basic RTK Query Usage",id:"basic-rtk-query-usage",level:3},{value:"RTK Query Cache Mechanism",id:"rtk-query-cache-mechanism",level:3},{value:"RTK Query Selector",id:"rtk-query-selector",level:3},{value:"Splitting Query Endpoints",id:"splitting-query-endpoints",level:3},{value:"Transform Query Response",id:"transform-query-response",level:3},{value:"RTK Query Reference",id:"rtk-query-reference",level:3},{value:"React Redux Binding Library",id:"react-redux-binding-library",level:2},{value:"Typed React Redux Hooks",id:"typed-react-redux-hooks",level:3},{value:"Custom React Redux Hooks",id:"custom-react-redux-hooks",level:3},{value:"React Redux API Reference",id:"react-redux-api-reference",level:3},{value:"Redux Server Side Rendering",id:"redux-server-side-rendering",level:2},{value:"Redux Internal",id:"redux-internal",level:2},{value:"Store Constructor Implementation",id:"store-constructor-implementation",level:3},{value:"Action Validation",id:"action-validation",level:3},{value:"Provider and Connection",id:"provider-and-connection",level:3},{value:"Redux Performance",id:"redux-performance",level:2},{value:"Redux Code Splitting",id:"redux-code-splitting",level:3},{value:"Redux Performance Pitfalls",id:"redux-performance-pitfalls",level:3},{value:"Redux Performance Best Practice",id:"redux-performance-best-practice",level:3},{value:"Redux Best Practice",id:"redux-best-practice",level:2},{value:"Redux Necessity",id:"redux-necessity",level:3},{value:"Redux Style Guide",id:"redux-style-guide",level:3},{value:"Redux Tips",id:"redux-tips",level:3},{value:"State Management",id:"state-management",level:3},{value:"Redux Tools",id:"redux-tools",level:2},{value:"Immutable Data Tools",id:"immutable-data-tools",level:3},{value:"Middleware Tools",id:"middleware-tools",level:3},{value:"State Tools",id:"state-tools",level:3},{value:"Debugging Tools",id:"debugging-tools",level:3},{value:"Redux Reference",id:"redux-reference",level:2}],p={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"redux-basic-notes"},"Redux Basic Notes"),(0,o.kt)("h2",{id:"redux-concepts"},"Redux Concepts"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u5355\u4e00\u6570\u636e\u6e90: \u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u72b6\u6001\u5b58\u50a8\u5728\u5355\u4e2a\u5bf9\u8c61\u6811\u4e2d (\u5bb9\u6613\u8ddf\u8e2a/\u8c03\u8bd5)"),(0,o.kt)("li",{parentName:"ul"},"\u72b6\u6001\u53ea\u8bfb: \u901a\u8fc7 dispatch(action) \u95f4\u63a5\u66f4\u6539\u72b6\u6001, \u4e0d\u76f4\u63a5\u5199\u5165\u72b6\u6001"),(0,o.kt)("li",{parentName:"ul"},"\u7eaf\u51fd\u6570\u66f4\u6539\u72b6\u6001: reducer(state, action) => newState")),(0,o.kt)("h2",{id:"store"},"Store"),(0,o.kt)("p",null,"Redux \u4e2d\u53ea\u6709\u4e00\u4e2a\u5168\u5c40\u552f\u4e00 store \u72b6\u6001\u6811, \u4e14\u7531 reducers \u521b\u5efa store."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export default appStore = createStore(rootReducers, initState);\n")),(0,o.kt)("h3",{id:"create-store"},"Create Store"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\n\nimport monitorReducersEnhancer from './enhancers/monitorReducers';\nimport loggerMiddleware from './middleware/logger';\nimport rootReducer from './reducers';\n\nexport default function configureStore(preloadedState) {\n  const middlewares = [loggerMiddleware, thunkMiddleware];\n  const middlewareEnhancer = applyMiddleware(...middlewares);\n\n  const enhancers = [middlewareEnhancer, monitorReducersEnhancer];\n  const composedEnhancers = composeWithDevTools(...enhancers);\n\n  const store = createStore(rootReducer, preloadedState, composedEnhancers);\n\n  if (process.env.NODE_ENV !== 'production' && module.hot) {\n    module.hot.accept('./reducers', () => store.replaceReducer(rootReducer));\n  }\n\n  return store;\n}\n")),(0,o.kt)("h3",{id:"configure-store"},"Configure Store"),(0,o.kt)("p",null,"By default, ",(0,o.kt)("inlineCode",{parentName:"p"},"configureStore")," from Redux Toolkit will:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Call ",(0,o.kt)("inlineCode",{parentName:"li"},"applyMiddleware")," with a default list of middlewares",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/reduxjs/redux-thunk"},"Async thunk middleware"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://redux-toolkit.js.org/api/immutabilityMiddleware"},"Immutability check middleware"),":\nthrow error when detecting mutations in reducers during a dispatch."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://redux-toolkit.js.org/api/serializabilityMiddleware"},"Serializability check middleware"),":\nthrow error when deeply detecting non-serializable values in state tree\n(functions, promises, symbols, and other non-plain-data values)."))),(0,o.kt)("li",{parentName:"ul"},"Call ",(0,o.kt)("inlineCode",{parentName:"li"},"composeWithDevTools")," to set up the Redux DevTools Extension.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport loggerMiddleware from './middleware/logger';\nimport rootReducer from './reducers';\n\nexport default function configureAppStore(preloadedState) {\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: [loggerMiddleware, ...getDefaultMiddleware()],\n    preloadedState,\n  });\n\n  if (process.env.NODE_ENV === 'development' && module.hot) {\n    module.hot.accept('./reducers', () => store.replaceReducer(rootReducer));\n  }\n\n  return store;\n}\n")),(0,o.kt)("h2",{id:"state"},"State"),(0,o.kt)("p",null,"\u5728 Redux \u4e2d State \u5e76\u4e0d\u663e\u5f0f\u5b9a\u4e49:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u521d\u6001\u4e0e\u53d8\u5316\u6001\u7686\u7531 Reducers \u5b9a\u4e49\u5e76\u63a7\u5236"),(0,o.kt)("li",{parentName:"ul"},"Actions \u4e2d\u4fdd\u5b58\u7740 action.type \u5916, \u8fd8\u4fdd\u5b58\u7740\u4f9b Reducers \u8fdb\u884c\u6709\u6548\u72b6\u6001\u53d8\u5316\u7684\u5176\u4ed6\u4fe1\u606f(\u53ef\u81ea\u5b9a\u4e49)"),(0,o.kt)("li",{parentName:"ul"},"\u8c03\u7528 Dispatch \u65b9\u6cd5\u81ea\u52a8\u5411 Store \u4f20\u9012\u4e00\u4e2a Action(\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u5168\u5c40 Store, \u6545\u65e0\u9700\u989d\u5916\u6307\u5b9a Store \u53c2\u6570),\nStore \u904d\u5386\u8c03\u7528\u5176\u4e2d\u7684 Reducers, \u6839\u636e switch \u8bed\u53e5\u8fdb\u884c\u5339\u914d action \u5904\u7406"),(0,o.kt)("li",{parentName:"ul"},"reducer \u53ea\u4fdd\u5b58\u6700\u57fa\u672c\u7684 state, \u53ef\u8ba1\u7b97\u51fa\u7684 state \u653e\u5728 mapStateToProps(selector) \u4e2d\u76f4\u63a5\u8ba1\u7b97\u540e\u7ed1\u5b9a\u81f3 props"),(0,o.kt)("li",{parentName:"ul"},"\u5c06\u6570\u636e\u4fdd\u5b58\u5728 Redux \u5b58\u50a8\u4e2d, \u5e76\u5728\u7ec4\u4ef6\u5185\u90e8\u4fdd\u6301 UI \u76f8\u5173\u72b6\u6001")),(0,o.kt)("h3",{id:"persisted-state"},"Persisted State"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// localStorage.getItem('state')/localStorage.setItem('state', serializedState)\nconst persistedState = loadLocalStorageState();\nconst appStore = createStore(rootReducers, persistedState);\n\nappStore.subscribe(\n  throttle(() => {\n    saveLocalStorageState({\n      todos: store.getState().todos,\n    });\n  }, 1000)\n);\n")),(0,o.kt)("h3",{id:"normalized-state"},"Normalized State"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://redux.js.org/usage/structuring-reducers/normalizing-state-shape"},"Redux normalizing state shape"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Only have one copy of each particular piece of data in state (no duplication)."),(0,o.kt)("li",{parentName:"ul"},"Normalized data is kept in lookup table (key-value store),\nwhere item IDs are keys, items themselves are values."),(0,o.kt)("li",{parentName:"ul"},"There may also be an array of all of the IDs for a particular item type.")),(0,o.kt)("p",null,"Normalizing data:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Each type of data gets its own ",(0,o.kt)("inlineCode",{parentName:"li"},"table")," in state."),(0,o.kt)("li",{parentName:"ul"},"Each ",(0,o.kt)("inlineCode",{parentName:"li"},"data table")," should store individual items in an ",(0,o.kt)("inlineCode",{parentName:"li"},"{ key, value }")," object:\n",(0,o.kt)("inlineCode",{parentName:"li"},'"p1" : { id : "p1", author : "user1", comments : ["comment1", "comment2"] }'),"."),(0,o.kt)("li",{parentName:"ul"},"Any references to individual items should be item ID."),(0,o.kt)("li",{parentName:"ul"},"Arrays of IDs should be used to indicate ordering.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const state = {\n  users: {\n    ids: ['user1', 'user2', 'user3'],\n    entities: {\n      user1: { id: 'user1', firstName, lastName },\n      user2: { id: 'user2', firstName, lastName },\n      user3: { id: 'user3', firstName, lastName },\n    },\n  },\n};\n\nconst userId = 'user2';\nconst userObject = state.users.entities[userId];\n")),(0,o.kt)("p",null,"Normalize nesting data with ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/paularmstrong/normalizr"},"Normalizr"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const data = {\n  entities: {\n    authors: { byId: {}, allIds: [] },\n    books: { byId: {}, allIds: [] },\n    authorBook: {\n      byId: {\n        1: {\n          id: 1,\n          authorId: 5,\n          bookId: 22,\n        },\n        2: {\n          id: 2,\n          authorId: 5,\n          bookId: 15,\n        },\n        3: {\n          id: 3,\n          authorId: 42,\n          bookId: 12,\n        },\n      },\n      allIds: [1, 2, 3],\n    },\n  },\n};\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const blogPosts = [\n  {\n    id: 'post1',\n    author: { username: 'user1', name: 'User 1' },\n    body: '......',\n    comments: [\n      {\n        id: 'comment1',\n        author: { username: 'user2', name: 'User 2' },\n        comment: '.....',\n      },\n      {\n        id: 'comment2',\n        author: { username: 'user3', name: 'User 3' },\n        comment: '.....',\n      },\n    ],\n  },\n  {\n    id: 'post2',\n    author: { username: 'user2', name: 'User 2' },\n    body: '......',\n    comments: [\n      {\n        id: 'comment3',\n        author: { username: 'user3', name: 'User 3' },\n        comment: '.....',\n      },\n      {\n        id: 'comment4',\n        author: { username: 'user1', name: 'User 1' },\n        comment: '.....',\n      },\n      {\n        id: 'comment5',\n        author: { username: 'user3', name: 'User 3' },\n        comment: '.....',\n      },\n    ],\n  },\n  // and repeat many times\n];\n\nconst normalizedBlogPosts = {\n  posts: {\n    byId: {\n      post1: {\n        id: 'post1',\n        author: 'user1',\n        body: '......',\n        comments: ['comment1', 'comment2'],\n      },\n      post2: {\n        id: 'post2',\n        author: 'user2',\n        body: '......',\n        comments: ['comment3', 'comment4', 'comment5'],\n      },\n    },\n    allIds: ['post1', 'post2'],\n  },\n  comments: {\n    byId: {\n      comment1: {\n        id: 'comment1',\n        author: 'user2',\n        comment: '.....',\n      },\n      comment2: {\n        id: 'comment2',\n        author: 'user3',\n        comment: '.....',\n      },\n      comment3: {\n        id: 'comment3',\n        author: 'user3',\n        comment: '.....',\n      },\n      comment4: {\n        id: 'comment4',\n        author: 'user1',\n        comment: '.....',\n      },\n      comment5: {\n        id: 'comment5',\n        author: 'user3',\n        comment: '.....',\n      },\n    },\n    allIds: ['comment1', 'comment2', 'comment3', 'comment4', 'comment5'],\n  },\n  users: {\n    byId: {\n      user1: {\n        username: 'user1',\n        name: 'User 1',\n      },\n      user2: {\n        username: 'user2',\n        name: 'User 2',\n      },\n      user3: {\n        username: 'user3',\n        name: 'User 3',\n      },\n    },\n    allIds: ['user1', 'user2', 'user3'],\n  },\n};\n")),(0,o.kt)("h4",{id:"entity-adapter-tool"},"Entity Adapter Tool"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://redux-toolkit.js.org/api/createEntityAdapter"},"createEntityAdapter"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Build normalized state."),(0,o.kt)("li",{parentName:"ul"},"Return normalized state CURD operation reducers."),(0,o.kt)("li",{parentName:"ul"},"Get data selectors by ",(0,o.kt)("inlineCode",{parentName:"li"},"getSelectors"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n} from '@reduxjs/toolkit';\nimport { client } from './api';\n\nconst postsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.date.localeCompare(a.date),\n});\n\n// State = { ids: [], entities: {}, status: 'idle', error: null };\nconst initialState = postsAdapter.getInitialState({\n  status: 'idle',\n  error: null,\n});\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts');\n  return response.data;\n});\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded(state, action) {\n      const { postId, reaction } = action.payload;\n      const existingPost = state.entities[postId];\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n    postUpdated(state, action) {\n      const { id, title, content } = action.payload;\n      const existingPost = state.entities[id];\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    },\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchPosts.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // Use the `upsertMany` reducer as a mutating update utility\n        postsAdapter.upsertMany(state, action.payload);\n      })\n      // Use the `addOne` reducer for the fulfilled case\n      .addCase(addNewPost.fulfilled, postsAdapter.addOne);\n  },\n});\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions;\n\n// Export the customized selectors for this adapter using `getSelectors`\nexport const {\n  selectAll: selectAllPosts,\n  selectById: selectPostById,\n  selectIds: selectPostIds,\n  // Pass in a selector that returns the posts slice of state\n} = postsAdapter.getSelectors(state => state.posts);\n\nexport const selectPostsByUser = createSelector(\n  [selectAllPosts, (state, userId) => userId],\n  (posts, userId) => posts.filter(post => post.user === userId)\n);\n\nexport default postsSlice.reducer;\n")),(0,o.kt)("h2",{id:"action"},"Action"),(0,o.kt)("p",null,"Because of ",(0,o.kt)("inlineCode",{parentName:"p"},"ActionCreator.toString()")," override,\naction creators returned by ",(0,o.kt)("inlineCode",{parentName:"p"},"createAction()"),"\ncan be used directly as ",(0,o.kt)("strong",{parentName:"p"},"keys")," for ",(0,o.kt)("inlineCode",{parentName:"p"},"case reducers")," passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"createReducer()"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createAction } from '@reduxjs/toolkit';\n\nconst increment = createAction<number | undefined>('counter/increment');\n\nlet action = increment(); // { type: 'counter/increment' }\naction = increment(3); // returns { type: 'counter/increment', payload: 3 }\nconsole.log(increment.toString());\nconsole.log(`The action type is: ${increment}`);\n// 'counter/increment'\n// 'The action type is: counter/increment'\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createAction, nanoid } from '@reduxjs/toolkit';\n\nconst addTodo = createAction('todos/add', function prepare(text: string) {\n  return {\n    payload: {\n      text,\n      id: nanoid(),\n      createdAt: new Date().toISOString(),\n    },\n  };\n});\n\nconsole.log(addTodo('Write more docs'));\n/**\n * {\n *   type: 'todos/add',\n *   payload: {\n *     text: 'Write more docs',\n *     id: '4AJvwMsWeHCChcWYga3dj',\n *     createdAt: '2019-10-03T07:53:36.581Z'\n *   }\n * }\n **/\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"RTK Pitfall")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Strongly recommend to only use string action types."))),(0,o.kt)("p",null,"Redux Toolkit rests on the assumption that you use string action types.\nSpecifically, some of its features rely on the fact that with strings,\n",(0,o.kt)("inlineCode",{parentName:"p"},"toString()")," method of ",(0,o.kt)("inlineCode",{parentName:"p"},"createAction()")," action creator returns matching action type."),(0,o.kt)("p",null,"This is not the case for non-string action types because ",(0,o.kt)("inlineCode",{parentName:"p"},"toString()"),"\nwill return the string-converted type value rather than the type ",(0,o.kt)("strong",{parentName:"p"},"itself"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const INCREMENT = Symbol('increment');\nconst increment = createAction(INCREMENT);\n\nincrement.toString();\n\n// returns the string 'Symbol(increment)',\n// not the INCREMENT symbol itself.\nassert(increment.toString() === INCREMENT, false);\n\nconst counterReducer = createReducer(0, {\n  // The following case reducer will NOT trigger for\n  // increment() actions because `increment` will be\n  // interpreted as a string, rather than being evaluated\n  // to the INCREMENT symbol.\n  [increment]: (state, action) => state + action.payload,\n\n  // You would need to use the action type explicitly instead.\n  [INCREMENT]: (state, action) => state + action.payload,\n});\n")),(0,o.kt)("h2",{id:"reducer"},"Reducer"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://redux.js.org/recipes/reducing-boilerplate"},"Reducing Boilerplate"))),(0,o.kt)("p",null,"\u5fc5\u987b\u4fdd\u6301\u65e0\u4efb\u4f55\u526f\u4f5c\u7528: \u4e0d\u4fee\u6539\u4f20\u5165\u53c2\u6570, \u4e0d\u8c03\u7528\u526f\u4f5c\u7528\u51fd\u6570\n",(0,o.kt)("inlineCode",{parentName:"p"},"(api/date.now()/math.random())")),(0,o.kt)("h3",{id:"reducer-boilerplate"},"Reducer Boilerplate"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function createReducer(initialState, handlers) {\n  return function reducer(state = initialState, action) {\n    if (Object.prototype.hasOwnProperty.call(handlers, action.type)) {\n      return handlers[action.type](state, action);\n    } else {\n      return state;\n    }\n  };\n}\n\nconst reducer = createReducer(initialState, {\n  reset: () => initialState,\n  increment: state => ({ count: state.count + 1 }),\n  decrement: state => ({ count: state.count + 1 }),\n  [ActionTypes.ADD_TODO]: (state, action) => {},\n});\n")),(0,o.kt)("h3",{id:"reducer-enhancer"},"Reducer Enhancer"),(0,o.kt)("p",null,"Implement reducer enhancer with ",(0,o.kt)("inlineCode",{parentName:"p"},"higher order reducer"),",\nlike ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/omnidan/redux-undo"},"Redux Undo"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function undoable(reducer) {\n  // Call the reducer with empty action to populate the initial state\n  const initialState = {\n    past: [],\n    present: reducer(undefined, {}),\n    future: [],\n  };\n\n  // Return a reducer that handles undo and redo\n  return function (state = initialState, action) {\n    const { past, present, future } = state;\n\n    switch (action.type) {\n      case 'UNDO': {\n        const previous = past[past.length - 1];\n        const newPast = past.slice(0, past.length - 1);\n        return {\n          past: newPast,\n          present: previous,\n          future: [present, ...future],\n        };\n      }\n      case 'REDO': {\n        const next = future[0];\n        const newFuture = future.slice(1);\n        return {\n          past: [...past, present],\n          present: next,\n          future: newFuture,\n        };\n      }\n      default: {\n        // Delegate handling the action to the passed reducer\n        const newPresent = reducer(present, action);\n        if (present === newPresent) {\n          return state;\n        }\n        return {\n          past: [...past, present],\n          present: newPresent,\n          future: [],\n        };\n      }\n    }\n  };\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// This is a reducer\nimport { createStore } from 'redux';\n\nfunction todos(state = [], action) {\n  /* ... */\n}\n\n// This is also a reducer!\nconst undoableTodos = undoable(todos);\nconst store = createStore(undoableTodos);\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  text: 'Use Redux',\n});\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  text: 'Implement Undo',\n});\n\nstore.dispatch({\n  type: 'UNDO',\n});\n")),(0,o.kt)("h3",{id:"rtk-reducer-api"},"RTK Reducer API"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"createReducer"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"builder.addCase")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"builder.addMatcher"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If there is an exact match for the action type,\nthe corresponding ",(0,o.kt)("inlineCode",{parentName:"li"},"case reducer")," (",(0,o.kt)("inlineCode",{parentName:"li"},"CaseReducer<State, Action>"),") will execute first."),(0,o.kt)("li",{parentName:"ul"},"Any matchers that return true\nwill execute in the order they were defined."),(0,o.kt)("li",{parentName:"ul"},"If a default case reducer is provided,\nand no case or matcher reducers ran,\nthe default case reducer will execute."),(0,o.kt)("li",{parentName:"ul"},"If no case or matcher reducers ran,\nthe original existing state value will be returned unchanged."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ActionCreator")," from RTK has method ",(0,o.kt)("inlineCode",{parentName:"li"},"ActionCreator.match(action: Action)"),",\ncan used to TypeScript type narrowing.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Simple matcher\nfunction isNumberValueAction(\n  action: AnyAction\n): action is PayloadAction<{ value: number }> {\n  return typeof action.payload.value === 'number';\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createReducer } from '@reduxjs/toolkit';\n\nconst reducer = createReducer(0, builder => {\n  builder\n    .addCase('increment', state => state + 1)\n    .addMatcher(\n      action => action.startsWith('i'),\n      state => state * 5\n    )\n    .addMatcher(\n      action => action.endsWith('t'),\n      state => state + 2\n    );\n});\n\nconsole.log(reducer(0, { type: 'increment' }));\n// Returns 7, as the 'increment' case and both matchers all ran in sequence:\n// - case 'increment\": 0 => 1\n// - matcher starts with 'i': 1 => 5\n// - matcher ends with 't': 5 => 7\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"createReducer")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"createSlice"),"\nuses ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/immerjs/immer"},"immer"),"\nto let you write reducers as if they were mutating the state directly.\nIn reality, the reducer receives a proxy state\nthat translates all mutations into equivalent copy operations."),(0,o.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"Mutating State Case")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Only write ",(0,o.kt)("strong",{parentName:"p"},"mutating")," logic in RTK ",(0,o.kt)("inlineCode",{parentName:"p"},"createSlice")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"createReducer")," API."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createAction, createReducer } from '@reduxjs/toolkit';\n\ninterface Todo {\n  text: string;\n  completed: boolean;\n}\n\nconst addTodo = createAction<Todo>('todos/add');\nconst toggleTodo = createAction<number>('todos/toggle');\n\nconst todosReducer = createReducer([] as Todo[], builder => {\n  builder\n    .addCase(addTodo, (state, action) => {\n      // This push() operation gets translated into\n      // the same extended-array creation as in the previous example.\n      const todo = action.payload;\n      state.push(todo);\n    })\n    .addCase(toggleTodo, (state, action) => {\n      // The \"mutating\" version of this case reducer is\n      // much more direct than the explicitly pure one.\n      const index = action.payload;\n      const todo = state[index];\n      todo.completed = !todo.completed;\n    });\n});\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Reducer Pitfall")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Ensure that either mutate state argument or return a new state, but ",(0,o.kt)("strong",{parentName:"p"},"not both"),"."))),(0,o.kt)("p",null,"Following reducer would throw an exception if a toggleTodo action is passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createAction, createReducer } from '@reduxjs/toolkit';\n\ninterface Todo {\n  text: string;\n  completed: boolean;\n}\n\nconst toggleTodo = createAction<number>('todos/toggle');\n\nconst todosReducer = createReducer([] as Todo[], builder => {\n  builder.addCase(toggleTodo, (state, action) => {\n    const index = action.payload;\n    const todo = state[index];\n\n    // This case reducer both mutates the passed-in state...\n    todo.completed = !todo.completed;\n\n    // And returns a new value.\n    // This will throw an exception.\n    // In this example, the easiest fix is to remove the `return` statement.\n    return [...state.slice(0, index), todo, ...state.slice(index + 1)];\n  });\n});\n")),(0,o.kt)("p",null,"Other pitfalls for ",(0,o.kt)("inlineCode",{parentName:"p"},"State Proxy")," in ",(0,o.kt)("a",{parentName:"p",href:"https://immerjs.github.io/immer/pitfalls"},"ImmerJS"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Draft")," objects in ",(0,o.kt)("inlineCode",{parentName:"li"},"Immer")," are wrapped in ",(0,o.kt)("inlineCode",{parentName:"li"},"Proxy"),",\nso you cannot use ",(0,o.kt)("inlineCode",{parentName:"li"},"==")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"===")," to test equality:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"original")," instead: ",(0,o.kt)("inlineCode",{parentName:"li"},"const index = original(list).indexOf(element)"),"."),(0,o.kt)("li",{parentName:"ul"},"Use unique ",(0,o.kt)("inlineCode",{parentName:"li"},"id")," field instead.")))),(0,o.kt)("h2",{id:"slice"},"Slice"),(0,o.kt)("p",null,"Slice API is standard approach for writing Redux logic.\nInternally, it uses ",(0,o.kt)("inlineCode",{parentName:"p"},"createAction")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"createReducer"),",\nalso use ",(0,o.kt)("inlineCode",{parentName:"p"},"Immer")," to write immutable updates."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import type { PayloadAction } from '@reduxjs/toolkit';\nimport { createSlice } from '@reduxjs/toolkit';\n\ninterface CounterState {\n  value: number;\n}\n\nconst initialState = { value: 0 } as CounterState;\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment(state) {\n      state.value++;\n    },\n    decrement(state) {\n      state.value--;\n    },\n    incrementByAmount(state, action: PayloadAction<number>) {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\nexport default counterSlice.reducer;\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"extraReducers")," allows ",(0,o.kt)("inlineCode",{parentName:"p"},"createSlice")," to respond to\n",(0,o.kt)("strong",{parentName:"p"},"other")," action types besides the types it has generated."),(0,o.kt)("p",null,"If two fields from reducers and extraReducers\nhappen to end up with the ",(0,o.kt)("strong",{parentName:"p"},"same")," action type string,\nthe function from ",(0,o.kt)("strong",{parentName:"p"},"reducers")," will be used to handle that action type."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import type { Action, AnyAction } from '@reduxjs/toolkit';\nimport { createAction, createSlice } from '@reduxjs/toolkit';\n\ninterface RejectedAction extends Action {\n  error: Error;\n}\n\ninterface Item {\n  id: string;\n  text: string;\n}\n\n// Counter actions\nconst incrementBy = createAction<number>('incrementBy');\nconst decrement = createAction('decrement');\n\nfunction isRejectedAction(action: AnyAction): action is RejectedAction {\n  return action.type.endsWith('rejected');\n}\n\nconst todosSlice = createSlice({\n  name: 'todo',\n  initialState: [] as Item[],\n  // Todo reducers\n  reducers: {\n    addTodo: {\n      reducer: (state, action: PayloadAction<Item>) => {\n        state.push(action.payload);\n      },\n      // Action creator prepare callback\n      prepare: (text: string) => {\n        const id = nanoid();\n        return { payload: { id, text } };\n      },\n    },\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(incrementBy, (state, action) => {\n        // action is inferred correctly here if using TS\n      })\n      // You can chain calls, or have separate `builder.addCase()` lines each time\n      .addCase(decrement, (state, action) => {})\n      // You can match a range of action types\n      .addMatcher(\n        isRejectedAction,\n        // `action` will be inferred as a RejectedAction\n        (state, action) => {}\n      )\n      // and provide a default case if no other handlers matched\n      .addDefaultCase((state, action) => {});\n  },\n});\n")),(0,o.kt)("h2",{id:"selector"},"Selector"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Keep the Redux state minimal,\nderive additional values from root state whenever possible.")),(0,o.kt)("p",null,"The actual state is easier to read.\nLess logic is needed to calculate those additional values\nand keep them in sync with rest of data.\nThe original state is still there as a reference and isn't being replaced."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Extract data getting and normalization logic from components.")),(0,o.kt)("p",null,"Making change to data format in reducers,\nthen change reusable selector in ",(0,o.kt)("inlineCode",{parentName:"p"},"slice.ts"),".\nNo need to change ",(0,o.kt)("inlineCode",{parentName:"p"},"Component.tsx")," logic."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Memorize state changes.")),(0,o.kt)("p",null,"Keep ",(0,o.kt)("inlineCode",{parentName:"p"},"useSelector")," away from returns a new array reference:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// \u274c Bad: cause always re-render problem\nfunction App() {\n  const postsForUser = useSelector(state => {\n    const allPosts = selectAllPosts(state);\n    // Returns a new array reference every time.\n    return allPosts.filter(post => post.user === userId);\n  });\n}\n")),(0,o.kt)("h3",{id:"useselector-hook"},"UseSelector Hook"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"useSelector")," automatically subscribes to Redux store,\nany time an action is dispatched,\nit will call its selector function again right away."),(0,o.kt)("p",null,"If value returned by selector changes from last time it ran\n(",(0,o.kt)("strong",{parentName:"p"},"strict ",(0,o.kt)("inlineCode",{parentName:"strong"},"===")," reference comparisons"),"),\n",(0,o.kt)("inlineCode",{parentName:"p"},"useSelector")," will force component to re-render with the new data."),(0,o.kt)("h3",{id:"createselector-api"},"CreateSelector API"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"createSelector")," API\n(",(0,o.kt)("a",{parentName:"p",href:"https://github.com/reduxjs/reselect"},"Reselect")," under the hood):"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Takes one or more ",(0,o.kt)("strong",{parentName:"li"},"Input Selector")," functions,\nplus an ",(0,o.kt)("strong",{parentName:"li"},"Output Selector")," function as arguments."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Output Selector")," will only re-run when outputs of ",(0,o.kt)("inlineCode",{parentName:"li"},"Input Selector")," have changed.\nWith ",(0,o.kt)("inlineCode",{parentName:"li"},"createSelector")," to write memorized selector functions:"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Input Selector")," should usually just extract and return values,\n",(0,o.kt)("inlineCode",{parentName:"li"},"Output Selector")," should do expensive transformation work.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Good\nconst selectAllPosts = state => state.posts.posts;\nconst selectPostById = (state, postId) =>\n  state.posts.posts.find(post => post.id === postId);\n\n// Memorized selector function\nconst selectPostsByUser = createSelector(\n  [selectAllPosts, (state, userId) => userId],\n  // Output selector will only re-run when `posts` or `userId` has changed.\n  (posts, userId) => posts.filter(post => post.user === userId)\n);\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Reselect")," will run input selectors with all of given arguments,\nIf any of input selectors results are ",(0,o.kt)("inlineCode",{parentName:"p"},"===")," different than before,\nit will re-run output selector.\nOtherwise it will skip re-running and just return cached final result from before."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const state1 = getState();\n// Output selector runs, because it's the first call.\nselectPostsByUser(state1, 'user1');\n// Output selector does _not_ run, because the arguments haven't changed.\nselectPostsByUser(state1, 'user1');\n// Output selector runs, because `userId` changed.\nselectPostsByUser(state1, 'user2');\n\ndispatch(reactionAdded());\nconst state2 = getState();\n// Output selector does not run, because `posts` and `userId` are the same.\nselectPostsByUser(state2, 'user2');\n\n// Add some more posts.\ndispatch(addNewPost());\nconst state3 = getState();\n// Output selector runs, because `posts` has changed.\nselectPostsByUser(state3, 'user2');\n")),(0,o.kt)("h3",{id:"selector-best-practice-and-pitfalls"},"Selector Best Practice and Pitfalls"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// \u274c DO NOT memoize: will always return a consistent reference\nconst selectTodos = state => state.todos;\nconst selectNestedValue = state => state.some.deeply.nested.field;\nconst selectTodoById = (state, todoId) => state.todos[todoId];\n\n// \u274c DO NOT memoize: deriving data, but will return a consistent result\nconst selectItemsTotal = state => {\n  return state.items.reduce((result, item) => {\n    return result + item.total;\n  }, 0);\n};\nconst selectAllCompleted = state => state.todos.every(todo => todo.completed);\n\n// \u2705 SHOULD memoize: returns new references when called\nconst selectTodoDescriptions = state => state.todos.map(todo => todo.text);\n")),(0,o.kt)("h2",{id:"thunk"},"Thunk"),(0,o.kt)("p",null,"Redux Toolkit ",(0,o.kt)("inlineCode",{parentName:"p"},"configureStore")," function automatically\nsets up the thunk middleware by default,\nrecommend using thunks as the standard approach for writing async logic with Redux."),(0,o.kt)("h3",{id:"thunk-middleware-implementation"},"Thunk Middleware Implementation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function createThunkMiddleware(extraArgument) {\n  return ({ dispatch, getState }) =>\n    next =>\n    action => {\n      if (typeof action === 'function') {\n        return action(dispatch, getState, extraArgument);\n      }\n\n      return next(action);\n    };\n}\n\nconst thunk = createThunkMiddleware();\nthunk.withExtraArgument = createThunkMiddleware;\n\nexport default thunk;\n")),(0,o.kt)("h3",{id:"create-async-thunk-api"},"Create Async Thunk API"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"createAsyncThunk")," API provides:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Less boilerplate code for ",(0,o.kt)("inlineCode",{parentName:"li"},"state.status")," (",(0,o.kt)("inlineCode",{parentName:"li"},"idle | loading | error"),") manipulation."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Typed")," async thunk function.")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"AppThunk")," type definition:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import type { Action, ThunkAction } from '@reduxjs/toolkit';\n\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Typed")," async thunk function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface SerializedError {\n  name?: string;\n  message?: string;\n  code?: string;\n  stack?: string;\n}\n\ninterface PendingAction<ThunkArg> {\n  type: string;\n  payload: undefined;\n  meta: {\n    requestId: string;\n    arg: ThunkArg;\n  };\n}\n\ninterface FulfilledAction<ThunkArg, PromiseResult> {\n  type: string;\n  payload: PromiseResult;\n  meta: {\n    requestId: string;\n    arg: ThunkArg;\n  };\n}\n\ninterface RejectedAction<ThunkArg> {\n  type: string;\n  payload: undefined;\n  error: SerializedError | any;\n  meta: {\n    requestId: string;\n    arg: ThunkArg;\n    aborted: boolean;\n    condition: boolean;\n  };\n}\n\ninterface RejectedWithValueAction<ThunkArg, RejectedValue> {\n  type: string;\n  payload: RejectedValue;\n  error: { message: 'Rejected' };\n  meta: {\n    requestId: string;\n    arg: ThunkArg;\n    aborted: boolean;\n  };\n}\n\ntype Pending = <ThunkArg>(\n  requestId: string,\n  arg: ThunkArg\n) => PendingAction<ThunkArg>;\n\ntype Fulfilled = <ThunkArg, PromiseResult>(\n  payload: PromiseResult,\n  requestId: string,\n  arg: ThunkArg\n) => FulfilledAction<ThunkArg, PromiseResult>;\n\ntype Rejected = <ThunkArg>(\n  requestId: string,\n  arg: ThunkArg\n) => RejectedAction<ThunkArg>;\n\ntype RejectedWithValue = <ThunkArg, RejectedValue>(\n  requestId: string,\n  arg: ThunkArg\n) => RejectedWithValueAction<ThunkArg, RejectedValue>;\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createAsyncThunk } from '@reduxjs/toolkit';\n\nconst fetchUserById = createAsyncThunk<\n  // Return type of the payload creator\n  ReturnType,\n  // First argument to the payload creator\n  number,\n  {\n    // Optional fields for defining thunkApi field types\n    dispatch: AppDispatch;\n    state: State;\n    extra: {\n      jwt: string;\n    };\n  }\n>('users/fetchById', async (userId, thunkApi) => {\n  const response = await fetch(`https://reqres.in/api/users/${userId}`, {\n    headers: {\n      Authorization: `Bearer ${thunkApi.extra.jwt}`,\n    },\n  });\n\n  return (await response.json()) as ReturnType;\n});\n")),(0,o.kt)("p",null,"State status manipulation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from './userAPI';\n\n// First, create the thunk.\nconst fetchUserById = createAsyncThunk(\n  'users/fetchByIdStatus',\n  async (userId, thunkAPI) => {\n    const response = await userAPI.fetchById(userId);\n    return response.data;\n  }\n);\n\n// Then, handle actions in your reducers:\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: { entities: [], loading: 'idle' },\n  reducers: {\n    // Standard reducer logic, with auto-generated action types per reducer.\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types and handle loading state as needed.\n    builder.addCase(fetchUserById.fulfilled, (state, action) => {\n      // Add user to the state array.\n      state.entities.push(action.payload);\n    });\n  },\n});\n\n// Later, dispatch the thunk as needed in the app.\ndispatch(fetchUserById(123));\n")),(0,o.kt)("h2",{id:"middleware"},"Middleware"),(0,o.kt)("p",null,"Redux middleware were designed to enable writing side effects logic:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"I/O: logging, saving files."),(0,o.kt)("li",{parentName:"ul"},"AJAX HTTP request."),(0,o.kt)("li",{parentName:"ul"},"Async timer."),(0,o.kt)("li",{parentName:"ul"},"Modifying state outside of ",(0,o.kt)("inlineCode",{parentName:"li"},"reducer")," function."),(0,o.kt)("li",{parentName:"ul"},"Mutating arguments to ",(0,o.kt)("inlineCode",{parentName:"li"},"dispatch")," function."),(0,o.kt)("li",{parentName:"ul"},"Generating random numbers or unique random IDs\n(e.g ",(0,o.kt)("inlineCode",{parentName:"li"},"uuid()"),"/",(0,o.kt)("inlineCode",{parentName:"li"},"Math.random()"),"/",(0,o.kt)("inlineCode",{parentName:"li"},"Date.now()"),").")),(0,o.kt)("h3",{id:"middleware-basic-concepts"},"Middleware Basic Concepts"),(0,o.kt)("p",null,"\u6bcf\u4e00\u4e2a Middleware \u53ef\u4ee5\u901a\u8fc7\u4e0a\u4e0b\u6587\u83b7\u53d6:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"original ",(0,o.kt)("inlineCode",{parentName:"li"},"store"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"original ",(0,o.kt)("inlineCode",{parentName:"li"},"store.dispatch"),"."),(0,o.kt)("li",{parentName:"ul"},"get state by ",(0,o.kt)("inlineCode",{parentName:"li"},"store.getState"),"."),(0,o.kt)("li",{parentName:"ul"},"\u901a\u8fc7 ",(0,o.kt)("inlineCode",{parentName:"li"},"dispatch")," \u5bf9\u8c61\u76f4\u63a5\u53d1\u5e03 ",(0,o.kt)("inlineCode",{parentName:"li"},"action")," \u5bf9\u8c61."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"next")," \u65b9\u6cd5: \u524d\u4e00\u4e2a Middleware \u8fd4\u56de\u7684 ",(0,o.kt)("inlineCode",{parentName:"li"},"dispatch")," \u65b9\u6cd5.\n\u5f53\u524d Middleware \u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u5bf9 action \u7684\u5224\u65ad\u548c\u5904\u7406\u7ed3\u679c,\n\u51b3\u5b9a\u662f\u5426\u8c03\u7528 ",(0,o.kt)("inlineCode",{parentName:"li"},"next")," \u65b9\u6cd5 (\u662f\u5426\u8df3\u8fc7\u5176\u4ed6 Middleware \u7684 ",(0,o.kt)("inlineCode",{parentName:"li"},"dispatch"),"),\n\u4ee5\u53ca\u4f20\u5165\u4ec0\u4e48\u6837\u7684\u53c2\u6570.")),(0,o.kt)("p",null,"\u4ece\u800c\u5b9e\u73b0\u5982\u4e0b\u529f\u80fd:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Execute extra logic when any action is dispatched."),(0,o.kt)("li",{parentName:"ul"},"Pause, modify, delay, replace, or halt dispatched actions."),(0,o.kt)("li",{parentName:"ul"},"Write extra code that has access to ",(0,o.kt)("inlineCode",{parentName:"li"},"dispatch")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"getState"),"."),(0,o.kt)("li",{parentName:"ul"},"Teach ",(0,o.kt)("inlineCode",{parentName:"li"},"dispatch")," how to accept other values besides plain action objects,\nsuch as ",(0,o.kt)("strong",{parentName:"li"},"functions")," (",(0,o.kt)("inlineCode",{parentName:"li"},"action(dispatch, getState, extraArgument)"),") and promises,\nby intercepting them and dispatching real action objects instead.")),(0,o.kt)("h3",{id:"middleware-simple-implementation"},"Middleware Simple Implementation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Raw Middleware: ",(0,o.kt)("inlineCode",{parentName:"li"},"store => next => action => T"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"middleware(store)"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"next => action => T"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"middleware(store)(next)"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"action => T"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"next"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"action => T"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"dispatch"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"action => T"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"middleware(store)(next)"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"next")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"dispatch")," have same function signature:\n",(0,o.kt)("inlineCode",{parentName:"li"},"type Dispatch = (action: Action | AsyncAction) => any"),"."),(0,o.kt)("li",{parentName:"ul"},"After ",(0,o.kt)("inlineCode",{parentName:"li"},"middlewares.forEach"),", set ",(0,o.kt)("inlineCode",{parentName:"li"},"next")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"store.dispatch"),",\nmake new ",(0,o.kt)("inlineCode",{parentName:"li"},"dispatch")," get all functions from ",(0,o.kt)("inlineCode",{parentName:"li"},"middlewares"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function applyMiddleware(store, middlewares) {\n  middlewares = middlewares.slice();\n  middlewares.reverse();\n\n  let next = store.dispatch;\n  // Reduce middlewares with reverse order in Redux.\n  middlewares.forEach(middleware => (next = middleware(store)(next)));\n\n  // When user app execute `dispatch` function,\n  // middlewares execute with forward order.\n  return Object.assign({}, store, { dispatch: next });\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { applyMiddleware, combineReducers, createStore } from 'redux';\n\n// applyMiddleware takes createStore() and returns\n// a function with a compatible API.\nconst createStoreWithMiddleware = applyMiddleware(\n  logger,\n  crashReporter\n)(createStore);\n\n// Use it like you would use createStore()let todoApp = combineReducers(reducers);\nconst store = createStoreWithMiddleware(todoApp);\n")),(0,o.kt)("h3",{id:"scheduler-middleware"},"Scheduler Middleware"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * Schedules actions with { meta: { delay: N } } to be delayed by N milliseconds.\n * Makes `dispatch` return a function to cancel the interval in this case.\n */\nconst timeoutScheduler = store => next => action => {\n  if (!action.meta || !action.meta.delay) {\n    return next(action);\n  }\n\n  const intervalId = setTimeout(() => next(action), action.meta.delay);\n\n  return function cancel() {\n    clearInterval(intervalId);\n  };\n};\n")),(0,o.kt)("h3",{id:"thunk-middleware"},"Thunk Middleware"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// thunk middleware\nconst thunk = store => next => action =>\n  typeof action === 'function'\n    ? action(store.dispatch, store.getState)\n    : next(action);\n\nconst createStoreWithMiddleware = applyMiddleware(\n  logger,\n  thunk,\n  timeoutScheduler\n)(createStore);\nconst store = createStoreWithMiddleware(combineReducers(reducers));\n\nfunction addFave(tweetId) {\n  return (dispatch, getState) => {\n    if (getState.tweets[tweetId] && getState.tweets[tweetId].liked) {\n      return;\n    }\n\n    dispatch({ type: IS_LOADING });\n    // Yay, that could be sync or async dispatching\n    remote.addFave(tweetId).then(\n      res => {\n        dispatch({ type: ADD_FAVE_SUCCEED });\n      },\n      err => {\n        dispatch({ type: ADD_FAVE_FAILED, err });\n      }\n    );\n  };\n}\n\nstore.dispatch(addFave());\n")),(0,o.kt)("h3",{id:"typed-middleware"},"Typed Middleware"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export interface Middleware<\n  DispatchExt = {}, // optional override return behavior of `dispatch`\n  S = any, // type of the Redux store state\n  D extends Dispatch = Dispatch // type of the dispatch method\n> {\n  ext: DispatchExt;\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import type { Middleware } from 'redux';\nimport type { RootState } from '../store';\n\nexport const exampleMiddleware: Middleware<\n  {}, // Most middleware do not modify the dispatch return value\n  RootState\n> = store => next => action => {\n  const state = store.getState(); // correctly typed as RootState\n};\n")),(0,o.kt)("h2",{id:"rtk-query"},"RTK Query"),(0,o.kt)("h3",{id:"server-state-management"},"Server State Management"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Tracking loading state in order to show UI spinners."),(0,o.kt)("li",{parentName:"ul"},"Avoiding duplicate requests for the same data."),(0,o.kt)("li",{parentName:"ul"},"Optimistic updates to make the UI feel faster",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Requires asynchronous APIs for fetching and updating."),(0,o.kt)("li",{parentName:"ul"},"Updating ",(0,o.kt)("inlineCode",{parentName:"li"},"out of date")," data in the background."))),(0,o.kt)("li",{parentName:"ul"},"Managing cache lifetimes as the user interacts with the UI."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://redux-toolkit.js.org/rtk-query/overview"},"RTK Query"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/tannerlinsley/react-query"},"React Query"),".")),(0,o.kt)("h3",{id:"basic-rtk-query-usage"},"Basic RTK Query Usage"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Query hooks."),(0,o.kt)("li",{parentName:"ul"},"Mutation hooks."),(0,o.kt)("li",{parentName:"ul"},"Refetch function."),(0,o.kt)("li",{parentName:"ul"},"Cache tags.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Import the RTK Query methods from the React-specific entry point.\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\n// Define our single API slice object.\nexport const apiSlice = createApi({\n  // The cache reducer expects to be added at `state.api`.\n  reducerPath: 'api',\n  // All of our requests will have URLs starting with '/fakeApi'.\n  baseQuery: fetchBaseQuery({ baseUrl: '/fakeApi' }),\n  tagTypes: ['Post'],\n  // The \"endpoints\" represent operations and requests for this server.\n  endpoints: builder => ({\n    getPost: builder.query({\n      query: postId => `/posts/${postId}`,\n    }),\n    // The `getPosts` endpoint is a \"query\" operation that returns data.\n    getPosts: builder.query({\n      // The URL for the request is '/fakeApi/posts'.\n      query: () => '/posts',\n      providesTags: ['Post'],\n    }),\n    addNewPost: builder.mutation({\n      query: initialPost => ({\n        url: '/posts',\n        method: 'POST',\n        // Include the entire post object as the body of the request\n        body: initialPost,\n      }),\n      invalidatesTags: ['Post'],\n    }),\n  }),\n});\n\n// Export the auto-generated hook for the `getPost` query endpoint\nexport const { useGetPostQuery, useGetPostsQuery, useAddNewPostMutation } =\n  apiSlice;\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { apiSlice } from '../features/api/apiSlice';\n\nexport default configureStore({\n  reducer: {\n    // ... Other reducers.\n    [apiSlice.reducerPath]: apiSlice.reducer,\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware().concat(apiSlice.middleware),\n});\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport { useGetPostsQuery } from '../api';\nimport { PostExcerpt, Spinner } from '../components';\n\nexport const PostsList = () => {\n  const {\n    data: posts = [],\n    isLoading,\n    isSuccess,\n    isError,\n    error,\n    refetch,\n  } = useGetPostsQuery();\n\n  const sortedPosts = useMemo(\n    () => posts.slice().sort((a, b) => b.date.localeCompare(a.date)),\n    [posts]\n  );\n\n  let content;\n\n  if (isLoading) {\n    content = <Spinner text=\"Loading...\" />;\n  } else if (isSuccess) {\n    content = sortedPosts.map(post => (\n      <PostExcerpt key={post.id} post={post} />\n    ));\n  } else if (isError) {\n    content = <div>{error.toString()}</div>;\n  }\n\n  return (\n    <section className=\"posts-list\">\n      <h2>Posts</h2>\n      <button onClick={refetch}>Refetch Posts</button>\n      {content}\n    </section>\n  );\n};\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { useState } from 'react';\nimport { useAddNewPostMutation } from '../api';\n\nexport const AddPostForm = () => {\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [userId, setUserId] = useState('');\n\n  const [addNewPost, { isLoading }] = useAddNewPostMutation();\n\n  const canSave = [title, content, userId].every(Boolean) && !isLoading;\n\n  const onSavePostClicked = async () => {\n    if (canSave) {\n      try {\n        await addNewPost({ title, content, user: userId }).unwrap();\n        setTitle('');\n        setContent('');\n        setUserId('');\n      } catch (err) {\n        console.error('Failed to save the post: ', err);\n      }\n    }\n  };\n};\n")),(0,o.kt)("h3",{id:"rtk-query-cache-mechanism"},"RTK Query Cache Mechanism"),(0,o.kt)("p",null,"RTK Query creates a ",(0,o.kt)("strong",{parentName:"p"},"cache key")," for each ",(0,o.kt)("inlineCode",{parentName:"p"},"unique endpoint")," + ",(0,o.kt)("inlineCode",{parentName:"p"},"argument")," combination,\nand stores the results for each cache key separately."),(0,o.kt)("p",null,"Use the same query hook multiple times,\npass it different query parameters,\nand each result will be cached separately in Redux ",(0,o.kt)("inlineCode",{parentName:"p"},"store"),"."),(0,o.kt)("p",null,"It iss important to note that the query parameter must be a ",(0,o.kt)("strong",{parentName:"p"},"single value"),"\n(a primitive value or an object containing multiple fields, same as with ",(0,o.kt)("inlineCode",{parentName:"p"},"createAsyncThunk"),").\nRTK Query will do ",(0,o.kt)("strong",{parentName:"p"},"shallow stable")," comparison of fields,\nand re-fetch the data if any of them have changed."),(0,o.kt)("p",null,"By default, ",(0,o.kt)("strong",{parentName:"p"},"unused data is removed from the cache after 60 seconds"),",\ncan be configured in root API slice definition\nor overridden in individual endpoint definitions using ",(0,o.kt)("inlineCode",{parentName:"p"},"keepUnusedDataFor")," flag."),(0,o.kt)("p",null,"RTK query ",(0,o.kt)("a",{parentName:"p",href:"https://redux-toolkit.js.org/rtk-query/api/created-api/cache-management-utils"},"cache utils"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({ baseUrl: '/fakeApi' }),\n  tagTypes: ['Post'],\n  endpoints: builder => ({\n    getPosts: builder.query({\n      query: () => '/posts',\n      providesTags: (result = [], error, arg) => [\n        'Post',\n        ...result.map(({ id }) => ({ type: 'Post', id })),\n      ],\n    }),\n    getPost: builder.query({\n      query: postId => `/posts/${postId}`,\n      providesTags: (result, error, arg) => [{ type: 'Post', id: arg }],\n    }),\n    addNewPost: builder.mutation({\n      query: initialPost => ({\n        url: '/posts',\n        method: 'POST',\n        body: initialPost,\n      }),\n      invalidatesTags: ['Post'],\n    }),\n    editPost: builder.mutation({\n      query: post => ({\n        url: `posts/${post.id}`,\n        method: 'PATCH',\n        body: post,\n      }),\n      invalidatesTags: (result, error, arg) => [{ type: 'Post', id: arg.id }],\n    }),\n  }),\n});\n")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"PATCH /posts/:postId")," from the editPost mutation."),(0,o.kt)("li",{parentName:"ol"},"A ",(0,o.kt)("inlineCode",{parentName:"li"},"GET /posts/:postId")," as the getPost query is refetched."),(0,o.kt)("li",{parentName:"ol"},"A ",(0,o.kt)("inlineCode",{parentName:"li"},"GET /posts")," as the getPosts query is refetched.")),(0,o.kt)("h3",{id:"rtk-query-selector"},"RTK Query Selector"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  createEntityAdapter,\n  createSelector,\n  createSlice,\n} from '@reduxjs/toolkit';\nimport { apiSlice } from '../api/apiSlice';\n\nconst emptyUsers = [];\n\nexport const selectUsersResult = apiSlice.endpoints.getUsers.select();\n\nexport const selectAllUsers = createSelector(\n  selectUsersResult,\n  usersResult => usersResult?.data ?? emptyUsers\n);\n\nexport const selectUserById = createSelector(\n  selectAllUsers,\n  (state, userId) => userId,\n  (users, userId) => users.find(user => user.id === userId)\n);\n")),(0,o.kt)("h3",{id:"splitting-query-endpoints"},"Splitting Query Endpoints"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://redux-toolkit.js.org/rtk-query/usage/code-splitting"},"RTK query code splitting"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"injectEndpoints()"),":\nmutates original API slice object\nto add additional endpoint definitions\nand then returns it."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"enhanceEndpoints()"),":\nmerged together on a per-definition basis."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"apiSlice")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"extendedApiSlice")," are the same object.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { apiSlice } from '../api/apiSlice';\n\nexport const extendedApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getUsers: builder.query({\n      query: () => '/users',\n    }),\n  }),\n});\n\nexport const { useGetUsersQuery } = extendedApiSlice;\n\nexport const selectUsersResult = extendedApiSlice.endpoints.getUsers.select();\n")),(0,o.kt)("h3",{id:"transform-query-response"},"Transform Query Response"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { apiSlice } from '../api/apiSlice';\n\nconst usersAdapter = createEntityAdapter();\n\nconst initialState = usersAdapter.getInitialState();\n\nexport const extendedApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getUsers: builder.query({\n      query: () => '/users',\n      transformResponse: responseData => {\n        return usersAdapter.setAll(initialState, responseData);\n      },\n    }),\n  }),\n});\n\nexport const { useGetUsersQuery } = extendedApiSlice;\n\nconst selectUsersResult = extendedApiSlice.endpoints.getUsers.select();\n\nconst selectUsersData = createSelector(\n  selectUsersResult,\n  usersResult => usersResult.data\n);\n\nexport const { selectAll: selectAllUsers, selectById: selectUserById } =\n  usersAdapter.getSelectors(state => selectUsersData(state) ?? initialState);\n")),(0,o.kt)("h3",{id:"rtk-query-reference"},"RTK Query Reference"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"RTK Query real world ",(0,o.kt)("a",{parentName:"li",href:"https://www.toptal.com/react/redux-toolkit-and-rtk-query"},"example"),".")),(0,o.kt)("h2",{id:"react-redux-binding-library"},"React Redux Binding Library"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"useSelector"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"useDispatch"),":\ndispatch function reference will be stable\nas long as same store instance is being passed to the ",(0,o.kt)("inlineCode",{parentName:"li"},"<Provider>"),".")),(0,o.kt)("h3",{id:"typed-react-redux-hooks"},"Typed React Redux Hooks"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import type { TypedUseSelectorHook } from 'react-redux';\nimport { useDispatch, useSelector } from 'react-redux';\nimport type store from './store';\n\ntype AppDispatch = typeof store.dispatch;\ntype RootState = ReturnType<typeof store.getState>;\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n")),(0,o.kt)("h3",{id:"custom-react-redux-hooks"},"Custom React Redux Hooks"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { shallowEqual, useSelector } from 'react-redux';\n\nexport default function useShallowEqualSelector(selector) {\n  return useSelector(selector, shallowEqual);\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { bindActionCreators } from 'redux';\nimport { useDispatch } from 'react-redux';\nimport { useMemo } from 'react';\n\nexport default function useActions(actions) {\n  const dispatch = useDispatch();\n\n  return useMemo(() => {\n    if (Array.isArray(actions)) {\n      return actions.map(a => bindActionCreators(a, dispatch));\n    }\n    return bindActionCreators(actions, dispatch);\n  }, [actions, dispatch]);\n}\n")),(0,o.kt)("h3",{id:"react-redux-api-reference"},"React Redux API Reference"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://react-redux.js.org/api/batch"},(0,o.kt)("inlineCode",{parentName:"a"},"batch")),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { batch } from 'react-redux';\n\nfunction myThunk() {\n  return (dispatch, getState) => {\n    // Only result in one combined re-render, not two.\n    batch(() => {\n      dispatch(increment());\n      dispatch(increment());\n    });\n  };\n}\n")),(0,o.kt)("h2",{id:"redux-server-side-rendering"},"Redux Server Side Rendering"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Client side:\na new Redux store will be created with state provided from server."),(0,o.kt)("li",{parentName:"ul"},"Server side:\nprovide the initial state of app.")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"client.jsx"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport { hydrate } from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './containers/App';\nimport counterApp from './reducers';\n\nconst preloadedState = window.__PRELOADED_STATE__;\n\ndelete window.__PRELOADED_STATE__;\n\nconst store = createStore(counterApp, preloadedState);\n\nhydrate(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"server.js"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import path from 'path';\nimport Express from 'express';\nimport qs from 'qs';\nimport React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport counterApp from './reducers';\nimport App from './containers/App';\n\nconst app = Express();\nconst port = 3000;\n\napp.use('/static', Express.static('static'));\n\napp.use(handleRender);\n\nfunction handleRender(req, res) {\n  // `parseInt` to prevent XSS attack\n  const params = qs.parse(req.query);\n  const counter = parseInt(params.counter, 10) || 0;\n\n  const preloadedState = { counter };\n  const store = createStore(counterApp, preloadedState);\n\n  const html = renderToString(\n    <Provider store={store}>\n      <App />\n    </Provider>\n  );\n\n  const finalState = store.getState();\n  res.send(renderFullPage(html, finalState));\n}\n\nfunction renderFullPage(html, preloadedState) {\n  // https://redux.js.org/usage/server-rendering#security-considerations\n  // `replace(/</g, '\\\\u003c')` to prevent XSS attack\n  return `\n    <!doctype html>\n    <html>\n      <head>\n        <title>Redux Universal Example</title>\n      </head>\n      <body>\n        <div id=\"root\">${html}</div>\n        <script>\n          // WARNING: security issues around embedding JSON in HTML:\n          // https://redux.js.org/usage/server-rendering#security-considerations\n          window.__PRELOADED_STATE__ = ${JSON.stringify(preloadedState).replace(\n            /</g,\n            '\\\\u003c'\n          )}\n        <\/script>\n        <script src=\"/static/bundle.js\"><\/script>\n      </body>\n    </html>\n    `;\n}\n\napp.listen(port);\n")),(0,o.kt)("h2",{id:"redux-internal"},"Redux Internal"),(0,o.kt)("h3",{id:"store-constructor-implementation"},"Store Constructor Implementation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Use closure to store state and subscribe."),(0,o.kt)("li",{parentName:"ul"},"Use middleware to change normal dispatch function.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const applyMiddleware =\n  (...middlewares) =>\n  store => {\n    // should return (next) => (action) => { ... } function\n    if (middlewares.length === 0) {\n      return dispatch => dispatch;\n    }\n\n    if (middlewares.length === 1) {\n      return middlewares[0];\n    }\n\n    // [ (next) => (action) => {...}, ... ] array\n    // next: (action) => { ... } function\n    const boundMiddlewares = middlewares.map(middleware => middleware(store));\n\n    return boundMiddlewares.reduce((a, b) => next => a(b(next)));\n  };\n\nconst createStore = (reducer, middleware) => {\n  // closure for storing global state\n  let state;\n  const subscribers = [];\n  const coreDispatch = action => {\n    validateAction(action);\n    state = reducer(state, action);\n    subscribers.forEach(handler => handler());\n  };\n  const getState = () => state;\n\n  const store = {\n    dispatch: coreDispatch,\n    getState,\n    subscribe: handler => {\n      subscribers.push(handler);\n\n      // unsubscribe function\n      return () => {\n        const index = subscribers.indexOf(handler);\n\n        if (index > 0) {\n          subscribers.splice(index, 1);\n        }\n      };\n    },\n  };\n\n  if (middleware) {\n    // store default dispatch\n    const dispatch = action => store.dispatch(action);\n\n    // middleware = ({ dispatch, getState }) => (next) => (action) => { ... };\n    // middleware is a higher-order function (return (action) => { ... });\n    // dispatch, getState and coreDispatch are injected into middleware as arguments\n    store.dispatch = middleware({\n      dispatch,\n      getState,\n    })(coreDispatch);\n  }\n\n  coreDispatch({\n    type: INIT_REDUX,\n  });\n  return store;\n};\n")),(0,o.kt)("h3",{id:"action-validation"},"Action Validation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const isValidKey = key => {\n  return ['type', 'payload', 'error', 'meta'].includes(key);\n};\n\nconst validateAction = action => {\n  if (!action || typeof action !== 'object' || Array.isArray(action)) {\n    throw new Error('Action must be an object!');\n  }\n\n  if (typeof action.type === 'undefined') {\n    throw new TypeError('Action must have a type!');\n  }\n\n  if (!Object.keys(action).every(isValidKey)) {\n    throw new Error(\n      'Action only have `type`, `payload`, `error` or `meta` field!'\n    );\n  }\n};\n")),(0,o.kt)("h3",{id:"provider-and-connection"},"Provider and Connection"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"use Context to provide store (two methods):",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"inject store into every children recursively"),(0,o.kt)("li",{parentName:"ul"},"use Consumer in Connect higher order component\n",(0,o.kt)("inlineCode",{parentName:"li"},"<Consumer>{store => (<WrapperComponent store={store}>)}</Consumer>"))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"export const Provider = ({ store, children }) => {\n  const StoreContext = React.createContext(store);\n\n  return (\n    <StoreContext.Provider value={store}>\n      <StoreContext.Consumer>\n        {store => {\n          const childrenWithStore = React.Children.map(children, child =>\n            React.cloneElement(child, { store })\n          );\n\n          return <div>{childrenWithStore}</div>;\n        }}\n      </StoreContext.Consumer>\n    </StoreContext.Provider>\n  );\n};\n\nexport const connect =\n  (mapStateToProps = () => ({}), mapDispatchToProps = () => ({})) =>\n  Component => {\n    class Connected extends React.Component {\n      onStoreOrPropsChange(props) {\n        const { store } = this.props;\n        const state = store.getState();\n        const stateProps = mapStateToProps(state, props);\n        const dispatchProps = mapDispatchToProps(store.dispatch, props);\n        this.setState({\n          ...stateProps,\n          ...dispatchProps,\n        });\n      }\n\n      componentWillMount() {\n        const { store } = this.props;\n        this.onStoreOrPropsChange(this.props);\n        this.unsubscribe = store.subscribe(() =>\n          this.onStoreOrPropsChange(this.props)\n        );\n      }\n\n      componentWillReceiveProps(nextProps) {\n        this.onStoreOrPropsChange(nextProps);\n      }\n\n      componentWillUnmount() {\n        this.unsubscribe();\n      }\n\n      render() {\n        return <Component {...this.props} {...this.state} />;\n      }\n    }\n\n    return Connected;\n  };\n")),(0,o.kt)("h2",{id:"redux-performance"},"Redux Performance"),(0,o.kt)("h3",{id:"redux-code-splitting"},"Redux Code Splitting"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://redux.js.org/usage/code-splitting"},"Redux Code Splitting Guide"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/microsoft/redux-dynamic-modules"},"Redux Dynamic Modules"),":\nModularize Redux by dynamically loading reducers and middlewares\n(contribute to ",(0,o.kt)("strong",{parentName:"li"},"code splitting"),").")),(0,o.kt)("h3",{id:"redux-performance-pitfalls"},"Redux Performance Pitfalls"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"All ",(0,o.kt)("inlineCode",{parentName:"li"},"reducers")," are called to produce the ",(0,o.kt)("inlineCode",{parentName:"li"},"next")," store state."),(0,o.kt)("li",{parentName:"ul"},"All ",(0,o.kt)("inlineCode",{parentName:"li"},"mapStateToProps"),"/",(0,o.kt)("inlineCode",{parentName:"li"},"useSelectors")," of mounted components are called."),(0,o.kt)("li",{parentName:"ul"},"As every ",(0,o.kt)("inlineCode",{parentName:"li"},"mapStateToProps"),"/",(0,o.kt)("inlineCode",{parentName:"li"},"useSelector"),"\nthat returned a different reference\nfrom the previous render,\nthe associated components are rendered\n(",(0,o.kt)("strong",{parentName:"li"},"re-rendering")," problem).")),(0,o.kt)("h3",{id:"redux-performance-best-practice"},"Redux Performance Best Practice"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Normal React performance tips: ",(0,o.kt)("inlineCode",{parentName:"li"},"React.memo"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"useMemo"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"useCallback")," etc."),(0,o.kt)("li",{parentName:"ul"},"Normalize large array state via ",(0,o.kt)("inlineCode",{parentName:"li"},"createEntityAdapter")," API:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"Ids")," array as minimal core data (other than whole ",(0,o.kt)("inlineCode",{parentName:"li"},"Data[]"),")."),(0,o.kt)("li",{parentName:"ul"},"Fast element lookup in normalized state (other than slow ",(0,o.kt)("inlineCode",{parentName:"li"},"Array.find()"),")."))),(0,o.kt)("li",{parentName:"ul"},"Create memorized selectors via ",(0,o.kt)("inlineCode",{parentName:"li"},"createSelector")," API.")),(0,o.kt)("h2",{id:"redux-best-practice"},"Redux Best Practice"),(0,o.kt)("h3",{id:"redux-necessity"},"Redux Necessity"),(0,o.kt)("p",null,"Necessity for importing Redux\n(\u72b6\u6001\u591a, \u53d8\u5316\u5feb, \u66f4\u65b0\u590d\u6742):"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Lots of state."),(0,o.kt)("li",{parentName:"ul"},"Frequent update state."),(0,o.kt)("li",{parentName:"ul"},"Complex update state.")),(0,o.kt)("h3",{id:"redux-style-guide"},"Redux Style Guide"),(0,o.kt)("p",null,"Redux style ",(0,o.kt)("a",{parentName:"p",href:"https://redux.js.org/style-guide/style-guide"},"guide"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Only one store per app."),(0,o.kt)("li",{parentName:"ul"},"Avoid mutate state without ImmerJS."),(0,o.kt)("li",{parentName:"ul"},"Avoid side effects in reducers."),(0,o.kt)("li",{parentName:"ul"},"Avoid non-serializable values in state store."),(0,o.kt)("li",{parentName:"ul"},"Normalize complex nested/relational state."),(0,o.kt)("li",{parentName:"ul"},"Keep state minimal and derive additional values."),(0,o.kt)("li",{parentName:"ul"},"Split large data selection into multiple small ",(0,o.kt)("inlineCode",{parentName:"li"},"useSelector"),".")),(0,o.kt)("h3",{id:"redux-tips"},"Redux Tips"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u533a\u5206 Smart Component (know the state) \u548c Dump Component (stateless)"),(0,o.kt)("li",{parentName:"ul"},"Component \u91cc\u4e0d\u8981\u51fa\u73b0\u4efb\u4f55 async calls\uff0c\u4ea4\u7ed9 action creator \u6765\u505a"),(0,o.kt)("li",{parentName:"ul"},"Reducer \u5c3d\u91cf\u7b80\u5355\uff0c\u590d\u6742\u7684\u4ea4\u7ed9 action creator"),(0,o.kt)("li",{parentName:"ul"},"Reducer \u91cc return \u65b0 state \u7684\u65f6\u5019\uff1a"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/gaearon/redux-devtools"},"Redux Devtools")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/iraycd/React-Redux-Styleguide"},"Redux React Style Guide")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/rematch/rematch"},"Simple Redux API"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// add new item to state array\n// bad and does not work case "ADD":\nstate.push(newItem);\n// Good case "ADD":\nreturn [...state, newItem];\n\n// delete new item to state array\n// bad and does not work case "DELETE":\nstate.splice(index, 1);\n// Good case "DELETE":\nstate.slice(0, index).concat(state.slice(index + 1));\n\n// update new item to state array\n// First way case "EDIT":\nstate\n  .slice(0, index)\n  .concat([{ id: \'id\', value: \'newValue\' }])\n  .slice(index + 1);\n// Second way case "EDIT":\nstate.map(item => {\n  if (item.id === \'id\') {\n    return {\n      ...item,\n      value: \'newValue\',\n    };\n  } else {\n    return item;\n  }\n});\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Action creator: \u7528 promise/async/await \u4ee5\u53ca redux-thunk \u5b9e\u73b0\u5f02\u6b65\u64cd\u4f5c.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// bad\nconst loadTodo = id => async (dispatch, getState) => {\n  // only fetch the todo if it isn't already loaded\n  if (!getState().todos.includes(id)) {\n    const todo = await fetch(`/todos/${id}`);\n    dispatch(addTodo(todo));\n  }\n};\n\n// good\nconst loadTodo = (id, todos) => async dispatch => {\n  // only fetch the todo if it isn't already loaded\n  if (!todos.includes(id)) {\n    const todo = await fetch(`/todos/${id}`);\n    dispatch(addTodo(todo));\n  }\n};\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const fluxStandardAction = {\n  type: 'ADD_TODO',\n  payload: {\n    text: 'Do something',\n  },\n  meta,\n};\n\nconst fluxStandardAction = {\n  type: 'ADD_TODO',\n  payload: new Error('Error'),\n  error: true,\n};\n")),(0,o.kt)("h3",{id:"state-management"},"State Management"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Redux for global state:\n\u4f5c\u4e3a\u5168\u5c40\u72b6\u6001\u7ba1\u7406."),(0,o.kt)("li",{parentName:"ul"},"RxJS for redux middleware:\nRxJS \u7ba1\u7406\u6240\u6709\u8f93\u5165\u7684 input -> redux action \u7684\u8c03\u5ea6\u8fc7\u7a0b."),(0,o.kt)("li",{parentName:"ul"},"Mobx and ",(0,o.kt)("inlineCode",{parentName:"li"},"useState")," for component state:\n\u4f5c\u4e3a\u7ec4\u4ef6\u5c40\u90e8\u72b6\u6001\u7ba1\u7406\u5668\u6765\u7528.\n\u5bf9\u4e8e\u53ea\u5f71\u54cd\u5355\u4e2a\u7ec4\u4ef6\u5b9e\u4f8b\u7684\u72b6\u6001,\n\u5e94\u4f5c\u4e3a Local State \u4ea4\u7531 ",(0,o.kt)("inlineCode",{parentName:"li"},"useState")," \u7ba1\u7406,\n\u800c\u4e0d\u662f\u5c06\u5176\u5e76\u5165 Global Store."),(0,o.kt)("li",{parentName:"ul"},"Complex UI Change: \u7528 component \u5f52\u4e00\u5316\u5904\u7406"),(0,o.kt)("li",{parentName:"ul"},"Complex Data Input: \u7528 RxJS/observable \u5f52\u4e00\u5316\u5904\u7406"),(0,o.kt)("li",{parentName:"ul"},"Complex State Change: \u7528 action/state \u5f52\u4e00\u5316\u5904\u7406"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Jotai"),"/",(0,o.kt)("inlineCode",{parentName:"li"},"Recoil"),":\nSplit state into different atoms.\nAtoms can be imported for any specific component ",(0,o.kt)("strong",{parentName:"li"},"without single-entry point"),".\nEach atom handling different app domain/context (reducer).")),(0,o.kt)("h2",{id:"redux-tools"},"Redux Tools"),(0,o.kt)("h3",{id:"immutable-data-tools"},"Immutable Data Tools"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"ImmerJS."),(0,o.kt)("li",{parentName:"ul"},"Immutable.js: decrease useless copy and memory occupation.")),(0,o.kt)("h3",{id:"middleware-tools"},"Middleware Tools"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/reduxjs/redux-thunk"},"Redux Thunk")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/yelouafi/redux-saga"},"Redux Sage")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/acdlite/redux-promise"},"Redux Promise")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/fcomb/redux-diff-logger"},"Redux Diff Logger")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/microsoft/redux-dynamic-modules"},"Redux Dynamic Modules"),":\nModularize Redux by dynamically loading reducers and middlewares\n(contribute to ",(0,o.kt)("strong",{parentName:"li"},"code splitting"),").")),(0,o.kt)("h3",{id:"state-tools"},"State Tools"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Reselect: memorize state transformation."),(0,o.kt)("li",{parentName:"ul"},"Redux undo.")),(0,o.kt)("h3",{id:"debugging-tools"},"Debugging Tools"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/gaearon/redux-devtools"},"Redux Devtools"))),(0,o.kt)("h2",{id:"redux-reference"},"Redux Reference"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Redux ToolKit quick start ",(0,o.kt)("a",{parentName:"li",href:"https://redux.js.org/tutorials/fundamentals/part-8-modern-redux"},"guide"),".")))}m.isMDXComponent=!0}}]);