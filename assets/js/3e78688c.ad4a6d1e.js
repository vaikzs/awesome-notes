"use strict";(self.webpackChunkawesome_notes=self.webpackChunkawesome_notes||[]).push([[6430],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return c}});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=i.createContext({}),p=function(e){var n=i.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=p(e.components);return i.createElement(m.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,m=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=p(t),c=a,k=d["".concat(m,".").concat(c)]||d[c]||u[c]||l;return t?i.createElement(k,r(r({ref:n},s),{},{components:t})):i.createElement(k,r({ref:n},s))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,r=new Array(l);r[0]=d;var o={};for(var m in n)hasOwnProperty.call(n,m)&&(o[m]=n[m]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var p=2;p<l;p++)r[p]=t[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8174:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return m},default:function(){return c},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var i=t(7462),a=t(3366),l=(t(7294),t(3905)),r=["components"],o={author:"Sabertazimi",authorTitle:"Web Developer",authorURL:"https://github.com/sabertazimi",authorImageURL:"https://github.com/sabertazimi.png",tags:["CS","Algorithm","OJ"]},m="OJ Basic Notes",p={unversionedId:"computerScience/algorithms/ojBasicNotes",id:"computerScience/algorithms/ojBasicNotes",title:"OJ Basic Notes",description:"String Problem",source:"@site/notes/computerScience/algorithms/ojBasicNotes.md",sourceDirName:"computerScience/algorithms",slug:"/computerScience/algorithms/ojBasicNotes",permalink:"/awesome-notes/computerScience/algorithms/ojBasicNotes",editUrl:"https://github.com/sabertazimi/awesome-notes/edit/main/notes/computerScience/algorithms/ojBasicNotes.md",tags:[{label:"CS",permalink:"/awesome-notes/tags/cs"},{label:"Algorithm",permalink:"/awesome-notes/tags/algorithm"},{label:"OJ",permalink:"/awesome-notes/tags/oj"}],version:"current",lastUpdatedBy:"sabertazimi",lastUpdatedAt:1649250539,formattedLastUpdatedAt:"4/6/2022",frontMatter:{author:"Sabertazimi",authorTitle:"Web Developer",authorURL:"https://github.com/sabertazimi",authorImageURL:"https://github.com/sabertazimi.png",tags:["CS","Algorithm","OJ"]},sidebar:"sidebar",previous:{title:"Algorithm Basic Notes",permalink:"/awesome-notes/computerScience/algorithms/algorithmsBasicNotes"},next:{title:"Architecture Basic Notes",permalink:"/awesome-notes/computerScience/architecture/archBasicNotes"}},s={},u=[{value:"String Problem",id:"string-problem",level:2},{value:"KMP Algorithm",id:"kmp-algorithm",level:3},{value:"Rotate String Problem",id:"rotate-string-problem",level:3},{value:"Repeated String Problem",id:"repeated-string-problem",level:3},{value:"Palindrome String Problem",id:"palindrome-string-problem",level:3},{value:"Search Problem",id:"search-problem",level:2},{value:"Sorted Array Search Problem",id:"sorted-array-search-problem",level:3},{value:"Max Min Search Problem",id:"max-min-search-problem",level:3},{value:"Range Max Min Query and Search Problem",id:"range-max-min-query-and-search-problem",level:3},{value:"Math Problem",id:"math-problem",level:2},{value:"Radix Problem",id:"radix-problem",level:3},{value:"Matrix Fast Power Algorithm",id:"matrix-fast-power-algorithm",level:3},{value:"Mod Power Algorithm",id:"mod-power-algorithm",level:3},{value:"XOR Operator Usage",id:"xor-operator-usage",level:3},{value:"Simulation",id:"simulation",level:2},{value:"Zig Zag Simulation",id:"zig-zag-simulation",level:3},{value:"Matrix Traversal Simulation",id:"matrix-traversal-simulation",level:3},{value:"Painting Simulation",id:"painting-simulation",level:3},{value:"Reverting Simulation",id:"reverting-simulation",level:3},{value:"Meet and Collision Problem",id:"meet-and-collision-problem",level:3},{value:"Graph and Map Problem",id:"graph-and-map-problem",level:2},{value:"Shortest Paths Algorithm",id:"shortest-paths-algorithm",level:3},{value:"Minimal Spanning Tree Algorithm",id:"minimal-spanning-tree-algorithm",level:3},{value:"BFS Algorithm",id:"bfs-algorithm",level:3},{value:"DFS Algorithm",id:"dfs-algorithm",level:3},{value:"Connected Component Problem",id:"connected-component-problem",level:3},{value:"Strongly Connected Component Problem",id:"strongly-connected-component-problem",level:4},{value:"Union Find Algorithm",id:"union-find-algorithm",level:4},{value:"Greedy Algorithm",id:"greedy-algorithm",level:2},{value:"Dynamic Programming",id:"dynamic-programming",level:2},{value:"Basic Dynamic Programming Problem",id:"basic-dynamic-programming-problem",level:3},{value:"Digital Bits Dynamic Programming Problem",id:"digital-bits-dynamic-programming-problem",level:3},{value:"Data Structure",id:"data-structure",level:2},{value:"Array",id:"array",level:3},{value:"Array Two Pointers",id:"array-two-pointers",level:4},{value:"Array Float Pointer",id:"array-float-pointer",level:4},{value:"List",id:"list",level:3},{value:"List Two Pointers",id:"list-two-pointers",level:4},{value:"Stack",id:"stack",level:3},{value:"Monotonic Stack",id:"monotonic-stack",level:4},{value:"Map",id:"map",level:3},{value:"Set",id:"set",level:3},{value:"BitMap",id:"bitmap",level:3}],d={toc:u};function c(e){var n=e.components,t=(0,a.Z)(e,r);return(0,l.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"oj-basic-notes"},"OJ Basic Notes"),(0,l.kt)("h2",{id:"string-problem"},"String Problem"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"sstream::stringstream\n\nsort()\ntransform(toUpper/toLower)\n\nstring::size_type\nstring::npos(vector.end())\n\nstr.find() == string::npos/string::size_type\nstr.substr(int pos, int len)\n\ngetline(cin/sin, strbuf)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"string::size_type pre, post \u6307\u9488: \u8fdb\u884c\u9010\u884c\u5339\u914d")),(0,l.kt)("h3",{id:"kmp-algorithm"},"KMP Algorithm"),(0,l.kt)("p",null,"\u5728\u5b57\u7b26\u4e32 s \u4e2d\u5bfb\u627e\u6a21\u5f0f\u4e32 p,\n\u4e0d\u56de\u6eaf s \u4e0e p \u7684\u5b57\u7b26\u6307\u9488 (\u66b4\u529b\u679a\u4e3e\u6cd5\u91c7\u53d6\u56de\u6eaf\u6307\u9488\u6cd5),\n\u800c\u662f\u5c06 p \u5411\u53f3\u79fb\u52a8\u81f3",(0,l.kt)("strong",{parentName:"p"},"\u6b63\u786e"),"\u7684\u4f4d\u7f6e:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u6c42 ",(0,l.kt)("inlineCode",{parentName:"li"},"p[k]")," \u7684\u524d\u7f00\u540e\u7f00\u6700\u957f\u516c\u5171\u5143\u7d20\u957f\u5ea6:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"p = abab; maxLen[0] = 0, maxLen[1] = 0, maxLen[2] = 1, maxLen[3] = 2"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"a")," \u6ca1\u6709\u516c\u5171\u524d\u540e\u7f00, ",(0,l.kt)("inlineCode",{parentName:"li"},"ab")," \u6ca1\u6709\u516c\u5171\u524d\u540e\u7f00, ",(0,l.kt)("inlineCode",{parentName:"li"},"aba")," \u6709\u516c\u5171\u524d\u540e\u7f00 ",(0,l.kt)("inlineCode",{parentName:"li"},"a"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"abab")," \u6709\u516c\u5171\u524d\u540e\u7f00 ",(0,l.kt)("inlineCode",{parentName:"li"},"ab"),"."))),(0,l.kt)("li",{parentName:"ol"},"\u6839\u636e ",(0,l.kt)("inlineCode",{parentName:"li"},"maxLen[k]")," \u8ba1\u7b97 ",(0,l.kt)("inlineCode",{parentName:"li"},"next[k]")," (",(0,l.kt)("inlineCode",{parentName:"li"},"next[0] = -1"),"):",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"next[k]")," \u8868\u793a\u5b57\u7b26 ",(0,l.kt)("inlineCode",{parentName:"li"},"p[k]")," \u524d\u7684\u5b50\u4e32 ",(0,l.kt)("inlineCode",{parentName:"li"},"p[0, k-1]")," \u7684\u524d\u7f00\u540e\u7f00\u6700\u957f\u516c\u5171\u5143\u7d20\u957f\u5ea6."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"next")," \u6570\u7ec4\u76f8\u5f53\u4e8e ",(0,l.kt)("inlineCode",{parentName:"li"},"maxLen")," \u6570\u7ec4\u6574\u4f53\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d, \u5e76\u4e14 ",(0,l.kt)("inlineCode",{parentName:"li"},"next[0] = -1"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"next")," \u6570\u7ec4\u672c\u8d28\u4e0a\u8bb0\u5f55\u7740\u6709\u9650\u72b6\u6001\u673a\u7684\u72b6\u6001\u8f6c\u79fb (\u7f16\u8bd1\u5668\u7684\u8bcd\u6cd5\u5206\u6790\u7b97\u6cd5\u4e0e\u8bed\u6cd5\u5206\u6790\u7b97\u6cd5\u4e5f\u7528\u5230\u6709\u9650\u72b6\u6001\u673a)."))),(0,l.kt)("li",{parentName:"ol"},"\u6700\u540e\u5f97\u5230, \u5b57\u7b26\u4e32 p \u5411\u53f3\u79fb\u52a8\u4f4d\u6570\u4e3a ",(0,l.kt)("inlineCode",{parentName:"li"},"k - next[k]"),", k \u4e3a ",(0,l.kt)("inlineCode",{parentName:"li"},"s[k] !== p[k]")," \u5339\u914d\u5931\u8d25\u65f6\u7684\u4e0b\u6807.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const getNext = (p: string): number[] => {\n  // next[0] = -1\n  const next: number[] = [-1];\n\n  // maxLen = next[0] = -1\n  for (let i = 0, maxLen = -1; i < p.length - 1; ) {\n    if (maxLen === -1 || p[i] === p[maxLen]) {\n      // p[i] === p[maxLen] => next[i + 1] = next[i] + 1 = maxLen + 1.\n      i++;\n      maxLen++;\n      next[i] = maxLen;\n    } else {\n      // Back to find shorter common prefix and suffix.\n      maxLen = next[maxLen];\n    }\n  }\n\n  return next;\n};\n\nconsole.log(getNext('abcdabc'));\n// [-1, 0, 0, 0, 0, 1, 2]\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// \u6539\u8fdb\u7248\nconst getNext = (p: string): number[] => {\n  // next[0] = -1\n  const next: number[] = [-1];\n\n  // maxLen = next[0] = -1\n  for (let i = 0, maxLen = -1; i < p.length - 1; ) {\n    if (maxLen === -1 || p[i] === p[maxLen]) {\n      i++;\n      maxLen++;\n      // \u6539\u8fdb\n      if (p[i] !== p[maxLen]) next[i] = maxLen;\n      else next[i] = next[maxLen];\n    } else {\n      // Back to find shorter common prefix and suffix.\n      maxLen = next[maxLen];\n    }\n  }\n\n  return next;\n};\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const search = (s: string, p: string): number => {\n  let i = 0;\n  let j = 0;\n\n  while (i < s.length && j < p.length) {\n    if (j === -1 || s[i] === p[j]) {\n      i++;\n      j++;\n    } else {\n      j = next[j];\n    }\n  }\n\n  if (j === p.length) return i - j;\n  else return -1;\n};\n")),(0,l.kt)("h3",{id:"rotate-string-problem"},"Rotate String Problem"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <string>\n#include <algorithm>\n\nstring left_rotate(string str, int offset) {\n  int size = str.length();\n  int n = offset % size;\n  reverse(str.begin(), str.begin() + n);\n  reverse(str.begin() + n, str.end());\n  reverse(str.begin(), str.end());\n  return str;\n}\n")),(0,l.kt)("h3",{id:"repeated-string-problem"},"Repeated String Problem"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Combine with ",(0,l.kt)("inlineCode",{parentName:"li"},"Rotate String")," to get solutions."),(0,l.kt)("li",{parentName:"ul"},"Find two same character as boundary."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"(s + s).slice(1, -1).includes(s)"),".")),(0,l.kt)("h3",{id:"palindrome-string-problem"},"Palindrome String Problem"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Reverse: ",(0,l.kt)("inlineCode",{parentName:"li"},"reverse === original"),"."),(0,l.kt)("li",{parentName:"ul"},"Recursion: ",(0,l.kt)("inlineCode",{parentName:"li"},"s[0] === s[length - 1] && isPalindrome(s.slice(1, length - 1))")),(0,l.kt)("li",{parentName:"ul"},"Two pointers: ",(0,l.kt)("inlineCode",{parentName:"li"},"s[i] !== s[j]; i++, j--;"),"."),(0,l.kt)("li",{parentName:"ul"},"Dynamic programming: ",(0,l.kt)("inlineCode",{parentName:"li"},"s[i] === s[j] && dp[i+1][j-1]"),".")),(0,l.kt)("h2",{id:"search-problem"},"Search Problem"),(0,l.kt)("h3",{id:"sorted-array-search-problem"},"Sorted Array Search Problem"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Binary Search"),(0,l.kt)("li",{parentName:"ul"},"Divide and Conquer")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"LeetCode 74/240")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"let lo = 0;\nlet hi = nums.length - 1;\n\nwhile (lo <= hi) {\n  const mid = lo + ((hi - lo) >> 1);\n  if (nums[mid] === target) return nums[mid];\n  else if (nums[mid] < target) lo = mid + 1;\n  else hi = mid - 1;\n}\n")),(0,l.kt)("h3",{id:"max-min-search-problem"},"Max Min Search Problem"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"Math.min(...nums);\nMath.max(...nums);\n")),(0,l.kt)("p",null,"\u5728\u67d0\u4e9b\u95ee\u9898\u4e2d, \u8981\u6c42\u6ee1\u8db3\u6761\u4ef6\u7684 max/min, \u4e14\u53ef\u4ee5\u8f7b\u6613\u5730\u5224\u5b9a\u67d0\u4e2a\u503c\u662f\u5426\u6ee1\u8db3\u8be5\u6761\u4ef6, \u5219\u53ef\u5229\u7528\u4e8c\u5206\u6cd5\u8fdb\u884c\u503c\u7684\u679a\u4e3e"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'// poj 1064\nint N, K;\ndouble L[max_n];\n\n// judgement\nbool C(double x) {\n  int num = 0;\n\n  for (int i = 0; i < N; i++) {\n    num += (int)(L[i] / x);\n  }\n\n  return num >= K;\n}\n\nvoid solve(void) {\n  double lb = 0, ub = numeric_limits<double>::max();\n\n  for (int i = 0; i < 100; i++) {\n    double mid = (lb + ub) / 2;\n    if (C(mid)) lb = mid;\n    else ub = mid;\n  }\n\n  printf("%.2f\\n", floor(ub * 100) / 100);\n}\n')),(0,l.kt)("h3",{id:"range-max-min-query-and-search-problem"},"Range Max Min Query and Search Problem"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Segment Tree (\u7ebf\u6bb5\u6811)"),(0,l.kt)("li",{parentName:"ul"},"Binary Indexed Tree (\u6811\u72b6\u6570\u7ec4)"),(0,l.kt)("li",{parentName:"ul"},"Bucket Method (Divide and Conquer)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"const int maxN = 1 << 17;\n\nint n;\nint dat[2 * maxN - 1];\n\nvoid init(int n_) {\n  n = 1;\n\n  // padding to 2^n\n  while (n < n_) n *= 2;\n\n  for (int i = 0; i < 2 * n - 1; i++) {\n    dat[i] = (numeric_limits<int>::max)();\n  }\n}\n\nvoid update(int k, int a) {\n  k += n - 1;\n  dat[k] = a;\n\n  while (k > 0) {\n    k = (k - 1) / 2;\n    dat[k] = min(dat[k * 2 + 1], dat[k * 2 + 2]);\n  }\n}\n\nint query(int a, int b, int k, int l, int r) {\n  // failed\n  if (r <= a || b <= l) {\n    return (numeric_limits<int>::max)();\n  }\n\n  // [l, r) <= [a, b)\n  if (a <= l && r <= b) {\n    return dat[k];\n  } else {\n    int vl = query(a, b, k * 2 + 1, l, (l + r) / 2);\n    int vr = query(a, b, k * 2 + 2, (l + r) / 2, r);\n    return min(vl, vr);\n  }\n}\n")),(0,l.kt)("h2",{id:"math-problem"},"Math Problem"),(0,l.kt)("h3",{id:"radix-problem"},"Radix Problem"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"while (n) {\n  const bit = n % radix;\n  n = Math.floor(n / radix);\n}\n")),(0,l.kt)("h3",{id:"matrix-fast-power-algorithm"},"Matrix Fast Power Algorithm"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"typedef vector<vector> mat;\n\nmat mul(mat& A, mat& B) {\n    mat C(A.size(), vec(B[0].size()));\n    for(int i = 0; i < (int)A.size(); ++i)\n        for(int j = 0; j < (int)B[0].size(); ++j)\n                for(int k = 0; k < (int)B.size(); ++k)\n                        C[i][j] ^= A[i][k] & B[k][j];\n    return C;\n}\n\nmat pow(mat A, int p) {\n    mat E(A.size(), vec(A.size()));\n    for(int i = 0; i < (int)A.size(); ++i) E[i][i] = 1;\n    while(p){\n        if(p & 1) E = mul(E, A);\n        A = mul(A, A);\n        p >>= 1;\n    }\n    return E;\n}\n")),(0,l.kt)("h3",{id:"mod-power-algorithm"},"Mod Power Algorithm"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"typedef long long ll;\n\nll mod_pow(ll x, ll n, ll mod) {\n    ll res = 1;\n\n    while (n > 0) {\n        if (n & 1) res = res * x % mod;\n\n        x = x * x % mod;\n        n >>= 1;\n    }\n\n    return res;\n}\n")),(0,l.kt)("h3",{id:"xor-operator-usage"},"XOR Operator Usage"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Binary add via ",(0,l.kt)("inlineCode",{parentName:"li"},"^"),"."),(0,l.kt)("li",{parentName:"ul"},"Remove duplicates via ",(0,l.kt)("inlineCode",{parentName:"li"},"^"),"."),(0,l.kt)("li",{parentName:"ul"},"Find difference via ",(0,l.kt)("inlineCode",{parentName:"li"},"^"),".")),(0,l.kt)("h2",{id:"simulation"},"Simulation"),(0,l.kt)("h3",{id:"zig-zag-simulation"},"Zig Zag Simulation"),(0,l.kt)("h3",{id:"matrix-traversal-simulation"},"Matrix Traversal Simulation"),(0,l.kt)("h3",{id:"painting-simulation"},"Painting Simulation"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u5bf9\u4e8e\u5b9e\u9645\u64cd\u4f5c, \u76f4\u63a5\u8986\u5199\u81f3\u72b6\u6001\u6570\u7ec4\u5373\u53ef, \u65e0\u9700\u5173\u5fc3\u8fb9\u754c\u6761\u4ef6(\u6548\u679c\u4f1a\u7acb\u5373\u751f\u6548)")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"e.g \u4ea4\u63a5\u5904\u65b9\u5757 , 2 \u6b21\u5199 1, maps","[i][j]"," = 1, \u4e0d\u7528\u62c5\u5fc3\u91cd\u590d\u8ba1\u6570")),(0,l.kt)("h3",{id:"reverting-simulation"},"Reverting Simulation"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Using 1 bit to simulate operation."),(0,l.kt)("li",{parentName:"ul"},"When need to output, calculate bits up."),(0,l.kt)("li",{parentName:"ul"},"Combined with dynamic programming problem.")),(0,l.kt)("h3",{id:"meet-and-collision-problem"},"Meet and Collision Problem"),(0,l.kt)("p",null,"\u8ffd\u53ca\u78b0\u649e\u95ee\u9898: \u5c06\u76f8\u9047/\u78b0\u649e\u7684\u4e24\u7269\u4f53\u89c6\u4f5c\u63d2\u80a9\u800c\u8fc7\u5373\u53ef."),(0,l.kt)("h2",{id:"graph-and-map-problem"},"Graph and Map Problem"),(0,l.kt)("h3",{id:"shortest-paths-algorithm"},"Shortest Paths Algorithm"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Dijkstra (BFS)"),(0,l.kt)("li",{parentName:"ul"},"Floyd (Greedy)")),(0,l.kt)("h3",{id:"minimal-spanning-tree-algorithm"},"Minimal Spanning Tree Algorithm"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Kruskal (tFind/tUnion)")),(0,l.kt)("h3",{id:"bfs-algorithm"},"BFS Algorithm"),(0,l.kt)("p",null,"Mark array/queue:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Shortest Paths"),(0,l.kt)("li",{parentName:"ul"},"Diameter(\u76f4\u5f84) of Tree(Two pass for BFS)")),(0,l.kt)("h3",{id:"dfs-algorithm"},"DFS Algorithm"),(0,l.kt)("p",null,"Mark array/ Mark stack/Recursion:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Longest Paths")),(0,l.kt)("h3",{id:"connected-component-problem"},"Connected Component Problem"),(0,l.kt)("h4",{id:"strongly-connected-component-problem"},"Strongly Connected Component Problem"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tarjan Algorithm(v.index(DFS \u65f6\u6b64\u70b9\u88ab\u8bbf\u95ee\u7684\u987a\u5e8f) == v.lowLink(\u4ece v \u51fa\u53d1\u7ecf\u6709\u5411\u8fb9\u53ef\u8fbe\u5230\u7684\u6240\u6709\u7ed3\u70b9\u4e2d\u6700\u5c0f\u7684 index))")),(0,l.kt)("h4",{id:"union-find-algorithm"},"Union Find Algorithm"),(0,l.kt)("p",null,"Quickly figure out connection of map."),(0,l.kt)("h2",{id:"greedy-algorithm"},"Greedy Algorithm"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u5b57\u5178\u6392\u5e8f\u6bd4\u8f83\u95ee\u9898"),(0,l.kt)("li",{parentName:"ul"},"Huffman Tree")),(0,l.kt)("h2",{id:"dynamic-programming"},"Dynamic Programming"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"dp \u6570\u7ec4\u53ef\u4ee5\u6eda\u52a8\u4f7f\u7528, \u4ece\u800c\u8282\u7701\u7a7a\u95f4")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"dp","[m][n]"," => dp","[2][n]"," (dp","[i & 1][j]",")")),(0,l.kt)("h3",{id:"basic-dynamic-programming-problem"},"Basic Dynamic Programming Problem"),(0,l.kt)("p",null,"\u5173\u952e: \u6700\u4f18\u5b50\u7ed3\u6784 + \u72b6\u6001\u65e0\u540e\u6548\u6027"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u6240\u6709\u80cc\u5305\u95ee\u9898"),(0,l.kt)("li",{parentName:"ul"},"\u4e8c\u5206\u95ee\u9898:\u6700\u4f18\u4e8c\u5206\u641c\u7d22\u6811/\u6587\u4ef6\u5408\u5e76"),(0,l.kt)("li",{parentName:"ul"},"\u975e\u8fde\u7eed\u7279\u5f81\u5e8f\u5217: \u6700\u957f\u5b50\u5e8f\u5217/\u6700\u957f\u4e0a\u5347\u5e8f\u5217"),(0,l.kt)("li",{parentName:"ul"},"\u591a\u91cd\u90e8\u5206\u548c\u95ee\u9898 e.g \u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u5bf9\u6570\u7684\u548c\u4e3a xx"),(0,l.kt)("li",{parentName:"ul"},"\u8ba1\u6570\u95ee\u9898/\u5206\u7ec4\u95ee\u9898/\u5206\u5212\u95ee\u9898")),(0,l.kt)("h3",{id:"digital-bits-dynamic-programming-problem"},"Digital Bits Dynamic Programming Problem"),(0,l.kt)("p",null,"\u6570\u4f4d DP:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u7ed9\u5b9a\u533a\u95f4 ","[a, b]",", \u6c42\u6ee1\u8db3\u7279\u5b9a\u8981\u6c42\u7684\u6570, \u8981\u6c42\u4e00\u822c\u4e0e\u5927\u5c0f\u65e0\u5173, \u4e0e\u6570\u4f4d\u7684\u7ec4\u6210\u76f8\u5173"),(0,l.kt)("li",{parentName:"ul"},"\u89c4\u6a21\u5de8\u5927, \u65e0\u6cd5\u679a\u4e3e")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u9012\u589e\u6570: 1234, 2579; \u53cc\u5cf0\u6570: 19280, 26193; \u542b 49: 49, 149, 1492; \u6574\u9664 13: 26, 39 ...")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"f(a, b) = f(b, 0) - f(a - 1, 0)"),"."),(0,l.kt)("p",null,"\u66b4\u529b + \u5b58\u50a8 = \u8bb0\u5fc6\u5316\u641c\u7d22:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u66b4\u529b\u679a\u4e3e\u6bcf\u4e00\u4f4d\u7684 (0, ...,9)"),(0,l.kt)("li",{parentName:"ul"},"\u5229\u7528 dp","[pos][state]"," \u4e0e dfs(pos, state, k, flag) \u8fdb\u884c\u5b58\u50a8")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"/// \\brief \u6570\u5b57\u5904\u7406\u51fd\u6570\n/// \\param num \u539f\u59cb\u6570\u636e\n/// \\param digit \u4fdd\u5b58\u6bcf\u4e2a\u6570\u4f4d\u7684\u503c\n/// \\param state \u521d\u59cb\u72b6\u6001\nint f(int num){\n    int ans;\n    int pos = 0;\n\n    while(num){\n        digit[++pos]=num%10;\n        num=num/10;\n    }\n\n    return dfs( pos, state , true);\n}\n\n/// \\brief dfs \u51fd\u6570, \u4ece\u9ad8\u4f4d\u5f00\u59cb\u904d\u5386\n/// \\param f     \u8bb0\u5fc6\u5316\u6570\u7ec4\n/// \\param pos   \u5f53\u524d\u6570\u4f4d\u4e0b\u6807\n/// \\param state \u4e4b\u524d\u6570\u5b57\u7684\u72b6\u6001\n/// \\param flag  \u4e0a\u9650\u6807\u5fd7\nint dfs(int pos, int state, bool flag) {\n    if (pos == -1) {\n        return state == target_state;\n    }\n    if (!exception && ~f[pos][state]) {\n        return f[pos][state]\n    }\n\n    int ans = 0;\n\n    // \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6570\u4f4d, \u6c42\u51fa\u679a\u4e3e\u754c\u9650\n    // \u4e00\u822c\u4ece 0 \u679a\u4e3e\u81f3 9, \u5f53\u5230\u8fbe\u7279\u6b8a\u4f4d\u7f6e\u65f6, \u679a\u4e3e\u4e0a\u9650\u53ef\u80fd\u6539\u53d8\n    int next = exception ? digit[i] : 9;\n\n    for (int digit = 0; digit <= next; digit++) {\n        ans += dfs(pos - 1, new_state(state, digit), exception && digit == next);\n    }\n\n    return flag ? ans : f[pos][state] = ans;\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'typedef long long ll;\n\nint a[20];\n\nll dp[20][state];   //\u4e0d\u540c\u9898\u76ee\u72b6\u6001\u4e0d\u540c\n\nll dfs(int pos, int state, bool lead, bool limit) {\n    // \u9012\u5f52\u8fb9\u754c, \u6309\u4f4d\u679a\u4e3e\u6700\u4f4e\u4f4d\u662f0, pos == -1 \u8868\u793a\u679a\u4e3e\u7ed3\u675f\n    if (pos == -1) {\n        // \u82e5\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e00\u4f4d\u90fd\u5408\u6cd5, \u5219 return 1; \u5426\u5219 return 0\n        return 1;\n    }\n\n    // \u8bb0\u5fc6\u5316\n    if (!limit && !lead && dp[pos][state] != -1) {\n        return dp[pos][state];\n    }\n\n    // \u6839\u636e limit \u5224\u65ad\u679a\u4e3e\u7684\u4e0a\u754c up\n    int up = limit ? a[pos] : 9;\n\n    // \u5f00\u59cb\u8ba1\u6570\n    ll ans=0;\n\n    // \u679a\u4e3e: \u628a\u4e0d\u540c\u60c5\u51b5\u7684\u4e2a\u6570\u52a0\u5230ans\n    for(int i = 0;i <= up; i++)\n    {\n        // \u5f53\u524d\u6570\u4f4d\u679a\u4e3e\u7684\u6570\u662fi\uff0c\u6839\u636e\u9898\u76ee\u7684\u7ea6\u675f\u6761\u4ef6\u5206\u7c7b\u8ba8\u8bba\n        // \u8ba1\u7b97\u4e0d\u540c\u60c5\u51b5\u4e0b\u7684\u4e2a\u6570, \u6839\u636e state \u53d8\u91cf\u6765\u4fdd\u8bc1 i \u7684\u5408\u6cd5\u6027\n        // \u4e00\u5b9a\u8981\u4fdd\u8bc1\u679a\u4e3e\u6570\u7684\u5408\u6cd5\u6027\n\n        // \u6bd4\u5982\u8981\u6c42\u6570\u4f4d\u4e0a\u4e0d\u80fd\u6709 62 \u8fde\u7eed\u51fa\u73b0, \u90a3\u4e48state \u5c31\u8981\u4fdd\u5b58\u524d\u4e00\u4f4d pre\n        // \u524d\u4e00\u4f4d\u5982\u679c\u662f 6 \u90a3\u4e48\u4f4d\u4e0d\u80fd\u662f 2\n\n        // \u5f53\u4e0d\u5408\u6cd5\u65f6, \u76f4\u63a5 continue\n        if() ...\n        else if()...\n\n        ans += dfs(pos-1, new_state(pos, state) /*\u72b6\u6001\u8f6c\u79fb*/,\n          lead && i==0, limit && i == a[pos])\n    }\n\n    // \u8ba1\u7b97\u7ed3\u675f, \u8bb0\u5f55\u72b6\u6001\n    if (!limit && !lead) {\n        dp[pos][state] = ans;\n    }\n\n    return ans;\n}\n\nll solve(ll x) {\n    int pos=0;\n\n    // \u6570\u4f4d\u5206\u89e3\n    while(x) {\n        a[pos++] = x % 10;\n        x /= 10;\n    }\n\n    // \u4ece\u6700\u9ad8\u4f4d\u5f00\u59cb\u679a\u4e3e\n    // \u6700\u9ad8\u4f4d\u524d\u5bfc\u4e3a 0, \u4e14\u53d7\u4e0a\u9650\u9650\u5236(\u65e0\u6cd5\u679a\u4e3e\u81f3 9)\n    return dfs(pos-1, state /*\u4e00\u7cfb\u5217\u72b6\u6001 */, true, true);\n}\n\nint main(void) {\n    ll le,ri;\n\n    while (~scanf("%lld %lld", &le, &ri)) {\n        // \u521d\u59cb\u5316dp\u6570\u7ec4\u4e3a-1\n        printf("%lld\\n", solve(ri)-solve(le-1));\n    }\n\n    return 0;\n}\n')),(0,l.kt)("h2",{id:"data-structure"},"Data Structure"),(0,l.kt)("h3",{id:"array"},"Array"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u53ef\u4ee5\u5229\u7528\u6570\u7ec4\u5143\u7d20\u7684\u6b63\u8d1f\u6027\u8868\u793a\u5b58\u5728\u6027\uff08\u6216\u5176\u4ed6\u7279\u6b8a\u610f\u4e49\uff09")),(0,l.kt)("h4",{id:"array-two-pointers"},"Array Two Pointers"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u53ef\u4ee5\u5728",(0,l.kt)("strong",{parentName:"li"},"\u6709\u7a77\u65f6\u95f4\u5185"),"\u5224\u65ad\u662f\u5426\u5b58\u5728",(0,l.kt)("strong",{parentName:"li"},"\u5faa\u73af"),": \u4e00\u4e2a\u5feb\u6307\u9488, \u4e00\u4e2a\u6162\u6307\u9488, \u5f53\u4e24\u8005\u76f8\u9047\u65f6, \u8868\u793a\u5b58\u5728\u5faa\u73af."),(0,l.kt)("li",{parentName:"ul"},"Slide Window: ",(0,l.kt)("inlineCode",{parentName:"li"},"window = [lo, hi]"),".")),(0,l.kt)("h4",{id:"array-float-pointer"},"Array Float Pointer"),(0,l.kt)("p",null,"\u5229\u7528\u6d6e\u52a8\u6307\u9488\u89e3\u51b3\u76f8\u5173\u95ee\u9898:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u5b57\u7b26\u4e32\u6bd4\u8f83"),(0,l.kt)("li",{parentName:"ul"},"\u8fde\u7eed\u533a\u95f4\u95ee\u9898(\u5c3a\u53d6\u6cd5)")),(0,l.kt)("h3",{id:"list"},"List"),(0,l.kt)("h4",{id:"list-two-pointers"},"List Two Pointers"),(0,l.kt)("p",null,"Slow and fast pointer:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Judge cycle."),(0,l.kt)("li",{parentName:"ul"},"Find middle node.")),(0,l.kt)("h3",{id:"stack"},"Stack"),(0,l.kt)("h4",{id:"monotonic-stack"},"Monotonic Stack"),(0,l.kt)("p",null,"\u5355\u8c03\u6808: \u5bfb\u627e\u4e0b\u4e00\u4e2a\u66f4\u5c0f/\u66f4\u5927 (Smaller/Greater) \u5143\u7d20."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const stack: number[] = [];\nconst greaterMap = new Map<number, number>();\n\nfor (const num of nums) {\n  while (stack.length && stack[stack.length - 1] < num) {\n    greaterMap.set(stack.pop() as number, num);\n  }\n  stack.push(num);\n}\n")),(0,l.kt)("h3",{id:"map"},"Map"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u7528\u4e8e Hash \u5316"),(0,l.kt)("li",{parentName:"ul"},"\u7528\u4e8e\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u6570\u5b57"),(0,l.kt)("li",{parentName:"ul"},"\u7528\u4e8e\u8ba1\u6570")),(0,l.kt)("h3",{id:"set"},"Set"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u7528\u4e8e\u53bb\u91cd\u4e0e\u67e5\u91cd (",(0,l.kt)("inlineCode",{parentName:"li"},"Duplicate Problem"),", e.g LeetCode 217/219/220)."),(0,l.kt)("li",{parentName:"ul"},"\u7528\u4e8e\u96c6\u5408\u8fd0\u7b97\u9898\uff08\u4ea4\u3001\u5e76\u3001\u5dee\u7b49\uff09")),(0,l.kt)("h3",{id:"bitmap"},"BitMap"),(0,l.kt)("p",null,"Bit presentation: \u591a\u7528\u4e8e\u72b6\u6001\u679a\u4e3e(1 bit \u8868\u793a 1 \u4e2a\u72b6\u6001/\u5f00\u5173), \u8868\u793a\u72b6\u6001\u96c6\u5408."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u53ef\u7528\u4e8e\u52a8\u6001\u89c4\u5212\u4e2d\u538b\u7f29\u72b6\u6001")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"0 // empty set\n1 << i // just 1 bit on\n(1 << n) - 1 // n bit on\nif (S >> i & 1) // include nth(i) bit\nS | 1 << i // insert nth(i) bit\nS & ~(1 << i) // remove nth(1) bit\nS | T // union\nS & T // intersection\n\ni & -i // last 1 bit\n")))}c.isMDXComponent=!0}}]);