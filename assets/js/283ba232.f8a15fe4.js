"use strict";(self.webpackChunkawesome_notes=self.webpackChunkawesome_notes||[]).push([[1436],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=s(n),m=r,k=c["".concat(o,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7378:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],p={author:"Sabertazimi",authorTitle:"Web Developer",authorURL:"https://github.com/sabertazimi",authorImageURL:"https://github.com/sabertazimi.png",tags:["CS","System","OS","Architecture"]},o="Computer Systems: A Programmer's Perspective Basic Notes",s={unversionedId:"computerScience/operatingSystems/CSAPP",id:"computerScience/operatingSystems/CSAPP",title:"Computer Systems: A Programmer's Perspective Basic Notes",description:"\u673a\u5668\u7801\u4e0e\u8fdb\u5236\u8f6c\u6362",source:"@site/notes/computerScience/operatingSystems/CSAPP.md",sourceDirName:"computerScience/operatingSystems",slug:"/computerScience/operatingSystems/CSAPP",permalink:"/awesome-notes/computerScience/operatingSystems/CSAPP",editUrl:"https://github.com/sabertazimi/awesome-notes/edit/main/notes/computerScience/operatingSystems/CSAPP.md",tags:[{label:"CS",permalink:"/awesome-notes/tags/cs"},{label:"System",permalink:"/awesome-notes/tags/system"},{label:"OS",permalink:"/awesome-notes/tags/os"},{label:"Architecture",permalink:"/awesome-notes/tags/architecture"}],version:"current",lastUpdatedBy:"sabertazimi",lastUpdatedAt:1649509611,formattedLastUpdatedAt:"4/9/2022",frontMatter:{author:"Sabertazimi",authorTitle:"Web Developer",authorURL:"https://github.com/sabertazimi",authorImageURL:"https://github.com/sabertazimi.png",tags:["CS","System","OS","Architecture"]},sidebar:"sidebar",previous:{title:"Computer Networking Notes",permalink:"/awesome-notes/computerScience/network/networkBasicNotes"},next:{title:"Operating System Basic Notes",permalink:"/awesome-notes/computerScience/operatingSystems/operatingSystemsBasicNotes"}},d={},u=[{value:"\u673a\u5668\u7801\u4e0e\u8fdb\u5236\u8f6c\u6362",id:"\u673a\u5668\u7801\u4e0e\u8fdb\u5236\u8f6c\u6362",level:2},{value:"\u6d6e\u70b9\u6570",id:"\u6d6e\u70b9\u6570",level:3},{value:"Stack Frame",id:"stack-frame",level:3},{value:"Architecture",id:"architecture",level:2},{value:"Control Signal",id:"control-signal",level:3},{value:"Special Control Signal",id:"special-control-signal",level:3},{value:"Procedure Control Signal",id:"procedure-control-signal",level:3},{value:"Forwarding",id:"forwarding",level:3},{value:"Exception",id:"exception",level:3},{value:"Efficiency",id:"efficiency",level:3},{value:"Optimization",id:"optimization",level:2},{value:"Principles",id:"principles",level:3},{value:"Tips",id:"tips",level:3},{value:"Replacement",id:"replacement",level:4},{value:"Branch",id:"branch",level:4},{value:"Code Motion",id:"code-motion",level:4},{value:"Unrolling (Duff&#39;s Device)",id:"unrolling-duffs-device",level:4},{value:"\u5f02\u5e38\u63a7\u5236\u6d41",id:"\u5f02\u5e38\u63a7\u5236\u6d41",level:2},{value:"\u5f02\u5e38",id:"\u5f02\u5e38",level:3},{value:"\u5206\u7c7b",id:"\u5206\u7c7b",level:4},{value:"\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f",id:"\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f",level:4},{value:"\u8fdb\u7a0b",id:"\u8fdb\u7a0b",level:3},{value:"\u4e0a\u4e0b\u6587",id:"\u4e0a\u4e0b\u6587",level:4},{value:"\u8fdb\u7a0b\u63a7\u5236",id:"\u8fdb\u7a0b\u63a7\u5236",level:4},{value:"\u521b\u5efa\u548c\u7ec8\u6b62\u8fdb\u7a0b",id:"\u521b\u5efa\u548c\u7ec8\u6b62\u8fdb\u7a0b",level:5},{value:"\u56de\u6536\u5b50\u8fdb\u7a0b",id:"\u56de\u6536\u5b50\u8fdb\u7a0b",level:5},{value:"\u4fe1\u53f7",id:"\u4fe1\u53f7",level:3},{value:"\u5904\u7406\u4fe1\u53f7",id:"\u5904\u7406\u4fe1\u53f7",level:4},{value:"\u963b\u585e\u4fe1\u53f7",id:"\u963b\u585e\u4fe1\u53f7",level:4},{value:"\u975e\u672c\u5730\u8df3\u8f6c",id:"\u975e\u672c\u5730\u8df3\u8f6c",level:3},{value:"\u7cfb\u7edf\u7ea7 I/O",id:"\u7cfb\u7edf\u7ea7-io",level:2},{value:"socket I/O",id:"socket-io",level:3},{value:"\u9650\u5236",id:"\u9650\u5236",level:4},{value:"I/O \u51fd\u6570\u7684\u9009\u62e9",id:"io-\u51fd\u6570\u7684\u9009\u62e9",level:4},{value:"Zero Copy",id:"zero-copy",level:3},{value:"\u7f51\u7edc",id:"\u7f51\u7edc",level:2},{value:"\u5e76\u53d1",id:"\u5e76\u53d1",level:2},{value:"\u9501",id:"\u9501",level:3},{value:"\u8c03\u8bd5/\u6d4b\u8bd5",id:"\u8c03\u8bd5\u6d4b\u8bd5",level:2},{value:"\u65e5\u5fd7",id:"\u65e5\u5fd7",level:3}],c={toc:u};function m(e){var t=e.components,p=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},c,p,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"computer-systems-a-programmers-perspective-basic-notes"},"Computer Systems: A Programmer's Perspective Basic Notes"),(0,i.kt)("h2",{id:"\u673a\u5668\u7801\u4e0e\u8fdb\u5236\u8f6c\u6362"},"\u673a\u5668\u7801\u4e0e\u8fdb\u5236\u8f6c\u6362"),(0,i.kt)("h3",{id:"\u6d6e\u70b9\u6570"},"\u6d6e\u70b9\u6570"),(0,i.kt)("p",null,"\u89c4\u683c\u5316\u6d6e\u70b9\u6570: 1.xxx ",(0,i.kt)("em",{parentName:"p"}," 2^(exp - 127) - e.g `5 = 5.0 = 1.25 ")," 2^(129 - 127)`"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"xxx: \u5c3e\u6570"),(0,i.kt)("li",{parentName:"ul"},"exp: \u9636\u7801")),(0,i.kt)("h3",{id:"stack-frame"},"Stack Frame"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"stack frame",src:n(2957).Z,width:"285",height:"379"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"# \u51c6\u5907\u9636\u6bb5\n# Caller-Save: %eax %ecx %edx\n# Callee-Save: %ebx %esi %edi\n# \u4f20\u53c2\u987a\u5e8f: rdi, dsi, rdx, rcx, r8, r9, stack\n\npushl %ebp\nmovl %esp, %ebp\npushl %ebx\n\n# \u7ed3\u675f\u9636\u6bb5\n\nmovl -4(%ebp), %ebx\nmovl %ebp, %esp\npopl %ebp\nret\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"x86_64"),": \u53ef\u4f7f\u7528\u8d85\u51fa Stack Pointer 128 bytes \u7684\u5185\u5b58\u533a\u57df, \u79f0\u4e3a Red Zone."),(0,i.kt)("h2",{id:"architecture"},"Architecture"),(0,i.kt)("h3",{id:"control-signal"},"Control Signal"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"State"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Signal"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Fetch"),(0,i.kt)("td",{parentName:"tr",align:"left"},"icode,ifun rA,rB valC,valP")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Decode"),(0,i.kt)("td",{parentName:"tr",align:"left"},"valA,srcA valB,srcB")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Execute"),(0,i.kt)("td",{parentName:"tr",align:"left"},"valE Condition")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Memory"),(0,i.kt)("td",{parentName:"tr",align:"left"},"valM read/write")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"WriteBack"),(0,i.kt)("td",{parentName:"tr",align:"left"},"E port,dstE M port,dstM")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"PCUpdate"),(0,i.kt)("td",{parentName:"tr",align:"left"},"PC")))),(0,i.kt)("h3",{id:"special-control-signal"},"Special Control Signal"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"handle ret: ",(0,i.kt)("inlineCode",{parentName:"li"},"IRET in {D_icode, E_icode, M_icode}")),(0,i.kt)("li",{parentName:"ul"},"load/use hazard: ",(0,i.kt)("inlineCode",{parentName:"li"},"E_icode in {IMRMOVL, IPOPL} && E_dstM in {d_srcA, d_srcB}")),(0,i.kt)("li",{parentName:"ul"},"mispredicted branch: ",(0,i.kt)("inlineCode",{parentName:"li"},"E_icode in {IJXX} && !e_Cnd")),(0,i.kt)("li",{parentName:"ul"},"exception: ",(0,i.kt)("inlineCode",{parentName:"li"},"m_stat in {SADR, SINS, SHLT} || W_stat in {SADR, SINS, SHLT}"))),(0,i.kt)("h3",{id:"procedure-control-signal"},"Procedure Control Signal"),(0,i.kt)("p",null,"Branch, Loop, Jump:"),(0,i.kt)("p",null,"PrectPC | ",(0,i.kt)("inlineCode",{parentName:"p"},"W_valM"),"(\u65e0\u6cd5\u9884\u6d4b) | ",(0,i.kt)("inlineCode",{parentName:"p"},"M_valP/M_valA"),"\n(\u5728\u8bd1\u7801\u9636\u6bb5\u5408\u5e76\u4fe1\u53f7\u91cf valA \u4e0e valP: PCUpdate \u4f4d\u4e8e Fetch,\u65e0\u9700\u4f20\u9012 valP, \u53ea\u5269 call/jump \u9700\u8981 valP)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"AT: always taken"),(0,i.kt)("li",{parentName:"ul"},"NT: never taken"),(0,i.kt)("li",{parentName:"ul"},"BTFNT: backward taken forward not taken")),(0,i.kt)("h3",{id:"forwarding"},"Forwarding"),(0,i.kt)("p",null,"\u6d41\u6c34\u7ebf\u4e2d\u6700\u65e9\u9636\u6bb5\u7684\u8f6c\u53d1\u6e90, \u4f18\u5148\u7ea7\u6700\u9ad8 execute > memory > write"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"int d_valA = [\n    D_icode in {ICALL, IJXX}: D_valP;\n\n    d_srcA == e_dstE : e_valE;\n    d_srcA == M_dstM : m_valM;\n    d_srcA == M_dstE : M_valE;\n    d_srcA == W_dstM : W_valM;\n    d_srcA == W_dstE : W_valE;\n\n    # register file\n    1 : d_rvalA;\n];\n")),(0,i.kt)("h3",{id:"exception"},"Exception"),(0,i.kt)("p",null,"\u6d41\u6c34\u7ebf\u4e2d\u6700\u6df1\u7684\u6307\u4ee4\u5f15\u8d77\u7684\u5f02\u5e38, \u4f18\u5148\u7ea7\u6700\u9ad8 e.g \u8bbf\u5b58\u9636\u6bb5\u5730\u5740\u8d8a\u754c\u5f02\u5e38\u4f18\u5148\u7ea7\u9ad8\u4e8e\u53d6\u6307\u9636\u6bb5\u5730\u5740\u8d8a\u754c\u5f02\u5e38\u4f18\u5148\u7ea7"),(0,i.kt)("h3",{id:"efficiency"},"Efficiency"),(0,i.kt)("p",null,"CPI = 1.0 + lp + mp + rp:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"lp: load penalty(load/use hazard)"),(0,i.kt)("li",{parentName:"ul"},"mp: mispredicted branch penalty"),(0,i.kt)("li",{parentName:"ul"},"rp: return penalty")),(0,i.kt)("h2",{id:"optimization"},"Optimization"),(0,i.kt)("h3",{id:"principles"},"Principles"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5408\u9002\u7684\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784"),(0,i.kt)("li",{parentName:"ul"},"\u7f16\u5199\u7f16\u8bd1\u5668\u80fd\u591f\u6709\u6548\u4f18\u5316\u7684\u4ee3\u7801 e.g \u5bc4\u5b58\u5668\u522b\u540d,\u5b58\u50a8\u5668\u522b\u540d,\u51fd\u6570\u7684\u526f\u4f5c\u7528 \u5bfc\u81f4\u7f16\u8bd1\u5668\u65e0\u6cd5(\u4e0d\u6562)\u5408\u5e76/\u5220\u9664\u5197\u4f59\u4ee3\u7801"),(0,i.kt)("li",{parentName:"ul"},"\u63d0\u9ad8\u4ee3\u7801\u7684\u5e76\u884c\u6027"),(0,i.kt)("li",{parentName:"ul"},"\u6d88\u9664\u4e0d\u5fc5\u8981\u7684\u8bbf\u5b58 e.g \u591a\u6b21\u8bbf\u5b58(\u53ef\u7528\u4e2d\u95f4\u91cf\u4f18\u5316), \u591a\u6b21\u51fd\u6570\u8c03\u7528(\u53ef\u7528\u5b8f/\u5185\u8054\u51fd\u6570\u4f18\u5316)")),(0,i.kt)("h3",{id:"tips"},"Tips"),(0,i.kt)("h4",{id:"replacement"},"Replacement"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u7528\u591a\u6761 Shift/Add/Sub \u6307\u4ee4, \u4ee3\u66ff Mul/Div")),(0,i.kt)("h4",{id:"branch"},"Branch"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5229\u7528\u6761\u4ef6\u8868\u8fbe\u5f0f\u4ee3\u66ff\u6761\u4ef6\u5206\u652f\u8bed\u53e5: \u964d\u4f4e\u9884\u6d4b\u9519\u8bef\u60e9\u7f5a")),(0,i.kt)("h4",{id:"code-motion"},"Code Motion"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5c06\u4e0d\u53d8\u6d4b\u8bd5\u6761\u4ef6/\u5e38\u53d8\u91cf\u7684\u8ba1\u7b97\u4ece\u5faa\u73af\u4e2d\u79fb\u51fa"),(0,i.kt)("li",{parentName:"ul"},"\u5c06\u591a\u6b21\u8bbf\u5b58\u5229\u7528\u4e2d\u95f4\u81ea\u52a8/\u5bc4\u5b58\u5668\u53d8\u91cf\u6539\u5199\u6210\u4e00\u6b21\u8bbf\u5b58")),(0,i.kt)("h4",{id:"unrolling-duffs-device"},"Unrolling (Duff's Device)"),(0,i.kt)("p",null,"\u5faa\u73af\u5c55\u5f00: \u589e\u5927\u5faa\u73af\u7684\u6b65\u957f - Duff's Device \u4ee5 7 \u4e3a\u6b65\u957f:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u63d0\u5347\u5faa\u73af\u7684\u8fd0\u884c\u6548\u7387"),(0,i.kt)("li",{parentName:"ul"},"\u4e00\u6b21\u5faa\u73af\u5185: \u53ef\u5148\u5c06\u6240\u6709\u6570\u636e\u5148\u8bfb\u51fa\u6765(Memory State),\u5c06\u8fdb\u884c\u8ba1\u7b97(Execute State), \u4ece\u800c\u6d88\u9664 Load/Use \u5192\u9669\u800c\u4ea7\u751f\u7684 Bubble")),(0,i.kt)("h2",{id:"\u5f02\u5e38\u63a7\u5236\u6d41"},"\u5f02\u5e38\u63a7\u5236\u6d41"),(0,i.kt)("p",null,"\u7406\u89e3\u5f02\u5e38\u63a7\u5236\u6d41,\u6709\u52a9\u4e8e\u7406\u89e3\u4ee5\u4e0b\u6982\u5ff5:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u9677\u9631(trap)/\u7cfb\u7edf\u8c03\u7528(system call)"),(0,i.kt)("li",{parentName:"ul"},"\u7cfb\u7edf\u7ea7 I/O"),(0,i.kt)("li",{parentName:"ul"},"\u7ebf\u7a0b/\u8fdb\u7a0b(concurrency)"),(0,i.kt)("li",{parentName:"ul"},"\u865a\u62df\u5b58\u50a8\u5668"),(0,i.kt)("li",{parentName:"ul"},"\u8f6f\u4ef6\u5f02\u5e38")),(0,i.kt)("h3",{id:"\u5f02\u5e38"},"\u5f02\u5e38"),(0,i.kt)("h4",{id:"\u5206\u7c7b"},"\u5206\u7c7b"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"\u7c7b\u522b"),(0,i.kt)("th",{parentName:"tr",align:"left"},"\u539f\u56e0"),(0,i.kt)("th",{parentName:"tr",align:"left"},"\u5f02\u6b65/\u540c\u6b65"),(0,i.kt)("th",{parentName:"tr",align:"left"},"\u8fd4\u56de\u884c\u4e3a"),(0,i.kt)("th",{parentName:"tr",align:"left"},"\u4f8b\u5b50"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"interrupt"),(0,i.kt)("td",{parentName:"tr",align:"left"},"\u8f93\u5165/\u8f93\u51fa\u5916\u90e8\u4e2d\u65ad"),(0,i.kt)("td",{parentName:"tr",align:"left"},"async"),(0,i.kt)("td",{parentName:"tr",align:"left"},"next(concurrency)"),(0,i.kt)("td",{parentName:"tr",align:"left"},"\u78c1\u76d8")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"trap"),(0,i.kt)("td",{parentName:"tr",align:"left"},"\u4e3b\u52a8\u5f02\u5e38/\u7cfb\u7edf\u8c03\u7528"),(0,i.kt)("td",{parentName:"tr",align:"left"},"sync"),(0,i.kt)("td",{parentName:"tr",align:"left"},"next"),(0,i.kt)("td",{parentName:"tr",align:"left"},"write/intN")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"fault"),(0,i.kt)("td",{parentName:"tr",align:"left"},"\u6f5c\u5728\u53ef\u6062\u590d\u7684\u9519\u8bef"),(0,i.kt)("td",{parentName:"tr",align:"left"},"sync"),(0,i.kt)("td",{parentName:"tr",align:"left"},"current/abort"),(0,i.kt)("td",{parentName:"tr",align:"left"},"seg/float exp")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"abort"),(0,i.kt)("td",{parentName:"tr",align:"left"},"\u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef"),(0,i.kt)("td",{parentName:"tr",align:"left"},"sync"),(0,i.kt)("td",{parentName:"tr",align:"left"},"abort(not return)"),(0,i.kt)("td",{parentName:"tr",align:"left"},"\u786c\u4ef6\u9519\u8bef")))),(0,i.kt)("h4",{id:"\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f"},"\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f"),(0,i.kt)("p",null,"\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u4e3b\u8981\u5206\u4e3a 3 \u7c7b:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u63a7\u5236\u6743\u8fd4\u56de\u7ed9 Instruction_current"),(0,i.kt)("li",{parentName:"ul"},"\u63a7\u5236\u6743\u8fd4\u56de\u7ed9 Instruction_next"),(0,i.kt)("li",{parentName:"ul"},"abort/exit")),(0,i.kt)("h3",{id:"\u8fdb\u7a0b"},"\u8fdb\u7a0b"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u4e00\u4e2a\u72ec\u7acb\u7684\u903b\u8f91\u63a7\u5236\u6d41(\u5e76\u884c\u6267\u884c)"),(0,i.kt)("li",{parentName:"ul"},"\u4e00\u4e2a\u79c1\u6709\u7684\u5730\u5740\u7a7a\u95f4(\u7f13\u5b58\u4e0e\u865a\u62df\u5b58\u50a8\u5668)")),(0,i.kt)("h4",{id:"\u4e0a\u4e0b\u6587"},"\u4e0a\u4e0b\u6587"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u4ee3\u7801/\u6570\u636e,\u5806/\u6808,\u901a\u7528\u5bc4\u5b58\u5668,\u7a0b\u5e8f\u8ba1\u6570\u5668,\u73af\u5883\u53d8\u91cf,\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408"),(0,i.kt)("li",{parentName:"ul"},"\u4e0a\u4e0b\u6587\u5207\u6362:\u7528\u6237\u6a21\u5f0f\u4e0e\u5185\u6838\u6a21\u5f0f\u7684\u5207\u6362"),(0,i.kt)("li",{parentName:"ul"},"\u9ad8\u901f\u7f13\u5b58\u6c61\u67d3(pollution): \u6bcf\u6b21\u5207\u6362\u540e,\u603b\u662f\u4f1a\u53d1\u751f cold cache miss")),(0,i.kt)("h4",{id:"\u8fdb\u7a0b\u63a7\u5236"},"\u8fdb\u7a0b\u63a7\u5236"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sys/types.h>\n#include <unistd.h>\n#include <sys/wait.h>\n#include <errno.h>\n")),(0,i.kt)("h5",{id:"\u521b\u5efa\u548c\u7ec8\u6b62\u8fdb\u7a0b"},"\u521b\u5efa\u548c\u7ec8\u6b62\u8fdb\u7a0b"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u7236\u8fdb\u7a0b\u4e0e\u5b50\u8fdb\u7a0b\u83b7\u5f97 2 \u4efd\u72ec\u7acb\u7684\u79c1\u6709\u7a7a\u95f4\u4e0e 2 \u4efd\u72ec\u7acb\u7684\u4e0a\u4e0b\u6587, \u4e0d\u540c\u7684 PID(process id)"),(0,i.kt)("li",{parentName:"ul"},"\u7531\u4e8e\u6307\u9488(\u5982\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26),\u6709\u53ef\u80fd\u4e92\u76f8\u5f71\u54cd,\u4f46\u5927\u4f53\u4e0a\u4e92\u4e0d\u5f71\u54cd")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'/*\n * output: parent: x=0\n * output: child: x=2\n * \u72ec\u7acb\u4e0a\u4e0b\u6587\u4ee3\u8868\u62e5\u6709\u72ec\u7acb\u7684\u901a\u7528\u5bc4\u5b58\u5668\u4e0e\u6808,\u4ee3\u8868\u62e5\u6709\u62f7\u8d1d\u7684\u81ea\u52a8\u53d8\u91cf(\u5c40\u90e8\u53d8\u91cf),\u4e92\u4e0d\u5f71\u54cd\u5730\u8fdb\u884c\u4fee\u6539\n */\nint main(void) {\n    pid_t pid;\n    int x = 1;\n\n    pid = fork();\n\n    if (pid == 0) { // child\n        printf("child: x=%d\\n", ++x);\n        exit(0);\n    }\n\n    // parent\n    printf("parent: x=%d\\n", --x);\n    exit(0);\n}\n')),(0,i.kt)("h5",{id:"\u56de\u6536\u5b50\u8fdb\u7a0b"},"\u56de\u6536\u5b50\u8fdb\u7a0b"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#define N 2\n\nint main(void) {\n    int status, i;\n    pid_t pid[N], ret_pid;\n\n    for (i = 0; i < N; i++) {\n        if ((pid[i] = fork()) == 0) { // child\n            exit(100+i);\n        }\n    }\n\n    // parent reaps(\u56de\u6536) N children in order\n    i = 0;\n    while((ret_pid = waitpid(pid[i++], &status, 0)) > 0) {\n        if (WIFEXITED(statue)) {\n            printf("child: %d terminated normally with exit status=%d\\n",\n              ret_pid, WEXITSTATUS(status));\n        } else {\n            printf("child %d terminated abnormally\\n", ret_pid);\n        }\n    }\n\n    // only if there are no more children, it can exit normally\n    if (errno != ECHILD) {\n        unix_error("waitpid error"); // exit with error log\n    }\n\n    exit(0); // exit normally\n}\n')),(0,i.kt)("h3",{id:"\u4fe1\u53f7"},"\u4fe1\u53f7"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sys/types.h>\n#include <unistd.h>\n#include <signal.h>\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u4e00\u4e2a\u53ea\u53d1\u51fa\u800c\u672a\u88ab\u5904\u7406\u7684\u4fe1\u53f7\u4e3a\u5f85\u5904\u7406\u4fe1\u53f7"),(0,i.kt)("li",{parentName:"ul"},"\u4e00\u79cd\u7c7b\u578b\u81f3\u591a\u6709\u4e00\u4e2a\u5f85\u5904\u7406\u4fe1\u53f7, \u591a\u4f59\u5f85\u5904\u7406\u4fe1\u53f7",(0,i.kt)("strong",{parentName:"li"},"\u4e0d\u4f1a\u8fdb\u5165\u5904\u7406\u961f\u5217"),",\u53ea\u662f",(0,i.kt)("strong",{parentName:"li"},"\u88ab\u7b80\u5355\u4e22\u5f03")),(0,i.kt)("li",{parentName:"ul"},"\u4e0d\u53ef\u4ee5\u7528\u4fe1\u53f7\u5bf9\u5176\u4ed6\u4e8b\u4ef6\u8fdb\u884c\u8ba1\u6570, \u540c\u4e00\u4e8b\u4ef6\u591a\u6b21\u53d1\u751f\u4ea7\u751f\u7684\u4fe1\u53f7\u6709\u53ef\u80fd\u88ab\u7b80\u5355\u4e22\u5f03")),(0,i.kt)("h4",{id:"\u5904\u7406\u4fe1\u53f7"},"\u5904\u7406\u4fe1\u53f7"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'void handler(int sig) {\n   pid_t pid;\n\n   while ((pid = waitpid(-1, NULL, 0)) > 0)  {\n       printf("Handler reaped child %d\\n", (int)pid);\n   }\n\n   if (errno != ECHILD) {\n       unix_error("waitpid error");\n   } else {\n       sleep(2);\n   }\n\n   return;\n}\n\nint main(void) {\n    int i, n;\n    char buf[MAX_BUF];\n    pid_t pid;\n\n    if (signal(SIGCHLD, handler) == SIG_ERR) {\n        unix_error("signal error");\n    }\n\n    for (i = 0; i < 3; I++) {\n        pid = fork();\n\n        if (pid ==0) {\n            printf("Hello from child %d\\n", (int)getpid());\n            sleep(1);\n            exit(0);\n        }\n    }\n\n    // manually restart the READ call\n    while ((n = read(STDIN_FILENO, buf, sizeof(buf))) < 0) {\n        if (errno != EINTR) {\n            unix_error("read error");\n        }\n\n        printf("Parent processing input\\n");\n\n        while(1) {\n            ;\n        }\n\n        exit(0);\n    }\n}\n')),(0,i.kt)("h4",{id:"\u963b\u585e\u4fe1\u53f7"},"\u963b\u585e\u4fe1\u53f7"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"// how: SIG_BLOCK, SIG_UNBLOCK, SIG_SETMASK, \u662f\u5426\u963b\u585eset\u4e2d\u7684\u4fe1\u53f7\u5408\u96c6\nint sigprocmask(int how, const sigset_t *set, sigset_t *old_set);\n\nint sigemptyset(sigset_t *set);\nint sigfillset(sigset_t *set);\nint sigaddset(sigset_t *set, int sig_num);\nint sigdelset(sigset_t *set, int sig_num);\nint sigismember(const sigset_t *set\uff0c int sig_num);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'void handler(int sig) {\n    pid_t pid;\n\n    while ((pid = waitpid(-1, NULL, 0)) > 0) {\n        delete_job(pid);\n    }\n\n    if (errno != ECHILD) {\n        unix_error("waitpid error");\n    }\n}\n\n// \u4fdd\u8bc1\u7236\u8fdb\u7a0b\u5148\u6267\u884c add_job, \u518d\u6267\u884c delete_job\nint main(int argc, char **argv) {\n    int pid;\n    sigset_t mask;\n\n    signal(SIGCHLD, handler;)\n    init_job();\n\n    while (1) {\n        sigemptyset(&mask);\n        sigaddset(&mask, SIGCHLD);\n        sigprocmask(SIG_BLOCK, &mask, NULL); // block SIGCHLD\n\n        if ((pid = fork()) == 0) {\n            // unblock SIGCHLD in child, make it can transfer signal\n            sigprocmask(SIG_UNBLOCK, &mask, NULL);\n            execve("/bin/date", argv, NULL);\n        }\n\n        // parent process\n        add_job(pid);\n        // after add_job, unblock SIGCHLD, make it can handle signal\n        sigprocmask(SIG_UNBLOCK, &mask, NULL);\n    }\n}\n')),(0,i.kt)("h3",{id:"\u975e\u672c\u5730\u8df3\u8f6c"},"\u975e\u672c\u5730\u8df3\u8f6c"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <setjmp.h>\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"setjmp - catch: \u8fd4\u56de\u591a\u6b21"),(0,i.kt)("li",{parentName:"ul"},"longjmp - throw: \u4e0d\u8fd4\u56de")),(0,i.kt)("h2",{id:"\u7cfb\u7edf\u7ea7-io"},"\u7cfb\u7edf\u7ea7 I/O"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"// robust I/O\nssize_t rio_read_n(int fd, void *usr_buf, size_t n) {\n    size_t n_left = n;\n    ssize_t n_read;\n    char *buf_p = usr_buf;\n\n    while (n_left > 0) {\n        if ((n_read = read(fd, buf_p, n_left)) < 0) {\n            if (errno == EINTR) {\n                n_read = 0; // interrupted by signal_handler, re-call read()\n            } else {\n                return -1;\n            }\n        } else if (n_read == 0) {\n            break;\n        }\n\n        n_left -= n_read;\n        buf_p += n_read; // remove data from buf_p\n    }\n\n    return (n - left);\n}\n\n\nssize_t rio_write_n(int fd, void *usr_buf, size_t n) {\n    size_t n_left = n;\n    ssize_t n_written;\n    char *buf_p = usr_buf;\n\n    while (n_left > 0) {\n        if ((n_written = read(fd, buf_p, n_left)) < 0) {\n            if (errno == EINTR) {\n                n_written = 0; // interrupted by signal_handler, re-call read()\n            } else {\n                return -1;\n            }\n        }\n\n        n_left -= n_written;\n        buf_p += n_written; // remove data from buf_p\n    }\n\n    return n;\n}\n")),(0,i.kt)("h3",{id:"socket-io"},"socket I/O"),(0,i.kt)("h4",{id:"\u9650\u5236"},"\u9650\u5236"),(0,i.kt)("p",null,"\u8f93\u51fa\u51fd\u6570+\u8f93\u5165\u51fd\u6570: \u4e2d\u95f4\u5fc5\u987b\u63d2\u5165 fflush, fseek, fsetpos, rewind\n\u8f93\u5165\u51fd\u6570+\u8f93\u51fa\u51fd\u6570: \u4e2d\u95f4\u5fc5\u987b\u63d2\u5165 fseek, fsetpos, rewind"),(0,i.kt)("h4",{id:"io-\u51fd\u6570\u7684\u9009\u62e9"},"I/O \u51fd\u6570\u7684\u9009\u62e9"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"sprintf+rio_written: \u683c\u5f0f\u5316\u8f93\u51fa\u81f3\u5957\u63a5\u53e3"),(0,i.kt)("li",{parentName:"ul"},"rio_readlineb + sscanf: \u683c\u5f0f\u5316\u8f93\u5165")),(0,i.kt)("h3",{id:"zero-copy"},"Zero Copy"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"read()"),": 2 \u6b21\u72b6\u6001\u5207\u6362, 1 \u6b21 CPU Copy, 1 \u6b21 DMA Copy.\n",(0,i.kt)("inlineCode",{parentName:"p"},"write()"),": 2 \u6b21\u72b6\u6001\u5207\u6362, 1 \u6b21 CPU Copy, 1 \u6b21 DMA Copy."),(0,i.kt)("p",null,"\u603b\u8ba1 4 \u6b21\u72b6\u6001\u5207\u6362, 2 \u6b21 CPU Copy, 2 \u6b21 DMA Copy.\n\u6d89\u53ca\u591a\u6b21\u7a7a\u95f4\u5207\u6362\u548c\u6570\u636e\u5197\u4f59\u62f7\u8d1d, \u6548\u7387\u4f4e\u4e0b\uff0c\u53ef\u4f7f\u7528\u96f6\u62f7\u8d1d\u6280\u672f\u8fdb\u884c\u4f18\u5316:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mmap")," + ",(0,i.kt)("inlineCode",{parentName:"li"},"write"),": 4 \u6b21\u72b6\u6001\u5207\u6362, 1 \u6b21 CPU Copy, 2 \u6b21 DMA Copy."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sendfile"),": 2 \u6b21\u72b6\u6001\u5207\u6362, 1 \u6b21 CPU Copy, 2 \u6b21 DMA Copy."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sendfile")," + ",(0,i.kt)("inlineCode",{parentName:"li"},"DMA \u6536\u96c6"),": 2 \u6b21\u72b6\u6001\u5207\u6362, 0 \u6b21 CPU Copy, 2 \u6b21 DMA Copy (\u53ea\u53ef\u8bfb)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"splice"),": 2 \u6b21\u72b6\u6001\u5207\u6362, 0 \u6b21 CPU Copy, 2 \u6b21 DMA Copy (\u53ea\u53ef\u7ba1\u9053).")),(0,i.kt)("h2",{id:"\u7f51\u7edc"},"\u7f51\u7edc"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <netdb.h>\n\nint main(int argc, char *argv) {\n    char **pp;\n    struct in_addr addr;\n    struct hostent *host_p;\n\n    if (argc != 2) {\n        fprintf(stderr, "usage: %s <domain name or dotted-decimal>\\n", argv[0]);\n        exit(0);\n    }\n\n    if (inet_aton(argv[1], &addr) != 0) {\n        host_p = gethostbyaddr((const char*)&addr, sizeof(addr), AF_INET);\n    } else {\n        host_p = gethostbyname(argv[1]);\n    }\n\n    printf("official hostname: %s\\n:", host_p->h_name);\n\n    for (pp = host_p->h_aliases; *pp != NULL; pp++) {\n        printf("alias: %s\\n", *pp);\n    }\n\n    for (pp = host_p->h_addr_list; *pp != NULL; pp++) {\n        addr.s_addr = ((struct in_addr *)*pp)->s_addr;\n        printf("address: %s\\n", inet_ntoa(addr));\n    }\n\n    exit(0);\n}\n')),(0,i.kt)("h2",{id:"\u5e76\u53d1"},"\u5e76\u53d1"),(0,i.kt)("h3",{id:"\u9501"},"\u9501"),(0,i.kt)("p",null,"\u9632\u6b62\u6b7b\u9501: \u6bcf\u5bf9\u4e92\u65a5\u9501(s, t), \u6bcf\u4e2a\u7ebf\u7a0b\u987a\u5e8f\u8bf7\u6c42\u9501, \u9006\u5e8f\u91ca\u653e\u9501"),(0,i.kt)("h2",{id:"\u8c03\u8bd5\u6d4b\u8bd5"},"\u8c03\u8bd5/\u6d4b\u8bd5"),(0,i.kt)("h3",{id:"\u65e5\u5fd7"},"\u65e5\u5fd7"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'void unix_error(char *msg) {\n    fprintf(stderr, "%s: %s\\n", msg, strerror(errno));\n    exit(0);\n}\n\nvoid posix_error(int code, char *msg) {\n    fprintf(stderr, "%s: %s\\n", msg, strerror(code));\n    exit(0);\n}\n\nvoid dns_error(char *msg) {\n    fprintf(stderr, "%s: DNS error %d\\n", msg, h_errno);\n    exit(0);\n}\n\nvoid app_error(char *msg) {\n    fprintf(stderr, "%s\\n", msg);\n    exit(0);\n}\n')))}m.isMDXComponent=!0},2957:function(e,t,n){t.Z=n.p+"assets/images/stack_frame-f7e50238d6d113acc092a71f5faa6d62.png"}}]);