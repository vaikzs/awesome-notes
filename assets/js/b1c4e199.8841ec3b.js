"use strict";(self.webpackChunkawesome_notes=self.webpackChunkawesome_notes||[]).push([[7048],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var l=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,l,i=function(e,t){if(null==e)return{};var n,l,i={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var h=l.createContext({}),s=function(e){var t=l.useContext(h),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return l.createElement(h.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},k=l.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,h=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),k=s(n),m=i,p=k["".concat(h,".").concat(m)]||k[m]||d[m]||r;return n?l.createElement(p,a(a({ref:t},u),{},{components:n})):l.createElement(p,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=k;var o={};for(var h in t)hasOwnProperty.call(t,h)&&(o[h]=t[h]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var s=2;s<r;s++)a[s]=n[s];return l.createElement.apply(null,a)}return l.createElement.apply(null,n)}k.displayName="MDXCreateElement"},9360:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return h},default:function(){return m},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return d}});var l=n(7462),i=n(3366),r=(n(7294),n(3905)),a=["components"],o={author:"Sabertazimi",authorTitle:"Web Developer",authorURL:"https://github.com/sabertazimi",authorImageURL:"https://github.com/sabertazimi.png",tags:["CS","Algorithm"]},h="Algorithm Basic Notes",s={unversionedId:"computerScience/algorithms/algorithmsBasicNotes",id:"computerScience/algorithms/algorithmsBasicNotes",title:"Algorithm Basic Notes",description:"Sorting Algorithm",source:"@site/notes/computerScience/algorithms/algorithmsBasicNotes.md",sourceDirName:"computerScience/algorithms",slug:"/computerScience/algorithms/algorithmsBasicNotes",permalink:"/awesome-notes/computerScience/algorithms/algorithmsBasicNotes",editUrl:"https://github.com/sabertazimi/awesome-notes/edit/main/notes/computerScience/algorithms/algorithmsBasicNotes.md",tags:[{label:"CS",permalink:"/awesome-notes/tags/cs"},{label:"Algorithm",permalink:"/awesome-notes/tags/algorithm"}],version:"current",lastUpdatedBy:"sabertazimi",lastUpdatedAt:1648310706,formattedLastUpdatedAt:"3/26/2022",frontMatter:{author:"Sabertazimi",authorTitle:"Web Developer",authorURL:"https://github.com/sabertazimi",authorImageURL:"https://github.com/sabertazimi.png",tags:["CS","Algorithm"]},sidebar:"sidebar",previous:{title:"Awesome Notes",permalink:"/awesome-notes/intro"},next:{title:"OJ Basic Notes",permalink:"/awesome-notes/computerScience/algorithms/ojBasicNotes"}},u={},d=[{value:"Sorting Algorithm",id:"sorting-algorithm",level:2},{value:"Summary",id:"summary",level:3},{value:"Selection Sort",id:"selection-sort",level:3},{value:"Insertion Sort",id:"insertion-sort",level:3},{value:"Shell Sort",id:"shell-sort",level:3},{value:"Merge Sort",id:"merge-sort",level:3},{value:"Quick Sort",id:"quick-sort",level:3},{value:"Heap Sort",id:"heap-sort",level:3},{value:"Radix Sort",id:"radix-sort",level:3},{value:"Tree Algorithm",id:"tree-algorithm",level:2},{value:"Binary Search Tree",id:"binary-search-tree",level:3},{value:"2-3 Tree",id:"2-3-tree",level:3},{value:"Red-Black BST",id:"red-black-bst",level:3},{value:"\u57fa\u672c\u6027\u8d28",id:"\u57fa\u672c\u6027\u8d28",level:4},{value:"\u57fa\u672c\u64cd\u4f5c",id:"\u57fa\u672c\u64cd\u4f5c",level:4},{value:"B Tree",id:"b-tree",level:3},{value:"\u63d2\u5165/\u5220\u9664",id:"\u63d2\u5165\u5220\u9664",level:4},{value:"Fibonacci Heap",id:"fibonacci-heap",level:3},{value:"K-Dimensional Tree",id:"k-dimensional-tree",level:3},{value:"Search Algorithm",id:"search-algorithm",level:2},{value:"First Search",id:"first-search",level:3},{value:"Cycle Detection",id:"cycle-detection",level:3},{value:"Dynamic Programming",id:"dynamic-programming",level:2},{value:"\u5b50\u95ee\u9898",id:"\u5b50\u95ee\u9898",level:3},{value:"\u8303\u4f8b",id:"\u8303\u4f8b",level:3},{value:"Greedy Algorithm",id:"greedy-algorithm",level:2},{value:"Map Algorithm",id:"map-algorithm",level:2},{value:"\u56fe\u7684\u8868\u793a",id:"\u56fe\u7684\u8868\u793a",level:3},{value:"\u7a00\u758f\u77e9\u9635",id:"\u7a00\u758f\u77e9\u9635",level:4},{value:"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386",id:"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386",level:3},{value:"BFS Node Color",id:"bfs-node-color",level:4},{value:"BFS Node Parent",id:"bfs-node-parent",level:4},{value:"BFS Node Distance",id:"bfs-node-distance",level:4},{value:"\u5229\u7528\u961f\u5217\u5b9e\u73b0\u5e7f\u5ea6\u4f18\u5148\u904d\u5386",id:"\u5229\u7528\u961f\u5217\u5b9e\u73b0\u5e7f\u5ea6\u4f18\u5148\u904d\u5386",level:4},{value:"\u6df1\u5ea6\u4f18\u5148\u904d\u5386",id:"\u6df1\u5ea6\u4f18\u5148\u904d\u5386",level:3},{value:"DFS Node Color",id:"dfs-node-color",level:4},{value:"DFS Node Parent",id:"dfs-node-parent",level:4},{value:"DFS Node Distance",id:"dfs-node-distance",level:4},{value:"\u62d3\u6251\u6392\u5e8f",id:"\u62d3\u6251\u6392\u5e8f",level:3},{value:"Kahn \u7b97\u6cd5",id:"kahn-\u7b97\u6cd5",level:4},{value:"DFS(\u6df1\u5ea6\u4f18\u5148)",id:"dfs\u6df1\u5ea6\u4f18\u5148",level:4},{value:"\u5355\u6e90\u6700\u77ed\u8def\u5f84",id:"\u5355\u6e90\u6700\u77ed\u8def\u5f84",level:3},{value:"DAG Shortest Paths",id:"dag-shortest-paths",level:4},{value:"Bellman-Ford Algorithm",id:"bellman-ford-algorithm",level:4},{value:"Dijkstra Algorithm",id:"dijkstra-algorithm",level:4},{value:"\u7ed3\u70b9\u5bf9\u6700\u77ed\u8def\u5f84",id:"\u7ed3\u70b9\u5bf9\u6700\u77ed\u8def\u5f84",level:3},{value:"Floyd-Warshall Algorithm",id:"floyd-warshall-algorithm",level:4},{value:"\u6700\u5927\u6d41\u95ee\u9898",id:"\u6700\u5927\u6d41\u95ee\u9898",level:3},{value:"\u6700\u5927\u6d41\u6a21\u578b",id:"\u6700\u5927\u6d41\u6a21\u578b",level:4},{value:"\u6b8b\u5b58\u7f51\u7edc",id:"\u6b8b\u5b58\u7f51\u7edc",level:4},{value:"\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406",id:"\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406",level:4},{value:"Ford-Fulkerson Algorithm",id:"ford-fulkerson-algorithm",level:4},{value:"Tree Edit Distance",id:"tree-edit-distance",level:2},{value:"Definition",id:"definition",level:3}],k={toc:d};function m(e){var t=e.components,o=(0,i.Z)(e,a);return(0,r.kt)("wrapper",(0,l.Z)({},k,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"algorithm-basic-notes"},"Algorithm Basic Notes"),(0,r.kt)("h2",{id:"sorting-algorithm"},"Sorting Algorithm"),(0,r.kt)("h3",{id:"summary"},"Summary"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5f3a\u5236\u7a33\u5b9a: \u589e\u52a0(\u552f\u4e00)\u65f6\u95f4\u6233, \u4fee\u6539 CompareTo \u63a5\u53e3\u5b9a\u4e49 => \u5f53\u4e3b\u5143\u7d20\u76f8\u540c\u65f6, \u65f6\u95f4\u6233\u5c0f\u7684\u5143\u7d20\u66f4\u5c0f")),(0,r.kt)("h3",{id:"selection-sort"},"Selection Sort"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"swap: O(n)"),(0,r.kt)("li",{parentName:"ul"},"compare: O(n^2)")),(0,r.kt)("h3",{id:"insertion-sort"},"Insertion Sort"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"swap: O(n^2/4)"),(0,r.kt)("li",{parentName:"ul"},"compare: O(n^2/4)")),(0,r.kt)("h3",{id:"shell-sort"},"Shell Sort"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"swap: O(n^2/4)"),(0,r.kt)("li",{parentName:"ul"},"compare: O(n^2/4)")),(0,r.kt)("h3",{id:"merge-sort"},"Merge Sort"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5229\u7528 Merge Sort \u8ba1\u7b97\u9006\u5e8f\u5bf9\u4e2a\u6570: left","[i]"," > right","[j]"," => inversions += (mid - i + 1),\n\u5373\u6240\u6709 i~mid \u5143\u7d20\u90fd\u4e0e j \u5143\u7d20\u4e3a\u9006\u5e8f\u5bf9")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"    // merge and count\n    private static long merge(int[] a, int[] aux, int lo, int mid, int hi) {\n        long inversions = 0;\n\n        // copy to aux[]\n        for (int k = lo; k <= hi; k++) {\n            aux[k] = a[k];\n        }\n\n        // merge back to a[]\n        int i = lo, j = mid+1;\n        for (int k = lo; k <= hi; k++) {\n            if      (i > mid)           a[k] = aux[j++];\n            else if (j > hi)            a[k] = aux[i++];\n            else if (aux[j] < aux[i]) { a[k] = aux[j++]; inversions += (mid -\n            i + 1); }\n            else                        a[k] = aux[i++];\n        }\n        return inversions;\n    }\n\n    // return the number of inversions in the subArray b[lo..hi]\n    // side effect b[lo..hi] is rearranged in ascending order\n    private static long count(int[] a, int[] b, int[] aux, int lo, int hi) {\n        long inversions = 0;\n        if (hi <= lo) return 0;\n        int mid = lo + (hi - lo) / 2;\n        inversions += count(a, b, aux, lo, mid);\n        inversions += count(a, b, aux, mid+1, hi);\n        inversions += merge(b, aux, lo, mid, hi);\n        assert inversions == brute(a, lo, hi);\n        return inversions;\n    }\n\n\n    /**\n     * Returns the number of inversions in the integer array.\n     * The argument array is not modified.\n     * @param  a the array\n     * @return the number of inversions in the array. An inversion is a pair of\n     *         indices {@code i} and {@code j} such that {@code i < j}\n     *         and {@code a[i]} > {@code a[j]}.\n     */\n    public static long count(int[] a) {\n        int[] b   = new int[a.length];\n        int[] aux = new int[a.length];\n        for (int i = 0; i < a.length; i++)\n            b[i] = a[i];\n        long inversions = count(a, b, aux, 0, a.length - 1);\n        return inversions;\n    }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'    // return Kendall tau distance between two permutations\n    public static long distance(int[] a, int[] b) {\n        if (a.length != b.length) {\n            throw new IllegalArgumentException("Array dimensions disagree");\n        }\n        int n = a.length;\n\n        int[] ainV = new int[n];\n        for (int i = 0; i < n; i++)\n            ainV[a[i]] = i;\n\n        Integer[] bNew = new Integer[n];\n        for (int i = 0; i < n; i++)\n            bNew[i] = ainV[b[i]];\n\n        return Inversions.count(bNew);\n    }\n')),(0,r.kt)("h3",{id:"quick-sort"},"Quick Sort"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"partition: \u54e8\u5175(\u6700\u540e\u518d\u5c06\u5176\u5f52\u4f4d) + \u5927\u5faa\u73af + 2 \u5c0f\u5faa\u73af, \u4ea4\u6362\u5143\u7d20\u6cd5"),(0,r.kt)("li",{parentName:"ul"},"partition: \u8f85\u52a9\u6570\u7ec4 brr, 3 \u5faa\u73af(3 \u6b21\u626b\u63cf arr) \u5206\u522b\u5c06\u5c0f/\u7b49/\u5927\u4e8e guard \u7684\u6570\u52a0\u5165 brr"),(0,r.kt)("li",{parentName:"ul"},"partition: \u54e8\u5175(\u6700\u540e\u518d\u5c06\u5176\u5f52\u4f4d) + lo + hi, \u5916\u52a0 2 \u4e2a\u52a8\u6307\u9488 leftLimit \u4e0e rightLimit, \u8868\u793a\u5c0f\u4e8e\u533a\u7684\u4e0a\u754c\u548c\u5927\u4e8e\u533a\u7684\u4e0a\u754c")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// lt eq gt three parts\nvoid quick3waySort(int *a, int lo, int hi) {\n    if (hi <= lo) return;\n    int lt = lo, i = lo+1, gt = hi;\n    int v = a[lo];\n\n    while (i <= gt) {\n        int cmp = a[i].compareTo(v);\n        if      (cmp < 0) exch(a, lt++, i++);\n        else if (cmp > 0) exch(a, i, gt--);\n        else i++;\n    }\n\n    sort(a, lo, lt - 1);\n    sort(a, gt + 1, hi);\n}\n")),(0,r.kt)("h3",{id:"heap-sort"},"Heap Sort"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Built on Priority Queue"),(0,r.kt)("li",{parentName:"ul"},"swap: 2NlgN + 2N (2NlgN for sink N times, 2N for construct MaxHeap)"),(0,r.kt)("li",{parentName:"ul"},"compare: NlgN + N (NlgN for sink N times, N for construct MaxHeap)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// MaxPQ\nvoid swim(int k) {\n    while (k > 1 && less(k/2, k)) {\n        exch(k/2, k);\n        k = k/2;\n    }\n}\n\nvoid sink(int k) {\n    while (2*k <= N) {\n        int j = 2*k;\n        if (j < N && less(j, j+1)) j++;\n        if (!less(k, j)) break;\n        exch(k, j);\n        k = j;\n    }\n}\n")),(0,r.kt)("h3",{id:"radix-sort"},"Radix Sort"),(0,r.kt)("p",null,"\u57fa\u6570\u6392\u5e8f (\u53ef\u7528\u4e8e\u6df7\u4e71 shuffle \u6570\u7ec4):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u4ece\u4e2a\u4f4d\u5230\u9ad8\u4f4d\u653e\u5165\u6876"),(0,r.kt)("li",{parentName:"ul"},"\u4ece\u9ad8\u4f4d\u5230\u4e2a\u4f4d\u653e\u5165\u6876")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Sorting Algorithms Performance")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Performance",src:n(6824).Z,width:"495",height:"308"})),(0,r.kt)("h2",{id:"tree-algorithm"},"Tree Algorithm"),(0,r.kt)("h3",{id:"binary-search-tree"},"Binary Search Tree"),(0,r.kt)("p",null,"Hibbard Deletion"),(0,r.kt)("h3",{id:"2-3-tree"},"2-3 Tree"),(0,r.kt)("p",null,"2-3 Tree is Balance Tree:"),(0,r.kt)("p",null,"\u63d2\u5165:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"1+1=2node -> 3node"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"1+2=3node -> 4node")," -> 2node"),(0,r.kt)("li",{parentName:"ul"},"\u5c06 4node \u7ed3\u70b9\u4e2d\u95f4\u5143\u7d20\u79fb\u81f3\u7236\u7ed3\u70b9, \u5176\u4f59 2 \u5143\u7d20\u5206\u79bb\u4e3a\u5b50 2node \u8282\u70b9")),(0,r.kt)("h3",{id:"red-black-bst"},"Red-Black BST"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u57fa\u4e8e 2-3Tree, \u5c06 3node \u7528\u7ea2\u8272\u6807\u8bb0"),(0,r.kt)("li",{parentName:"ul"},"\u5173\u952e: \u5c06\u7ea2\u8272\u6807\u8bb0\u5411\u4e0a\u4f20\u9012\u81f3\u6839\u90e8")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"    // is node x red; false if x is null ?\n    private boolean isRed(Node x) {\n        if (x == null) return false;\n        return x.color == RED;\n    }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"    // make a right-leaning link lean to the left\n    private Node rotateLeft(Node h) {\n        // assert (h != null) && isRed(h.right);\n        Node x = h.right;\n\n        h.right = x.left;\n        x.left = h;\n\n        x.color = x.left.color;\n        x.left.color = RED;\n\n        x.size = h.size;\n        h.size = size(h.left) + size(h.right) + 1;\n\n        return x;\n    }\n\n    // make a left-leaning link lean to the right\n    private Node rotateRight(Node h) {\n        // assert (h != null) && isRed(h.left);\n        Node x = h.left;\n\n        h.left = x.right;\n        x.right = h;\n\n        x.color = x.right.color;\n        x.right.color = RED;\n\n        x.size = h.size;\n        h.size = size(h.left) + size(h.right) + 1;\n\n        return x;\n    }\n\n    // flip the colors of a node and its two children\n    private void flipColors(Node h) {\n        // h must have opposite color of its two children\n        // assert (h != null) && (h.left != null) && (h.right != null);\n        // assert (!isRed(h) &&  isRed(h.left) &&  isRed(h.right))\n        //    || (isRed(h)  && !isRed(h.left) && !isRed(h.right));\n        h.color = !h.color;\n        h.left.color = !h.left.color;\n        h.right.color = !h.right.color;\n    }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'    // insert the key-value pair in the subtree rooted at h\n    private Node put(Node h, Key key, Value val) {\n        // insert/put new node as left/right child of leaf node\n        if (h == null) return new Node(key, val, RED, 1);\n\n        int cmp = key.compareTo(h.key);\n        if      (cmp < 0) h.left  = put(h.left,  key, val);\n        else if (cmp > 0) h.right = put(h.right, key, val);\n        else              h.val   = val;\n\n        // fix-up any right-leaning links\n        if (isRed(h.right) && !isRed(h.left))      h = rotateLeft(h);\n        if (isRed(h.left)  &&  isRed(h.left.left)) h = rotateRight(h);\n        if (isRed(h.left)  &&  isRed(h.right))     flipColors(h);\n\n        h.size = size(h.left) + size(h.right) + 1;\n\n        return h;\n    }\n\n    public void put(Key key, Value val) {\n        if (key == null) {\n            throw new IllegalArgumentException("first argument to put() is null");\n        }\n\n        if (val == null) {\n            delete(key);\n            return;\n        }\n\n        root = put(root, key, val);\n        root.color = BLACK;\n        // assert check();\n    }\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"    // Assuming that h is red and both h.left and h.left.left\n    // are black, make h.left or one of its children red.\n    private Node moveRedLeft(Node h) {\n        // assert (h != null);\n        // assert isRed(h) && !isRed(h.left) && !isRed(h.left.left);\n\n        flipColors(h);\n        if (isRed(h.right.left)) {\n            h.right = rotateRight(h.right);\n            h = rotateLeft(h);\n            flipColors(h);\n        }\n        return h;\n    }\n\n    // Assuming that h is red and both h.right and h.right.left\n    // are black, make h.right or one of its children red.\n    private Node moveRedRight(Node h) {\n        // assert (h != null);\n        // assert isRed(h) && !isRed(h.right) && !isRed(h.right.left);\n        flipColors(h);\n        if (isRed(h.left.left)) {\n            h = rotateRight(h);\n            flipColors(h);\n        }\n        return h;\n    }\n\n    // restore red-black tree invariant\n    private Node balance(Node h) {\n        // assert (h != null);\n\n        if (isRed(h.right))                      h = rotateLeft(h);\n        if (isRed(h.left) && isRed(h.left.left)) h = rotateRight(h);\n        if (isRed(h.left) && isRed(h.right))     flipColors(h);\n\n        h.size = size(h.left) + size(h.right) + 1;\n        return h;\n    }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'    // delete the key-value pair with the minimum key rooted at h\n    private Node deleteMin(Node h) {\n        if (h.left == null)\n            return null;\n\n        if (!isRed(h.left) && !isRed(h.left.left))\n            h = moveRedLeft(h);\n\n        h.left = deleteMin(h.left);\n        return balance(h);\n    }\n\n    /**\n     * Removes the smallest key and associated value from the symbol table.\n     * @throws NoSuchElementException if the symbol table is empty\n     */\n    public void deleteMin() {\n        if (isEmpty()) throw new NoSuchElementException("BST underflow");\n\n        // if both children of root are black, set root to red\n        if (!isRed(root.left) && !isRed(root.right))\n            root.color = RED;\n\n        root = deleteMin(root);\n        if (!isEmpty()) root.color = BLACK;\n        // assert check();\n    }\n\n    // delete the key-value pair with the maximum key rooted at h\n    private Node deleteMax(Node h) {\n        if (isRed(h.left))\n            h = rotateRight(h);\n\n        if (h.right == null)\n            return null;\n\n        if (!isRed(h.right) && !isRed(h.right.left))\n            h = moveRedRight(h);\n\n        h.right = deleteMax(h.right);\n\n        return balance(h);\n    }\n\n    /**\n     * Removes the largest key and associated value from the symbol table.\n     * @throws NoSuchElementException if the symbol table is empty\n     */\n    public void deleteMax() {\n        if (isEmpty()) throw new NoSuchElementException("BST underflow");\n\n        // if both children of root are black, set root to red\n        if (!isRed(root.left) && !isRed(root.right))\n            root.color = RED;\n\n        root = deleteMax(root);\n        if (!isEmpty()) root.color = BLACK;\n        // assert check();\n    }\n\n    // delete the key-value pair with the given key rooted at h\n    private Node delete(Node h, Key key) {\n        // assert get(h, key) != null;\n\n        if (key.compareTo(h.key) < 0)  {\n            if (!isRed(h.left) && !isRed(h.left.left))\n                h = moveRedLeft(h);\n            h.left = delete(h.left, key);\n        }\n        else {\n            if (isRed(h.left))\n                h = rotateRight(h);\n            if (key.compareTo(h.key) == 0 && (h.right == null))\n                return null;\n            if (!isRed(h.right) && !isRed(h.right.left))\n                h = moveRedRight(h);\n            if (key.compareTo(h.key) == 0) {\n                Node x = min(h.right);\n                h.key = x.key;\n                h.val = x.val;\n                // h.val = get(h.right, min(h.right).key);\n                // h.key = min(h.right).key;\n                h.right = deleteMin(h.right);\n            }\n            else h.right = delete(h.right, key);\n        }\n        return balance(h);\n    }\n\n    /**\n     * Removes the specified key and its associated value from this symbol table\n     * (if the key is in this symbol table).\n     *\n     * @param  key the key\n     * @throws IllegalArgumentException if {@code key} is {@code null}\n     */\n    public void delete(Key key) {\n        if (key == null) throw new IllegalArgumentException("argument to\n        delete() is null");\n        if (!contains(key)) return;\n\n        // if both children of root are black, set root to red\n        if (!isRed(root.left) && !isRed(root.right))\n            root.color = RED;\n\n        root = delete(root, key);\n        if (!isEmpty()) root.color = BLACK;\n        // assert check();\n    }\n')),(0,r.kt)("h4",{id:"\u57fa\u672c\u6027\u8d28"},"\u57fa\u672c\u6027\u8d28"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u975e\u7ea2\u5373\u9ed1"),(0,r.kt)("li",{parentName:"ol"},"\u6839\u9ed1"),(0,r.kt)("li",{parentName:"ol"},"\u53f6\u9ed1 e.g T.null \u9ed1\u54e8\u5175"),(0,r.kt)("li",{parentName:"ol"},"\u7ea2\u7236\u5b69\u5b50\u9ed1"),(0,r.kt)("li",{parentName:"ol"},"\u7b80\u5355\u8def\u5f84\u540c\u9ed1"),(0,r.kt)("li",{parentName:"ol"},"\u53f3\u5b69\u5b50\u4e0d\u7ea2 e.g \u7236\u9ed1\u4e24\u5b69\u7ea2 -> \u7236\u7ea2\u4e24\u5b69\u9ed1(flip); \u7236\u9ed1\u53f3\u7ea2 -> \u7236\u5de6\u65cb\u53d8\u7ea2, \u53f3\u5b69\u5b50\u53d8\u9ed1(left-rotate)")),(0,r.kt)("h4",{id:"\u57fa\u672c\u64cd\u4f5c"},"\u57fa\u672c\u64cd\u4f5c"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u63d2\u5165(\u63d2\u5165\u7ea2\u70b9, \u65cb\u8f6c+\u91cd\u65b0\u7740\u8272(\u53cd\u8272)\u4fdd\u6301\u7ea2\u9ed1\u6027\u8d28)"),(0,r.kt)("li",{parentName:"ol"},"\u5220\u9664(\u5220\u9664\u7ea2\u70b9, \u65cb\u8f6c+\u91cd\u65b0\u7740\u8272(\u53cd\u8272)\u4fdd\u6301\u7ea2\u9ed1\u6027\u8d28)")),(0,r.kt)("h3",{id:"b-tree"},"B Tree"),(0,r.kt)("p",null,"t: \u6bcf\u4e2a\u5185\u90e8\u7ed3\u70b9\u81f3\u5c11 t \u4e2a\u5b69\u5b50(t-1 \u4e2a key), \u81f3\u591a 2t \u4e2a\u5b69\u5b50(2t-1 \u4e2a key)"),(0,r.kt)("h4",{id:"\u63d2\u5165\u5220\u9664"},"\u63d2\u5165/\u5220\u9664"),(0,r.kt)("p",null,"\u4e0b\u6eaf\u7684\u540c\u65f6,\u5206\u88c2\u6ee1\u7ed3\u70b9"),(0,r.kt)("h3",{id:"fibonacci-heap"},"Fibonacci Heap"),(0,r.kt)("p",null,"BST + \u5faa\u73af\u53cc\u5411\u94fe\u8868:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u4e00\u4e2a\u6839\u6811(\u6839\u7ed3\u70b9)\u5faa\u73af\u53cc\u5411\u94fe\u8868"),(0,r.kt)("li",{parentName:"ul"},"n \u4e2a\u5b69\u5b50\u5faa\u73af\u53cc\u5411\u94fe\u8868: \u6bcf\u4e2a\u6839\u6811\u7684\u6bcf\u5c42\u7ed3\u70b9\u5f62\u6210\u4e00\u4e2a\u5faa\u73af\u53cc\u5411\u94fe\u8868")),(0,r.kt)("h3",{id:"k-dimensional-tree"},"K-Dimensional Tree"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5206\u9694\u7a7a\u95f4\u6570\u636e")),(0,r.kt)("p",null,"e.g \u5de6\u5b50\u6811\uff1a\u5de6\u4e0b\u65b9 \u53f3\u5b50\u6811\uff1a\u53f3\u4e0a\u65b9"),(0,r.kt)("h2",{id:"search-algorithm"},"Search Algorithm"),(0,r.kt)("h3",{id:"first-search"},"First Search"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"DFS(\u6df1\u5ea6\u4f18\u5148)\uff1a\u6808\u5b9e\u73b0"),(0,r.kt)("li",{parentName:"ul"},"BFS(\u5e7f\u5ea6\u4f18\u5148)\uff1a\u961f\u5217\u5b9e\u73b0")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Search Algorithm Performance",src:n(6529).Z,width:"753",height:"461"})),(0,r.kt)("h3",{id:"cycle-detection"},"Cycle Detection"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u8bb8\u591a\u56fe\u8bba\u7b97\u6cd5\u4e0d\u9002\u7528\u4e8e\u5b58\u5728\u73af\u8def\u7684\u590d\u6742\u56fe,\u6545\u4f7f\u7528\u5faa\u73af\u68c0\u6d4b\u5254\u9664\u610f\u5916\u60c5\u51b5")),(0,r.kt)("p",null,"\u5904\u7406\u65b9\u6cd5\uff1a\u53ef\u5c06\u73af\u8def\u5143\u7d20(\u5982\u5f3a\u8054\u901a\u5206\u652f)\u89c6\u4f5c\u5355\u4e00\u5143\u7d20\uff0c\u5ffd\u89c6\u5176\u5185\u90e8\u7ed3\u6784"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"a = b+1;b = c+1;c = a+1;\n//a extends b;b extends c;c extends a;\n")),(0,r.kt)("h2",{id:"dynamic-programming"},"Dynamic Programming"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6700\u4f18\u89e3\u7ed3\u6784\u7279\u5f81: \u4e00\u4e2a\u9009\u62e9 + \u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3 - \u6240\u6709(\u53ef",(0,r.kt)("strong",{parentName:"li"},"\u91cd\u590d\u6c42\u89e3"),")\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u53ef",(0,r.kt)("strong",{parentName:"li"},"\u72ec\u7acb\u6c42\u89e3"),"(\u4e0d\u4e92\u76f8\u5f71\u54cd)"),(0,r.kt)("li",{parentName:"ul"},"\u9012\u5f52\u5b9a\u4e49\u6700\u4f18\u89e3: \u5217\u51fa\u9012\u5f52\u8868\u8fbe\u5f0f"),(0,r.kt)("li",{parentName:"ul"},"\u81ea\u5e95\u5411\u4e0a\u6c42\u89e3\u6700\u4f18\u89e3"),(0,r.kt)("li",{parentName:"ul"},"\u6784\u9020\u6700\u4f18\u89e3(\u989d\u5916\u4fe1\u606f\u6570\u7ec4)")),(0,r.kt)("h3",{id:"\u5b50\u95ee\u9898"},"\u5b50\u95ee\u9898"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5b50\u95ee\u9898\u53ef\u6620\u5c04\u4e3a\u6709\u5411\u56fe, \u5e76\u5bf9\u5176\u8fdb\u884c\u62d3\u6251\u6392\u5e8f: \u5171\u6709 O(n) \u4e2a\u5b50\u95ee\u9898,\n\u6bcf\u4e2a\u5b50\u95ee\u9898\u6700\u591a O(n) \u79cd\u9009\u62e9, \u5219\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2).\u5176\u5bf9\u5e94\u5b50\u95ee\u9898\u56fe\u6709 n \u4e2a\u9876\u70b9, \u6bcf\u4e2a\u9876\u70b9\u6700\u591a\u6709 n-1 \u6761\u8fb9."),(0,r.kt)("li",{parentName:"ul"},"\u9012\u5f52\u751f\u6210\u53ef\u4ee5\u91cd\u590d\u6c42\u89e3\u7684\u5b50\u95ee\u9898,\u800c\u4e0d\u662f\u4e0d\u65ad\u751f\u6210\u65b0\u7684\u5b50\u95ee\u9898")),(0,r.kt)("h3",{id:"\u8303\u4f8b"},"\u8303\u4f8b"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5207\u5272\u94a2\u6761\u95ee\u9898: max{p","[i]",", r","[n-i]","}"),(0,r.kt)("li",{parentName:"ul"},"\u77e9\u9635\u76f8\u4e58\u94fe\u95ee\u9898"),(0,r.kt)("li",{parentName:"ul"},"\u6700\u5927\u516c\u5171\u5b50\u5e8f\u5217\u95ee\u9898: r","[i, j]"," = max{r","[i, j-1]",", r","[i-1, j]","}"),(0,r.kt)("li",{parentName:"ul"},"\u65e0\u6743\u6700\u77ed\u8def\u5f84: path","[i, j]"," = min{path","[i, r]",", ","[r, j]","}")),(0,r.kt)("h2",{id:"greedy-algorithm"},"Greedy Algorithm"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6700\u4f18\u89e3\u7ed3\u6784\u7279\u5f81: \u4e00\u4e2a\u9009\u62e9 + \u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3 - \u6240\u6709(\u53ef",(0,r.kt)("strong",{parentName:"li"},"\u91cd\u590d\u6c42\u89e3"),")\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u53ef",(0,r.kt)("strong",{parentName:"li"},"\u72ec\u7acb\u6c42\u89e3"),"(\u4e0d\u4e92\u76f8\u5f71\u54cd)"),(0,r.kt)("li",{parentName:"ul"},"\u9012\u5f52\u5b9a\u4e49\u6700\u4f18\u89e3: \u5217\u51fa\u9012\u5f52\u8868\u8fbe\u5f0f"),(0,r.kt)("li",{parentName:"ul"},"\u81ea\u5e95\u5411\u4e0a\u6c42\u89e3\u6700\u4f18\u89e3: \u6bcf\u6b21\u4e0d\u8fdb\u884c\u591a\u6b21\u9009\u62e9, \u53ea\u8fdb\u884c\u4e00\u6b21 ",(0,r.kt)("strong",{parentName:"li"},"\u8d2a\u5fc3\u9009\u62e9")),(0,r.kt)("li",{parentName:"ul"},"\u6784\u9020\u6700\u4f18\u89e3(\u989d\u5916\u4fe1\u606f\u6570\u7ec4)")),(0,r.kt)("h2",{id:"map-algorithm"},"Map Algorithm"),(0,r.kt)("h3",{id:"\u56fe\u7684\u8868\u793a"},"\u56fe\u7684\u8868\u793a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u90bb\u63a5\u94fe\u8868\u6cd5"),(0,r.kt)("li",{parentName:"ul"},"\u90bb\u63a5\u77e9\u9635\u6cd5")),(0,r.kt)("h4",{id:"\u7a00\u758f\u77e9\u9635"},"\u7a00\u758f\u77e9\u9635"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"unordered_map< int, unordered_map<int, int> > // => (row, (col, val))\n")),(0,r.kt)("h3",{id:"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386"},"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386"),(0,r.kt)("h4",{id:"bfs-node-color"},"BFS Node Color"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"white: \u672a\u88ab\u53d1\u73b0/\u8bbf\u95ee"),(0,r.kt)("li",{parentName:"ul"},"gray: \u5df2\u88ab\u53d1\u73b0(\u8fdb\u5165\u961f\u5217), \u90bb\u63a5\u7ed3\u70b9\u672a\u5168\u90e8\u53d1\u73b0"),(0,r.kt)("li",{parentName:"ul"},"black: \u5df2\u88ab\u53d1\u73b0, \u90bb\u63a5\u7ed3\u70b9\u5168\u90e8\u53d1\u73b0")),(0,r.kt)("h4",{id:"bfs-node-parent"},"BFS Node Parent"),(0,r.kt)("p",null,"\u5e7f\u5ea6\u4f18\u5148\u6811\u7236\u7ed3\u70b9"),(0,r.kt)("h4",{id:"bfs-node-distance"},"BFS Node Distance"),(0,r.kt)("p",null,"\u8ddd\u79bb = v.pi.d + 1"),(0,r.kt)("h4",{id:"\u5229\u7528\u961f\u5217\u5b9e\u73b0\u5e7f\u5ea6\u4f18\u5148\u904d\u5386"},"\u5229\u7528\u961f\u5217\u5b9e\u73b0\u5e7f\u5ea6\u4f18\u5148\u904d\u5386"),(0,r.kt)("h3",{id:"\u6df1\u5ea6\u4f18\u5148\u904d\u5386"},"\u6df1\u5ea6\u4f18\u5148\u904d\u5386"),(0,r.kt)("p",null,"\u5229\u7528 \u9012\u5f52/\u6808 \u5b9e\u73b0\u6df1\u5ea6\u4f18\u5148\u904d\u5386"),(0,r.kt)("h4",{id:"dfs-node-color"},"DFS Node Color"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"white: \u672a\u88ab\u53d1\u73b0/\u8bbf\u95ee"),(0,r.kt)("li",{parentName:"ul"},"gray: \u5df2\u88ab\u53d1\u73b0, \u672a\u4e8c\u6b21\u8bbf\u95ee"),(0,r.kt)("li",{parentName:"ul"},"black: \u5df2\u88ab\u53d1\u73b0, \u4e8c\u6b21\u8bbf\u95ee(\u6bd4\u5176\u6df1\u7684\u6240\u6709\u7ed3\u70b9\u7686\u88ab\u53d1\u73b0)")),(0,r.kt)("p",null,"\u5f53\u7b2c\u4e00\u4e2a\u8bbf\u95ee edge(u,v) \u65f6:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"v.color == white: \u6811\u8fb9"),(0,r.kt)("li",{parentName:"ul"},"v.color == gray : \u540e\u5411\u8fb9(v \u4e3a \u6df1\u5ea6\u4f18\u5148",(0,r.kt)("em",{parentName:"li"},"\u68ee\u6797"),"\u7684\u7956\u7236\u7ed3\u70b9)"),(0,r.kt)("li",{parentName:"ul"},"v.color == black: \u524d\u5411\u8fb9/\u6a2a\u5411\u8fb9(v \u4e3a\u8f83\u6df1\u7684\u7ed3\u70b9/\u5b50\u7ed3\u70b9)"),(0,r.kt)("li",{parentName:"ul"},"\u65e0\u5411\u56fe\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u4e0d\u4f1a\u51fa\u73b0 \u524d\u5411\u8fb9/\u6a2a\u5411\u8fb9")),(0,r.kt)("h4",{id:"dfs-node-parent"},"DFS Node Parent"),(0,r.kt)("p",null,"\u6bd4 v \u6d45\u7684\u7ed3\u70b9(\u6bd4 v \u66f4\u65e9\u88ab\u53d1\u73b0\u7684\u7ed3\u70b9)"),(0,r.kt)("h4",{id:"dfs-node-distance"},"DFS Node Distance"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"v.d = ++time: \u88ab\u53d1\u73b0\u7684\u65f6\u95f4\u6233(\u5165\u6808)"),(0,r.kt)("li",{parentName:"ul"},"v.f = ++time: \u88ab\u4e8c\u6b21\u8bbf\u95ee\u7684\u65f6\u95f4\u6233(\u51fa\u6808)"),(0,r.kt)("li",{parentName:"ul"},"time",(0,r.kt)("inlineCode",{parentName:"li"},"<"),"v.d, white; v.d",(0,r.kt)("inlineCode",{parentName:"li"},"<"),"time",(0,r.kt)("inlineCode",{parentName:"li"},"<"),"v.f, gray: time",(0,r.kt)("inlineCode",{parentName:"li"},">"),"v.f, black")),(0,r.kt)("h3",{id:"\u62d3\u6251\u6392\u5e8f"},"\u62d3\u6251\u6392\u5e8f"),(0,r.kt)("p",null,"\u76ee\u6807\u96c6\u5408: \u62d3\u6251\u6392\u5e8f\u540e\u96c6\u5408, \u5148\u5165\u9876\u70b9\u9ad8\u5e8f, \u540e\u5165\u9876\u70b9\u4f4e\u5e8f"),(0,r.kt)("h4",{id:"kahn-\u7b97\u6cd5"},"Kahn \u7b97\u6cd5"),(0,r.kt)("p",null,"\u4e0d\u65ad\u5c06\u56fe\u4e2d\u5165\u5ea6\u4e3a 0 \u7684\u70b9\u79fb\u5165\u76ee\u6807\u96c6\u5408"),(0,r.kt)("h4",{id:"dfs\u6df1\u5ea6\u4f18\u5148"},"DFS(\u6df1\u5ea6\u4f18\u5148)"),(0,r.kt)("p",null,"\u5f53\u6df1\u5ea6\u904d\u5386\u81f3\u8f83\u6df1\u5904, \u5e76\u5f00\u59cb\u56de\u6eaf\u65f6, \u5c06\u6b64\u65f6\u8bbf\u95ee\u7684\u9876\u70b9\u52a0\u5165\u76ee\u6807\u96c6\u5408(v.f \u964d\u5e8f)"),(0,r.kt)("h3",{id:"\u5355\u6e90\u6700\u77ed\u8def\u5f84"},"\u5355\u6e90\u6700\u77ed\u8def\u5f84"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void Relax(int u, int v, int w) {\n    if v.d > u.d + w[u][v] {\n        v.pi = u;\n        v.d = v.pi.d + w[v.pi][v];\n    }\n}\n")),(0,r.kt)("h4",{id:"dag-shortest-paths"},"DAG Shortest Paths"),(0,r.kt)("p",null,"\u5148\u5c06\u56fe\u8fdb\u884c\u62d3\u6251\u6392\u5e8f(\u6df1\u5ea6\u4f18\u5148\u904d\u5386), \u518d\u6309\u7167\u62d3\u6251\u6392\u5e8f\u987a\u5e8f, \u4f9d\u6b21\u5bf9\u6bcf\u4e2a\u7ed3\u70b9(\u62d3\u6251\u6392\u5e8f)\u7684\u90bb\u63a5\u8fb9\u8fdb\u884c relax"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"a -> b -> c --\x3e d, \u4e14 a--b, a--c, b--d, c--d:\nrelax(a, b), relax(a, c), relax(b, d), relax(c, d)")),(0,r.kt)("h4",{id:"bellman-ford-algorithm"},"Bellman-Ford Algorithm"),(0,r.kt)("p",null,"\u5bf9\u6bcf\u6761\u8fb9\u8fdb\u884c n \u6b21(\u7ed3\u70b9\u603b\u6570) relax"),(0,r.kt)("h4",{id:"dijkstra-algorithm"},"Dijkstra Algorithm"),(0,r.kt)("p",null,"\u8d2a\u5fc3\u7b97\u6cd5: \u6bcf\u6b21\u9009\u53d6\u4e0d\u5c5e\u4e8e S \u96c6\u5408(white) \u4e14 v.d \u6700\u5c0f(gray)\u7684\u7ed3\u70b9, \u5bf9\u5176\u6240\u6709\u90bb\u63a5\u8fb9\u8fdb\u884c relax, \u5e76\u5c06\u5176\u52a0\u5165 S \u96c6\u5408(black)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"white: \u4e0d\u5c5e\u4e8e S \u96c6\u5408"),(0,r.kt)("li",{parentName:"ul"},"gray: \u4e0d\u5c5e\u4e8e S \u96c6\u5408 \u4e14 v.d \u6700\u5c0f"),(0,r.kt)("li",{parentName:"ul"},"black: \u5c5e\u4e8e S \u96c6\u5408")),(0,r.kt)("h3",{id:"\u7ed3\u70b9\u5bf9\u6700\u77ed\u8def\u5f84"},"\u7ed3\u70b9\u5bf9\u6700\u77ed\u8def\u5f84"),(0,r.kt)("p",null,"\u52a8\u6001\u89c4\u5212:l^m(i, j) = min(l^m-1(i, j), min(1<=k<=n){l^m-1(i, k)+w(k, j)})"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"m: \u4e2d\u95f4\u7ed3\u70b9\u4e2a\u6570")),(0,r.kt)("h4",{id:"floyd-warshall-algorithm"},"Floyd-Warshall Algorithm"),(0,r.kt)("p",null,"d^k(i, j) = w(i, j), k = 0\n| min(d^k-1(i, j), d^k-1(i, k) + d^k-1(k, j)), k >= 1"),(0,r.kt)("p",null,"pi^(i, j) = pi^k-1(i, j) or pi^k-1(k, j)"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"k: \u4e2d\u95f4\u7ed3\u70b9\u4e2a\u6570")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Matrix floyd_warshall(Matrix W) {\n    int n = W.rows;\n    Matrix D^0 = W;\n\n    for (int k = 1;k < n+1; k++) {\n        D^k = new Matrix(n);\n\n        for (int i = 1; i < n+1; i++) {\n            for (int j = 1; j < n+1; J++) {\n                d^k[i][j] = min(d^k-1[i][j], d^k-1[i][k]+d^k-1[k][j]);\n            }\n        }\n    }\n\n    return D^n;\n}\n")),(0,r.kt)("h3",{id:"\u6700\u5927\u6d41\u95ee\u9898"},"\u6700\u5927\u6d41\u95ee\u9898"),(0,r.kt)("p",null,"MaxFlow Problem:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Ford Fulkerson Algorithm",src:n(8625).Z,width:"398",height:"177"})),(0,r.kt)("h4",{id:"\u6700\u5927\u6d41\u6a21\u578b"},"\u6700\u5927\u6d41\u6a21\u578b"),(0,r.kt)("p",null,"\u6700\u5927\u6d41\u6a21\u578b\u5fc5\u987b\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u65e0\u53cc\u5411\u8fb9"),(0,r.kt)("li",{parentName:"ul"},"\u552f\u4e00\u7684\u6e90\u70b9 s \u548c \u552f\u4e00\u7684\u6c47\u70b9 t")),(0,r.kt)("p",null,"\u5bf9\u4e8e\u4e0d\u7b26\u5408\u8be5\u6a21\u578b\u7684\u95ee\u9898\u53ef\u8fdb\u884c\u7b80\u5355\u8f6c\u5316:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u53cc\u5411\u8fb9: \u6dfb\u52a0\u989d\u5916\u7ed3\u70b9, \u5207\u5272\u53cc\u5411\u8fb9\u7684\u5176\u4e2d\u4e00\u6761, \u4f7f\u5f97\u53cc\u5411\u8fb9\u53d8\u6210 3 \u6761\u5355\u5411\u8fb9")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"a --\x3e b, b --\x3e a: a --\x3e c, c --\x3e b, b --\x3e a")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u591a\u6e90\u70b9/\u6c47\u70b9: \u6dfb\u52a0\u4e00\u4e2a\u603b\u6e90\u70b9/\u6c47\u70b9")),(0,r.kt)("h4",{id:"\u6b8b\u5b58\u7f51\u7edc"},"\u6b8b\u5b58\u7f51\u7edc"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u82e5\u539f\u56fe u --\x3e v \u603b\u5bb9\u91cf > 0, \u5219\u6b8b\u5b58\u7f51\u7edc\u4e2d \u8fb9 u --\x3e v:\u5269\u4f59\u5bb9\u91cf, \u8fb9 v --\x3e u: \u5df2\u7528\u5bb9\u91cf"),(0,r.kt)("li",{parentName:"ul"},"\u589e\u5e7f\u8def\u5f84: \u6b8b\u5b58\u7f51\u7edc\u4e2d\u4e00\u6761\u53ef\u884c\u901a\u8def")),(0,r.kt)("h4",{id:"\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406"},"\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406"),(0,r.kt)("p",null,"MaxFlow-MinCut Theorem:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5207\u5272\u7684\u51c0\u6d41\u91cf: \u6d41\u51fa-\u6d41\u5165"),(0,r.kt)("li",{parentName:"ul"},"\u5207\u5272\u7684\u5bb9\u91cf: \u6d41\u51fa\u603b\u5bb9\u91cf(\u65e0\u9700\u51cf\u6d41\u5165\u603b\u5bb9\u91cf)"),(0,r.kt)("li",{parentName:"ul"},"\u6700\u5c0f\u5207\u5272: \u5bb9\u91cf\u6700\u5c0f\u7684\u5207\u5272")),(0,r.kt)("p",null,"\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406: \u4ee5\u4e0b\u4e09\u4e2a\u547d\u9898\u7b49\u4ef7"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"f \u662f G \u7684\u4e00\u4e2a\u6700\u5927\u6d41"),(0,r.kt)("li",{parentName:"ul"},"\u6b8b\u5b58\u7f51\u7edc Gf \u4e0d\u542b\u589e\u5e7f\u8def\u5f84"),(0,r.kt)("li",{parentName:"ul"},"|f| = c(S, T)(\u5207\u5272\u7684\u5bb9\u91cf): |f| <= c(S, T)(\u6d41\u7f51\u7edc\u4e2d\u4efb\u610f\u6d41 f <= \u4efb\u610f\u5207\u5272\u5bb9\u91cf c(S, T))")),(0,r.kt)("h4",{id:"ford-fulkerson-algorithm"},"Ford-Fulkerson Algorithm"),(0,r.kt)("p",null,"\u4e0d\u65ad\u5bfb\u627e\u589e\u5e7f\u8def\u5f84"),(0,r.kt)("h2",{id:"tree-edit-distance"},"Tree Edit Distance"),(0,r.kt)("h3",{id:"definition"},"Definition"),(0,r.kt)("p",null,"Tree Edit Distance: \u7ed9\u5b9a Cost(edit operation) \u65f6\u7684\u6700\u5c0f\u7f16\u8f91\u8d39\u7528"))}m.isMDXComponent=!0},8625:function(e,t,n){t.Z=n.p+"assets/images/FordFulkersonAlgorithm-19ebe532f485587976a333d1bf16e904.png"},6529:function(e,t,n){t.Z=n.p+"assets/images/SearchPerformance-c35706d7ac6324ad69aa7a599c5d1f50.jpg"},6824:function(e,t,n){t.Z=n.p+"assets/images/SortingPerformance-e4b01bbd4727d0eff705b1ac748b1ffa.png"}}]);