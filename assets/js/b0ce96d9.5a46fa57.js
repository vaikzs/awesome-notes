"use strict";(self.webpackChunkawesome_notes=self.webpackChunkawesome_notes||[]).push([[4005],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,m=u["".concat(l,".").concat(d)]||u[d]||h[d]||i;return n?a.createElement(m,s(s({ref:t},p),{},{components:n})):a.createElement(m,s({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5381:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return h}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),s=["components"],o={author:"Sabertazimi",authorTitle:"Web Developer",authorURL:"https://github.com/sabertazimi",authorImageURL:"https://github.com/sabertazimi.png",tags:["CS","Architecture"]},l="Architecture Basic Notes",c={unversionedId:"computerScience/architecture/archBasicNotes",id:"computerScience/architecture/archBasicNotes",title:"Architecture Basic Notes",description:"SuperPipeline and SuperScalar",source:"@site/notes/computerScience/architecture/archBasicNotes.md",sourceDirName:"computerScience/architecture",slug:"/computerScience/architecture/archBasicNotes",permalink:"/awesome-notes/computerScience/architecture/archBasicNotes",editUrl:"https://github.com/sabertazimi/awesome-notes/edit/main/notes/computerScience/architecture/archBasicNotes.md",tags:[{label:"CS",permalink:"/awesome-notes/tags/cs"},{label:"Architecture",permalink:"/awesome-notes/tags/architecture"}],version:"current",lastUpdatedBy:"sabertazimi",lastUpdatedAt:1649250539,formattedLastUpdatedAt:"4/6/2022",frontMatter:{author:"Sabertazimi",authorTitle:"Web Developer",authorURL:"https://github.com/sabertazimi",authorImageURL:"https://github.com/sabertazimi.png",tags:["CS","Architecture"]},sidebar:"sidebar",previous:{title:"OJ Basic Notes",permalink:"/awesome-notes/computerScience/algorithms/ojBasicNotes"},next:{title:"Graph Processing Basic Notes",permalink:"/awesome-notes/computerScience/architecture/graphProcessingBasicNotes"}},p={},h=[{value:"SuperPipeline and SuperScalar",id:"superpipeline-and-superscalar",level:2},{value:"Instructions Dependencies and Latencies",id:"instructions-dependencies-and-latencies",level:3},{value:"Branch Prediction",id:"branch-prediction",level:3},{value:"VLIW (Very Long Instruction Word)",id:"vliw-very-long-instruction-word",level:2},{value:"Out of Order Execution (OoO or OoE)",id:"out-of-order-execution-ooo-or-ooe",level:2},{value:"The Brainiac vs Speed-demon Debate",id:"the-brainiac-vs-speed-demon-debate",level:3},{value:"Power Wall and ILP Wall",id:"power-wall-and-ilp-wall",level:3},{value:"Decoupled x86 microarchitecture",id:"decoupled-x86-microarchitecture",level:3},{value:"SMT (Hardware Threads)",id:"smt-hardware-threads",level:2},{value:"More cores or Wider cores",id:"more-cores-or-wider-cores",level:3},{value:"DLP (data-level parallelism)",id:"dlp-data-level-parallelism",level:2},{value:"SIMD Vector Instructions",id:"simd-vector-instructions",level:3},{value:"Memory",id:"memory",level:2},{value:"Memory Wall",id:"memory-wall",level:3},{value:"Caches",id:"caches",level:3},{value:"Cache Locality",id:"cache-locality",level:4},{value:"Cache Layout",id:"cache-layout",level:4},{value:"Memory Latency and Bandwidth",id:"memory-latency-and-bandwidth",level:3},{value:"Distributed System",id:"distributed-system",level:2},{value:"Reference",id:"reference",level:2}],u={toc:h};function d(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"architecture-basic-notes"},"Architecture Basic Notes"),(0,i.kt)("h2",{id:"superpipeline-and-superscalar"},"SuperPipeline and SuperScalar"),(0,i.kt)("p",null,"A superpipeline processor own a 5-20 stage pipeline,\na superscalar issues 3-8 instructions in parallel\n(more functional units like integer/float units)."),(0,i.kt)("h3",{id:"instructions-dependencies-and-latencies"},"Instructions Dependencies and Latencies"),(0,i.kt)("p",null,"The number of cycles between when an instruction reaches the execute stage\nand when its result is available for use by other instructions is called the\ninstruction's latency.\nThe deeper the pipeline, the more stages and thus the longer the ",(0,i.kt)("strong",{parentName:"p"},"latency"),".\nThe processor will need to stall the execution of the instructions until\ntheir data is available (",(0,i.kt)("strong",{parentName:"p"},"dependencies"),"),\ninserting a bubble into the pipeline where no work gets done, making multiple\nissue in this case impossible."),(0,i.kt)("h3",{id:"branch-prediction"},"Branch Prediction"),(0,i.kt)("p",null,"Another key problem for pipelining is branches\n(flush out all instructions of wrong branch).\nUnfortunately, even the best branch prediction techniques are sometimes wrong,\nand with a deep pipeline many instructions might need to be cancelled.\nThis is called the mispredict penalty.\nThe deeper the pipeline, the further into the future you must try to predict,\nthe more likely you'll be wrong,\nand the greater the mispredict penalty when you are."),(0,i.kt)("p",null,"Predication can be used to eliminate branches such as ",(0,i.kt)("inlineCode",{parentName:"p"},"cmovle"),"\n(move data only when testing flag stays less or equal state).\nThe Alpha architecture had a conditional move instruction from the very beginning.\nMIPS, SPARC, x86 added it later and the ARM architecture\nwas the first architecture with a ",(0,i.kt)("strong",{parentName:"p"},"fully predicated")," instruction set\n(though the early ARM processors only had short pipelines and small mispredict penalties)."),(0,i.kt)("h2",{id:"vliw-very-long-instruction-word"},"VLIW (Very Long Instruction Word)"),(0,i.kt)("p",null,"In cases where backward compatibility is not an issue,\nit is possible for the instruction set itself to be designed\nto explicitly group instructions to be executed in parallel.\nA VLIW processor's instruction flow is much like a super-scalar,\nexcept the decode/dispatch stage is much simpler\nand only occurs for each group of sub-instructions.\nNo VLIW designs have yet been commercially successful as mainstream CPUs."),(0,i.kt)("h2",{id:"out-of-order-execution-ooo-or-ooe"},"Out of Order Execution (OoO or OoE)"),(0,i.kt)("p",null,"If branches and long-latency instructions are going to cause bubbles in the pipeline(s),\nthen perhaps those empty cycles can be used to do other work.\nTo achieve this, the instructions in the program must be reordered\n(",(0,i.kt)("strong",{parentName:"p"},"instruction scheduling")," and ",(0,i.kt)("strong",{parentName:"p"},"register renaming"),").\nCompiler completes static instruction scheduling\n(rearranged instruction stream at compile time),\nprocessor completes dynamic instruction scheduling\n(renaming registers and reorder instruction stream at runtime).\nThe processor must keep a mapping of the instructions\nin flight at any moment and the physical registers they use.\nThe extra logic of scheduler is particularly ",(0,i.kt)("strong",{parentName:"p"},"power-hungry"),"\nbecause those transistors are ",(0,i.kt)("strong",{parentName:"p"},"always")," working."),(0,i.kt)("h3",{id:"the-brainiac-vs-speed-demon-debate"},"The Brainiac vs Speed-demon Debate"),(0,i.kt)("p",null,"Brainiac designs are at the smart-machine end of the spectrum,\nwith lots of OOO hardware trying to squeeze every last drop of\ninstruction-level parallelism out of the code,\neven if it costs millions of logic transistors and years of design effort to do it.\nIn contrast, speed-demon designs are simpler and smaller,\nrelying on a smart compiler and willing to sacrifice a little bit of\ninstruction-level parallelism\nfor the other benefits that simplicity brings.\nWhich would you rather have: 4 powerful brainiac cores, or 8 simpler in-order cores?\nWhen it comes to the brainiac debate,\nmany vendors have gone down one path then changed their mind and switched to\nthe other side."),(0,i.kt)("h3",{id:"power-wall-and-ilp-wall"},"Power Wall and ILP Wall"),(0,i.kt)("p",null,"Power usage goes up even faster than clock speed does\n(increasing clock speed by 20% with 50% more power usage,\nO(power) = ",(0,i.kt)("inlineCode",{parentName:"p"},"frequency * Voltage * Voltage"),").\nLeakage current also goes up as the voltage is increased,\nleakage generally goes up as the temperature increases as well.\nThe power and heat problems become unmanageable,\nbecause it's simply not possible to provide that much power and cooling to a\nsilicon chip.\nThus, going purely for clock speed is not the best strategy."),(0,i.kt)("p",null,"normal programs just don't have a lot of fine-grained parallelism in them,\ndue to a combination of load latencies, cache misses,\nbranches and dependencies between instructions.\nThis limit of available instruction-level parallelism is called the ILP wall."),(0,i.kt)("h3",{id:"decoupled-x86-microarchitecture"},"Decoupled x86 microarchitecture"),(0,i.kt)("p",null,'Dynamically decode the x86 instructions into simple,\nRISC-like micro-instructions (\u03bcops, pronounced "micro-ops"),\nwhich can then be executed by a fast,\nRISC-style register-renaming OOO superscalar core.\nThe pipeline depth of Core i',(0,i.kt)("em",{parentName:"p"},"2/i"),"3 Sandy/Ivy Bridge\nwas shown as 14/19 stages in the earlier section on superpipeline,\nit is 14 stages when the processor is running from its L0 \u03bcop cache\n(which is the common case),\nbut 19 stages when running from the L1 instruction cache\nand having to decode x86 instructions and translate them into \u03bcops."),(0,i.kt)("h2",{id:"smt-hardware-threads"},"SMT (Hardware Threads)"),(0,i.kt)("p",null,"Even the most aggressively brainiac OOO superscalar processor\nwill still almost never exceed an average of about 2-3 instructions per cycle\nwhen running most mainstream, real-world software,\ndue to a combination of load latencies, cache misses,\nbranching and dependencies between instructions."),(0,i.kt)("p",null,"Simultaneous multi-threading (",(0,i.kt)("strong",{parentName:"p"},"SMT"),") is a processor design technique\nwhich exploits thread-level parallelism\n(other running programs, or other threads within the same program).\nThe instructions come from multiple threads running at the same time,\nall on the one processor core.\nAn SMT processor uses just one physical processor core\nto present two or more logical processors to the system.\nSeparate units include the program counter, the architecturally-visible registers,\nthe memory mappings held in the TLB,\nshared units include the decoders and dispatch logic,\nthe functional units, and the caches.\nSMT is essentially a way to ",(0,i.kt)("strong",{parentName:"p"},"convert TLP into ILP"),"."),(0,i.kt)("p",null,"However, in practice, at least for desktops, laptops, tablets, phones and small servers,\nit is rarely the case that several different programs\nare actively executing at the same time,\nso it usually comes down to just the ",(0,i.kt)("strong",{parentName:"p"},"one task"),"\nthe machine is currently being used for.\nSome applications, such as database systems, image and video processing,\naudio processing, 3D graphics rendering and scientific code,\ndo have obvious high-level (coarse-grained) parallelism available and easy to exploit,\nbut many of these applications which are easy\nto parallelize are primarily limited by ",(0,i.kt)("strong",{parentName:"p"},"memory bandwidth"),", not by the processor."),(0,i.kt)("p",null,"If one thread saturates just one functional unit which the other threads need,\nit effectively stalls all of the other threads,\neven if they only need relatively little use of that unit.\n",(0,i.kt)("strong",{parentName:"p"},"Competition")," between the threads for cache space may produce worse results\nthan letting just one thread have all the cache space available,\nparticularly for software where the critical working set is highly cache-size sensitive,\nsuch as hardware simulators/emulators, virtual machines and high-quality video encoding."),(0,i.kt)("p",null,"Due to above 3 reasons, SMT performance can actually\nbe worse than single-thread performance\n(traditional context switching between threads) sometimes."),(0,i.kt)("h3",{id:"more-cores-or-wider-cores"},"More cores or Wider cores"),(0,i.kt)("p",null,"Very wide superscalar designs scale very badly\nin terms of both chip area and clock speed,\nso a single 10-issue core would actually\nbe both larger and slower than two 5-issue cores:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the complex multiple-issue dispatch logic scales up as (issue width)^2"),(0,i.kt)("li",{parentName:"ul"},"highly multi-ported register files\nand caches to service all those simultaneous accesses")),(0,i.kt)("p",null,'Today, a "typical" SMT design implies both a wide execution core\nand OOO execution logic,\nincluding multiple decoders,\nthe large and complex superscalar dispatch logic and so on.\nFor applications with lots of active but ',(0,i.kt)("strong",{parentName:"p"},"memory-latency-limited")," threads\n(database systems, 3D graphics rendering),\nmore ",(0,i.kt)("strong",{parentName:"p"},"simple cores")," would be better\nbecause big/wide cores would spend most of their time waiting for memory anyway.\nFor ",(0,i.kt)("strong",{parentName:"p"},"most applications"),", however,\nthere simply are not enough threads active to make this viable,\nand the performance of just a single thread is much more important,\nso a design with ",(0,i.kt)("strong",{parentName:"p"},"fewer but bigger, wider"),", more brainiac cores is more appropriate."),(0,i.kt)("p",null,"Intel's Xeon Haswell, the server version of Core ",(0,i.kt)("inlineCode",{parentName:"p"},"i*4")," Haswell,\nuses 5.7 billion transistors to provide 18 cores (up from 8 in Xeon Sandy Bridge),\neach a very aggressively brainiac 8-issue design (up from 6-issue in Sandy Bridge),\neach still with 2-thread SMT.\nIBM's POWER8 uses 4.4 billion transistors to\nmove to a considerably more brainiac core design than POWER7,\nand at the same time provide 12 cores (up from 8 in POWER7),\neach with 8-thread SMT (up from 4 in POWER7)."),(0,i.kt)("p",null,"In the future we might see ",(0,i.kt)("strong",{parentName:"p"},"asymmetric designs"),',\nwith one or two big, wide,\nbrainiac cores plus a large number of smaller, narrower, simpler cores.\nIBM\'s Cell processor (used in the Sony PlayStation 3)\nwas arguably the first such design,\nbut unfortunately it suffered from severe programmability problems\nbecause the ISA incompatible between small cores and large main core\nand had limited by awkward access to main memory.\nSome modern ARM designs also use an asymmetric approach,\nwith several large cores paired with one or a few smaller, simpler "companion" cores,\nto increase battery life.'),(0,i.kt)("h2",{id:"dlp-data-level-parallelism"},"DLP (data-level parallelism)"),(0,i.kt)("p",null,"Rather than looking for ways to execute groups of instructions in parallel,\nthe idea is to look for ways to make one instruction\napply to a group of data values in parallel."),(0,i.kt)("h3",{id:"simd-vector-instructions"},"SIMD Vector Instructions"),(0,i.kt)("p",null,"One of DLP methods called ",(0,i.kt)("strong",{parentName:"p"},"SIMD")," parallelism (single instruction, multiple data).\nMore often, it's called ",(0,i.kt)("strong",{parentName:"p"},"vector processing"),".\nWith some thought, a small set of vector instructions\ncan enable some impressive speedups,\nsuch as packing/unpacking, byte shuffling, bit masking instructions,\njust like x86 Matrix Math Extensions (MMX),\nStreaming SIMD Extensions (SSE),\nand ongoing revisions of Advanced Vector Extensions (AVX).\nMMX provide 64-bit vectors, x86 SSE added 8 new 128-bit registers,\nthen widened to 256 bits with AVX."),(0,i.kt)("h2",{id:"memory"},"Memory"),(0,i.kt)("h3",{id:"memory-wall"},"Memory Wall"),(0,i.kt)("p",null,"Latency is especially bad for loads from memory,\nwhich make up about a quarter of all instructions.\nUsing a modern SDRAM with a CAS latency of 11,\nwill typically be ",(0,i.kt)("strong",{parentName:"p"},"24 cycles of the memory system bus"),",\n1 to send the address to the DIMM (memory module),\nRAS-to-CAS delay of 11 for the row access,\nCAS latency of 11 for the column access,\nand a final 1 to send the first piece of data up to the processor (or E-cache).\nOn a multi-processor system, even more bus cycles\nmay be required to support ",(0,i.kt)("strong",{parentName:"p"},"cache coherency")," between the processors.\nThere are the cycles within the processor itself,\nchecking the various on-chip caches before the address\neven gets sent to the memory controller, accounting for ",(0,i.kt)("strong",{parentName:"p"},"20 CPU cycles"),".\nFor 2.4GHz processor and 800MHz SDRAM memory,\nsumming up to ",(0,i.kt)("inlineCode",{parentName:"p"},"(1+11+11+1) * 2400/800 + 20 = 92")," CPU cycles,\na 4.0 GHz processor would wait a staggering 140 cycles to access main memory.\nThis problem of the large, and slowly growing,\ngap between the processor and main memory is called the memory wall."),(0,i.kt)("h3",{id:"caches"},"Caches"),(0,i.kt)("p",null,"Modern processors solve the problem of the memory wall with caches.\nA cache is a small but fast type of memory located on or near the processor chip.\nIts role is to keep ",(0,i.kt)("strong",{parentName:"p"},"faster copies")," of small pieces of main memory,\nL1 caches around 8-64K in size, L2 caches around 100K-10M in size,\nlarger and slower L3 caches.\nA modern primary (L1) cache has a latency of just 2 to 4 processor cycles,\nwith around 90% caches hit rates."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The memory hierarchy of a modern desktop/laptop: Core i4 Haswell.")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Level"),(0,i.kt)("th",{parentName:"tr",align:null},"Size"),(0,i.kt)("th",{parentName:"tr",align:null},"Latency (cycles)"),(0,i.kt)("th",{parentName:"tr",align:null},"Location"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"L1 Cache"),(0,i.kt)("td",{parentName:"tr",align:null},"32KB"),(0,i.kt)("td",{parentName:"tr",align:null},"4"),(0,i.kt)("td",{parentName:"tr",align:null},"inside each core")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"L2 Cache"),(0,i.kt)("td",{parentName:"tr",align:null},"256KB"),(0,i.kt)("td",{parentName:"tr",align:null},"12"),(0,i.kt)("td",{parentName:"tr",align:null},"beside each core")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"L3 Cache"),(0,i.kt)("td",{parentName:"tr",align:null},"6MB"),(0,i.kt)("td",{parentName:"tr",align:null},"~21"),(0,i.kt)("td",{parentName:"tr",align:null},"shared between all cores")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"L4 E-Cache"),(0,i.kt)("td",{parentName:"tr",align:null},"128MB"),(0,i.kt)("td",{parentName:"tr",align:null},"~58"),(0,i.kt)("td",{parentName:"tr",align:null},"separate eDRAM chip")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"RAM"),(0,i.kt)("td",{parentName:"tr",align:null},"8+GB"),(0,i.kt)("td",{parentName:"tr",align:null},"~117"),(0,i.kt)("td",{parentName:"tr",align:null},"SDRAM DIMMs on motherboard")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Swap"),(0,i.kt)("td",{parentName:"tr",align:null},"100+GB"),(0,i.kt)("td",{parentName:"tr",align:null},"10000+"),(0,i.kt)("td",{parentName:"tr",align:null},"hard disk or SSD")))),(0,i.kt)("h4",{id:"cache-locality"},"Cache Locality"),(0,i.kt)("p",null,"Temporal locality is exploited by merely keeping recently accessed data in the cache.\nTo take advantage of spatial locality,\ndata is transferred from main memory up into the cache\nin blocks of a few dozen bytes at a time, called a cache line."),(0,i.kt)("h4",{id:"cache-layout"},"Cache Layout"),(0,i.kt)("p",null,"Using the virtual address might cause caches\nneed to be flushed on every context switch (",(0,i.kt)("strong",{parentName:"p"},"thrashing"),")\n(2 programs mapping a same virtual address to different physical address).\nUsing the physical address means the V2N mapping must be performed,\nmaking every cache lookup slower.\nA common trick is to use virtual addresses\nfor the cache indexing but physical addresses for the tags.\nThe virtual-to-physical mapping (TLB lookup) can then\nbe performed in parallel with the cache indexing\nso that it will be ready in time for the tag comparison.\nSuch a scheme is called a virtually-indexed physically-tagged cache."),(0,i.kt)("p",null,'Set-associative caches are able to avoid some unfortunate cache conflicts.\nUnfortunately, the more highly associative a cache is, the slower it is to access.\nThe instruction L1 cache can afford to be highly set-associative\n(prefetching and buffering in pipeline),\nbut the data L1 cache settled on 4-way set-associative as the sweet spot.\nThe large L2/L3 cache (LLC for "last-level cache")\nis also usually highly associative, perhaps as much as 12- or 16-way.\nExternal E-cache is sometimes direct-mapped for flexibility of size and implementation.'),(0,i.kt)("h3",{id:"memory-latency-and-bandwidth"},"Memory Latency and Bandwidth"),(0,i.kt)("p",null,"Lower-latency designs will be better for pointer-chasing code,\nsuch as compilers and database systems.\nBandwidth-oriented (adding more memory banks and making the busses wider)\nsystems have the advantage for programs with simple, linear access patterns,\nsuch as image processing and scientific code."),(0,i.kt)("p",null,"Latency is much harder to improve than bandwidth.\nSynchronously clocked DRAM (SDRAM) allowed pipelining of the memory system.\nThis reduces effective latency because it allows\na new memory access to be started before the current one has completed,\nwhile an asynchronous memory system had\nto wait for the transfer of half a cache line\nfrom the previous access before starting a new request."),(0,i.kt)("h2",{id:"distributed-system"},"Distributed System"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5c0f\u578b\u673a\u662f\u4e13\u95e8\u8bbe\u8ba1\u7684\u786c\u4ef6\u548c\u4e13\u95e8\u8bbe\u8ba1\u7684\u8f6f\u4ef6\uff0c\u53ea\u9762\u5411\u8fd9\u79cd\u89c4\u6a21\uff08\u4f8b\u5982\u51e0\u767e\u9897 CPU\uff09\u7684\u8ba1\u7b97"),(0,i.kt)("li",{parentName:"ul"},"\u5c0f\u578b\u673a\u662f\u5b8c\u5168\u95ed\u6e90\u7684\uff0c\u4e0d\u9700\u8981\u8003\u8651\u6269\u5c55\u6027\uff0c\u7279\u5b9a\u7684\u51e0\u79cd\u786c\u4ef6\u5728\u7a33\u5b9a\u6027\u4e0a\u524d\u8fdb\u4e86\u4e00\u5927\u6b65"),(0,i.kt)("li",{parentName:"ul"},"x86 \u7684 IO \u6027\u80fd\u88ab\u67b6\u6784\u9501\u6b7b\u4e86\uff0c\u5404\u79cd\u603b\u7ebf\u3001PCI\u3001PCIe\u3001USB\u3001SATA\u3001\u4ee5\u592a\u7f51\uff0c\u4e3a\u4e86\u4e2a\u4eba\u8ba1\u7b97\u673a\u7684\u4fbf\u5229\u6027\uff0c\u727a\u7272\u4e86\u5f88\u591a\u7684\u6027\u80fd\u548c\u53ef\u9760\u6027"),(0,i.kt)("li",{parentName:"ul"},"\u5c0f\u578b\u673a\u4f7f\u7528\u603b\u7ebf\u901a\u4fe1\uff0c\u53ef\u4ee5\u5b9e\u73b0\u6781\u9ad8\u7684\u4fe1\u606f\u4f20\u9012\u6548\u7387\uff0c\u6781\u5176\u6709\u6548\u7684\u76d1\u63a7\u4ee5\u53ca\u6781\u9ad8\u7684\u6545\u969c\u9694\u79bb\u901f\u5ea6")),(0,i.kt)("p",null,"x86 \u670d\u52a1\u5668\u57fa\u4e8e",(0,i.kt)("inlineCode",{parentName:"p"},"\u7f51\u7edc\u7684\u5206\u5e03\u5f0f"),"\u5177\u6709\u5929\u7136\u7684\u7f3a\u9677:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u64cd\u4f5c\u7cfb\u7edf\u51b3\u5b9a\u4e86\u7f51\u7edc\u6027\u80fd\u4e0d\u8db3"),(0,i.kt)("li",{parentName:"ul"},"\u7f51\u7edc\u9700\u8981\u4f7f\u7528\u4e8b\u4ef6\u9a71\u52a8\u5904\u7406\uff0c\u6bd4\u603b\u7ebf\u7535\u8def\u7684\u5ef6\u8fdf\u9ad8\u51e0\u4e2a\u6570\u91cf\u7ea7"),(0,i.kt)("li",{parentName:"ul"},"PC \u673a\u7684\u786c\u4ef6\u4e0d\u591f\u53ef\u9760\uff0c\u6545\u969c\u7387\u9ad8"),(0,i.kt)("li",{parentName:"ul"},"\u5f88\u96be\u6709\u6548\u76d1\u63a7\uff0c\u9694\u79bb\u6545\u969c\u901f\u5ea6\u6162")),(0,i.kt)("h2",{id:"reference"},"Reference"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://www.lighterra.com/papers/modernmicroprocessors"},"Modern Microprocessors \u2013 A 90-Minute Guide. Jason R. C. Patterson. Technical paper, Lighterra, May 2015"))))}d.isMDXComponent=!0}}]);